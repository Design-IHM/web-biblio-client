Project Context From: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client
Generated On: Fri, Jun 13, 2025  3:50:39 PM
===============================================
Ignored Directory Patterns: .* node_modules vendor build dist target __pycache__ .next cache target venv storage
Ignored File Patterns: *.log *.jar *.pdf *.png *.jpg *.class *.sqlite *.csv project_context.txt package-lock.json yarn.lock composer.lock *.ico pnpm-lock.yaml
===============================================

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/.env.example

VITE_FIREBASE_API_KEY=your_firebase_api_key
VITE_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=your_project_id
VITE_FIREBASE_STORAGE_BUCKET=your_project.appspot.com
VITE_FIREBASE_MESSAGING_SENDER_ID=your_sender_id
VITE_FIREBASE_APP_ID=your_app_id
// END OF FILE: .env.example

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/.env.local

# Firebase
VITE_FIREBASE_API_KEY=AIzaSyC-7xG1TTllRRyMldk4mS7k_8BcjMTAWi8
VITE_FIREBASE_AUTH_DOMAIN=biblio-cc84b.firebaseapp.com
VITE_FIREBASE_PROJECT_ID=biblio-cc84b
VITE_FIREBASE_STORAGE_BUCKET=biblio-cc84b.firebasestorage.app
VITE_FIREBASE_MESSAGING_SENDER_ID=823617403574
VITE_FIREBASE_APP_ID=1:823617403574:web:e579c9bd1788f137c24417

# Cloudinary
VITE_CLOUDINARY_CLOUD_NAME=dqbjubqxq
VITE_CLOUDINARY_UPLOAD_PRESET=biblio// END OF FILE: .env.local

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/.gitignore

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.qodo
.env
// END OF FILE: .gitignore

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/eslint.config.js

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
// END OF FILE: eslint.config.js

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Biblio ENSPY</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
// END OF FILE: index.html

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/package.json

{
  "name": "web-biblio-client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "tailwind:init": "tailwindcss init -p"
  },
  "dependencies": {
    "@cloudinary/react": "^1.14.3",
    "@cloudinary/url-gen": "^1.21.0",
    "@headlessui/react": "^2.2.0",
    "@heroicons/react": "^2.2.0",
    "@hookform/resolvers": "^4.1.3",
    "@tailwindcss/vite": "^4.1.3",
    "@tanstack/react-query": "^5.69.0",
    "axios": "^1.8.4",
    "firebase": "^11.8.1",
    "framer-motion": "^12.6.3",
    "i18next": "^24.2.3",
    "i18next-browser-languagedetector": "^8.0.4",
    "i18next-http-backend": "^3.0.2",
    "lucide-react": "^0.487.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-firebase-hooks": "^5.1.1",
    "react-hook-form": "^7.54.2",
    "react-i18next": "^15.4.1",
    "react-router-dom": "^7.4.0",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.3",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}
// END OF FILE: package.json

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/prompter.sh

#!/bin/bash

# --- Configuration ---

# Default project path if none provided
DEFAULT_PROJECT_PATH="."
PROJECT_PATH=${1:-"$DEFAULT_PROJECT_PATH"}

# Output file name (relative to PROJECT_PATH)
OUTPUT_FILENAME="project_context.txt"

# Directories to completely ignore (won't be traversed)
EXCLUDE_DIRS_PATTERN=( \
    ".*"            # All hidden folders (.git, .vscode, .idea, .svn, etc.)
    "node_modules"
    "vendor"        # PHP Composer
    "build"
    "dist"
    "target"        # Java/Rust build outputs
    "__pycache__"   # Python cache
    ".next"         # Next.js build output
    "cache"         # General cache folders
    "target"
    "venv"
    "storage"       # Laravel storage (often contains logs, cache, etc.)
    # Add more directory names here if needed
)

# Specific file patterns to ignore within traversed directories
EXCLUDE_FILES_PATTERN=( \
    "*.log"
    "*.jar"
    "*.pdf"
    "*.png"
    "*.jpg"
    "*.class"
    "*.sqlite"
    "*.csv"
    "project_context.txt"
    # ".env*"       # Consider if you NEED .env files; uncomment if NOT needed.
    "package-lock.json"
    "yarn.lock"
    "composer.lock"
    "*.ico"
    "pnpm-lock.yaml"
    # Add more file patterns here (e.g., "*.swp", "*.bak", "*.tmp")
)

# --- Script Logic ---

# Attempt to get absolute path; exit if PROJECT_PATH is invalid early
PROJECT_PATH=$(realpath "$PROJECT_PATH" 2>/dev/null)
if [ $? -ne 0 ] || [ ! -d "$PROJECT_PATH" ]; then
    echo "Error: Invalid or non-existent project directory specified." >&2 # Error to stderr
    exit 1
fi

OUTPUT_FILE="$PROJECT_PATH/$OUTPUT_FILENAME"

# --- Safety Check: Prevent overwriting the project directory itself ---
# This is unlikely but guards against strange configurations
if [ "$PROJECT_PATH" == "$OUTPUT_FILE" ]; then
    echo "Error: Project directory path conflicts with output file name '$OUTPUT_FILENAME'." >&2
    exit 1
fi

# Delete output file silently if it exists
rm -f "$OUTPUT_FILE"

# --- Build the find command ---
# Uses arrays to construct the find command safely and avoid complex escaping issues with eval
find_args=("$PROJECT_PATH")

# Add directory prune conditions
if [ ${#EXCLUDE_DIRS_PATTERN[@]} -gt 0 ]; then
    find_args+=(\()
    first_prune=true
    for dir_pattern in "${EXCLUDE_DIRS_PATTERN[@]}"; do
        if ! $first_prune; then
            find_args+=(-o)
        fi
        find_args+=(-name "$dir_pattern" -type d)
        first_prune=false
    done
    find_args+=(\) -prune -o) # Add the prune action and the OR for the next part
fi

# Add primary find conditions (type file, exclude output file, exclude patterns)
find_args+=(\( -type f -not -path "$OUTPUT_FILE")
if [ ${#EXCLUDE_FILES_PATTERN[@]} -gt 0 ]; then
    for file_pattern in "${EXCLUDE_FILES_PATTERN[@]}"; do
        find_args+=(-not -name "$file_pattern")
    done
fi
find_args+=(-print \)) # Add the print action and close the group

# --- Execute the find command and process results ---

# Create the header in the output file
{
    echo "Project Context From: $PROJECT_PATH"
    echo "Generated On: $(date)"
    echo "==============================================="
    echo "Ignored Directory Patterns: ${EXCLUDE_DIRS_PATTERN[*]}"
    echo "Ignored File Patterns: ${EXCLUDE_FILES_PATTERN[*]}"
    echo "==============================================="
    echo ""
} > "$OUTPUT_FILE"

error_count=0
# Use find with process substitution and sorting. Avoids eval.
while IFS= read -r FILE_PATH; do
    # Calculate relative path for cleaner output
    RELATIVE_PATH="${FILE_PATH#"$PROJECT_PATH"/}"

    # Append file info and content to the output file
    {
        # echo ""
        # echo "// ==============================================="
        # echo "---> FILE: $RELATIVE_PATH"
        echo "//---> PATH: $FILE_PATH"
        # echo "// ==============================================="
        echo ""
    } >> "$OUTPUT_FILE"

    # Check if file is likely binary/non-text using 'file' command
    # -b: omit filename; check for common non-text types
    if file -b "$FILE_PATH" | grep -q -E 'binary|archive|compressed|image|font'; then
        echo "[Non-text file (e.g., binary, data, compressed) - Contents omitted]" >> "$OUTPUT_FILE"
    else
        # Append text file content, redirect cat errors to stderr
        if ! cat "$FILE_PATH" >> "$OUTPUT_FILE" 2> /dev/null; then # Hide cat errors from stdout
             # Optionally log error to the output file itself, or just count it
             echo "[Error reading file content for $RELATIVE_PATH]" >> "$OUTPUT_FILE"
             ((error_count++))
        fi
    fi

    {
        # echo ""
        echo "// END OF FILE: $RELATIVE_PATH"
        echo ""
    } >> "$OUTPUT_FILE"

done < <(find "${find_args[@]}" | sort) # Execute find command using safe array expansion

# Optionally report errors to stderr if any occurred
if [ $error_count -gt 0 ]; then
    echo "Warning: Encountered $error_count errors reading file contents during context generation." >&2
    # Exit with a non-zero status to indicate partial success/warning
    exit 1
fi

# Exit silently on success
exit 0
// END OF FILE: prompter.sh

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/public/vite.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: public/vite.svg

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/README.md

Bonsoir Claude. Tu vas m'aider à faire un super page de catalogue (livres et mémoire) bien designé pour les utilisateurs de de la biblithèque en ligne. Le code doit etre bien propre et modulable. Le design doit être exceptionnel vrament beau et atypique, comme pour des grands sites et non comme un code basique généré par l'IA. On utilisera les couleurs: primary Orange: #ff8c00 and secondary Dark blue:#1b263b que l'on déclarera en variables et on appellera par la suite dans le code. On aura tout d'abord une barre de recherche associé aux filtres ensuite on aura un joli composant iben styllise pour accder aux memoires seules ou aux livres seuls. Egalemnt on aura deux composants pour les recommandations: un pour la recommandation des livres poulaires, un composant pour le user based recommendation et ensuite un composant poour les livres et memoires disponibles. On fera egalemnt une page pour un livre ou un mémoire specifique à laquelle on acceder en cliqaune sur un livre ou on aura toutes les infos pertinentes sur ce livre vraiment bien dispose et designe et un composant pour les livres similaires à celivre. génères les compsants bien designes pour que le code soit modulable et ensuite les pages où tu appelles ces différents composants. Mon projet est en react avec vite et jutilise tailwind css. vas y fais de trs belles pages ou les deux couleurs que jai donnes doivent etre super presentes.// END OF FILE: README.md

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/App.tsx

import { createBrowserRouter, RouterProvider } from 'react-router-dom';
import { ConfigProvider } from './contexts/ConfigContext';
// import DebugConfig from './components/DebugConfig';
import RootLayout from './layouts/RootLayout';
import HomePage from './pages/HomePage';
import NotFoundPage from './pages/NotFoundPage';
import DashboardLayout from './layouts/DashboardLayout';
import ProfilePage from './pages/dashboard/Profile';
import ReservationsPage from './pages/dashboard/ReservationsPage';
import StatisticsPage from './pages/dashboard/StatisticsPage';
import CartPage from './pages/dashboard/CartPage';
import BookDetailsPage from './pages/BookDetailsPage';
import AuthPage from "./pages/AuthPage.tsx";
import BooksPage from "./pages/BooksPage.tsx";
import ThesisPage from "./pages/ThesisPage.tsx";
import ThesisDetailsPage from "./pages/ThesisDetailsPage.tsx";

const router = createBrowserRouter([
    {
        path: '/',
        element: <RootLayout />,
        children: [
            {
                index: true,
                element: <HomePage />,
            },
        ],
    },
    {
        path: '/auth',
        element: <AuthPage />,
    },
    {
        path: '/books',
        element: <BooksPage />,
    },
    {
        path: '/books/:id',
        element: <BookDetailsPage />,
    },
    {
        path: '/thesis',
        element: <ThesisPage />,
    },
    {
        path: '/thesis/:id',
        element: <ThesisDetailsPage />,
    },
    {
        path: '/dashboard',
        element: <DashboardLayout />,
        children: [
            {
                index: true,
                element: <ProfilePage />,
            },
            {
                path: 'profile',
                element: <ProfilePage />,
            },
            {
                path: 'statistics',
                element: <StatisticsPage />,
            },
            {
                path: 'reservations',
                element: <ReservationsPage />,
            },
            {
                path: 'cart',
                element: <CartPage />,
            },
        ],
    },
    {
        path: '*',
        element: <NotFoundPage />,
    },
]);

function App() {
    return (
        <ConfigProvider>
            <RouterProvider router={router} />
            {/*<DebugConfig />*/}
        </ConfigProvider>
    );
}

export default App;
// END OF FILE: src/App.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/assets/react.svg

[Non-text file (e.g., binary, data, compressed) - Contents omitted]
// END OF FILE: src/assets/react.svg

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/auth/EmailVerification.tsx

import React, { useState, useEffect } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { EmailVerificationProps } from '../../types/auth';
import Button from '../ui/Button';
import { Mail, CheckCircle, Clock, RefreshCw, ArrowLeft } from 'lucide-react';

const EmailVerification: React.FC<EmailVerificationProps> = ({
                                                                 email,
                                                                 onResendEmail,
                                                                 onBackToLogin
                                                             }) => {
    const { orgSettings } = useConfig();
    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    const [resendLoading, setResendLoading] = useState(false);
    const [resendCooldown, setResendCooldown] = useState(0);
    const [emailSent, setEmailSent] = useState(true);

    // Cooldown pour le renvoi d'email
    useEffect(() => {
        if (resendCooldown > 0) {
            const timer = setTimeout(() => {
                setResendCooldown(resendCooldown - 1);
            }, 1000);
            return () => clearTimeout(timer);
        }
    }, [resendCooldown]);

    const handleResendEmail = async () => {
        if (resendCooldown > 0) return;

        setResendLoading(true);
        try {
            await onResendEmail();
            setEmailSent(true);
            setResendCooldown(60); // 60 secondes de cooldown
        } catch (error) {
            console.error('Erreur renvoi email:', error);
        } finally {
            setResendLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
            <div className="w-full max-w-md">
                <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
                    {/* Animation d'icône */}
                    <div className="relative mb-8">
                        <div
                            className="w-24 h-24 mx-auto rounded-full flex items-center justify-center relative overflow-hidden"
                            style={{ backgroundColor: `${primaryColor}10` }}
                        >
                            <Mail
                                className="h-12 w-12 animate-pulse"
                                style={{ color: primaryColor }}
                            />

                            {/* Animation de cercles */}
                            <div
                                className="absolute inset-0 rounded-full border-4 border-transparent animate-spin"
                                style={{
                                    borderTopColor: primaryColor,
                                    animationDuration: '2s'
                                }}
                            ></div>
                            <div
                                className="absolute inset-2 rounded-full border-2 border-transparent animate-spin"
                                style={{
                                    borderRightColor: `${primaryColor}60`,
                                    animationDuration: '1.5s',
                                    animationDirection: 'reverse'
                                }}
                            ></div>
                        </div>
                    </div>

                    {/* Titre et description */}
                    <h1 className="text-3xl font-bold mb-4" style={{ color: secondaryColor }}>
                        Vérifiez votre email
                    </h1>

                    <p className="text-gray-600 mb-2">
                        Nous avons envoyé un lien de vérification à :
                    </p>

                    <p className="font-semibold mb-6" style={{ color: primaryColor }}>
                        {email}
                    </p>

                    {/* Instructions */}
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 text-left">
                        <h3 className="font-semibold text-blue-800 mb-2 flex items-center">
                            <CheckCircle className="h-5 w-5 mr-2" />
                            Étapes à suivre :
                        </h3>
                        <ol className="text-sm text-blue-700 space-y-1 list-decimal list-inside">
                            <li>Ouvrez votre boîte email</li>
                            <li>Cherchez l'email de {organizationName}</li>
                            <li>Cliquez sur le lien de vérification</li>
                            <li>Revenez ici pour vous connecter</li>
                        </ol>
                    </div>

                    {/* Statut d'envoi */}
                    {emailSent && (
                        <div className="bg-green-50 border border-green-200 rounded-lg p-3 mb-6">
                            <p className="text-green-700 text-sm flex items-center justify-center">
                                <CheckCircle className="h-4 w-4 mr-2" />
                                Email de vérification envoyé avec succès !
                            </p>
                        </div>
                    )}

                    {/* Actions */}
                    <div className="space-y-4">
                        {/* Bouton de renvoi */}
                        <Button
                            variant="outline"
                            fullWidth
                            onClick={handleResendEmail}
                            loading={resendLoading}
                            disabled={resendCooldown > 0}
                            leftIcon={<RefreshCw className="h-5 w-5" />}
                        >
                            {resendCooldown > 0
                                ? `Renvoyer dans ${resendCooldown}s`
                                : resendLoading
                                    ? 'Envoi en cours...'
                                    : 'Renvoyer l\'email'
                            }
                        </Button>

                        {/* Bouton retour */}
                        <Button
                            variant="ghost"
                            fullWidth
                            onClick={onBackToLogin}
                            leftIcon={<ArrowLeft className="h-5 w-5" />}
                        >
                            Retour à la connexion
                        </Button>
                    </div>

                    {/* Aide supplémentaire */}
                    <div className="mt-8 pt-6 border-t border-gray-200">
                        <h3 className="font-semibold text-gray-800 mb-3">
                            Vous ne trouvez pas l'email ?
                        </h3>
                        <div className="text-sm text-gray-600 space-y-2">
                            <p className="flex items-start">
                                <Clock className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" style={{ color: primaryColor }} />
                                Patientez quelques minutes, l'email peut prendre du temps à arriver
                            </p>
                            <p className="flex items-start">
                                <Mail className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" style={{ color: primaryColor }} />
                                Vérifiez votre dossier spam ou courrier indésirable
                            </p>
                        </div>
                    </div>

                    {/* Contact support */}
                    <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                        <p className="text-sm text-gray-600">
                            Besoin d'aide ? Contactez-nous à{' '}
                            <a
                                href={`mailto:${orgSettings?.Contact?.Email || 'support@biblioenspy.com'}`}
                                className="font-medium hover:underline"
                                style={{ color: primaryColor }}
                            >
                                {orgSettings?.Contact?.Email || 'support@biblioenspy.com'}
                            </a>
                        </p>
                    </div>
                </div>

                {/* Animation de background */}
                <div className="fixed inset-0 pointer-events-none overflow-hidden -z-10">
                    <div
                        className="absolute top-1/4 left-1/4 w-64 h-64 rounded-full opacity-5 animate-pulse"
                        style={{ backgroundColor: primaryColor }}
                    ></div>
                    <div
                        className="absolute bottom-1/4 right-1/4 w-48 h-48 rounded-full opacity-5 animate-pulse"
                        style={{
                            backgroundColor: secondaryColor,
                            animationDelay: '1s'
                        }}
                    ></div>
                    <div
                        className="absolute top-1/2 right-1/3 w-32 h-32 rounded-full opacity-5 animate-pulse"
                        style={{
                            backgroundColor: primaryColor,
                            animationDelay: '2s'
                        }}
                    ></div>
                </div>
            </div>
        </div>
    );
};

export default EmailVerification;
// END OF FILE: src/components/auth/EmailVerification.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/auth/LoginForm.tsx

import React, { useState, useCallback } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { LoginFormData, FormErrors } from '../../types/auth';
import { authService } from '../../services/auth/authService';

// Import des composants UI
import Input from '../ui/Input';
import Button from '../ui/Button';

// Import des icônes
import {
    Mail,
    Lock,
    Eye,
    EyeOff,
    LogIn,
    BookOpen
} from 'lucide-react';

interface LoginFormProps {
    onSuccess: () => void;
    onSwitchToRegister: () => void;
    onForgotPassword: (email: string) => void;
}

const LoginForm: React.FC<LoginFormProps> = ({
                                                 onSuccess,
                                                 onSwitchToRegister,
                                                 onForgotPassword
                                             }) => {
    const { orgSettings } = useConfig();
    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    // États du formulaire
    const [formData, setFormData] = useState<LoginFormData>({
        email: '',
        password: '',
        rememberMe: false
    });

    const [errors, setErrors] = useState<FormErrors>({});
    const [loading, setLoading] = useState(false);
    const [showPassword, setShowPassword] = useState(false);

    // Validation du formulaire
    const validateForm = useCallback((): boolean => {
        const newErrors: FormErrors = {};

        // Validation de l'email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!formData.email) {
            newErrors.email = 'L\'email est requis';
        } else if (!emailRegex.test(formData.email)) {
            newErrors.email = 'Format d\'email invalide';
        }

        // Validation du mot de passe
        if (!formData.password) {
            newErrors.password = 'Le mot de passe est requis';
        } else if (formData.password.length < 6) {
            newErrors.password = 'Le mot de passe doit contenir au moins 6 caractères';
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }, [formData]);

    // Gestion des changements de champs
    const handleInputChange = (field: keyof LoginFormData) => (
        e: React.ChangeEvent<HTMLInputElement>
    ) => {
        const value = field === 'rememberMe' ? e.target.checked : e.target.value;
        setFormData(prev => ({ ...prev, [field]: value }));

        // Nettoyer l'erreur du champ modifié
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }
    };

    // Soumission du formulaire
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        setLoading(true);

        try {
            const response = await authService.signIn(formData);

            if (response.success) {
                onSuccess();
            } else {
                setErrors({ general: response.message || 'Erreur lors de la connexion' });
            }
        } catch {
            setErrors({ general: 'Une erreur inattendue s\'est produite' });
        } finally {
            setLoading(false);
        }
    };

    // Gestion du mot de passe oublié
    const handleForgotPassword = () => {
        if (formData.email) {
            onForgotPassword(formData.email);
        } else {
            setErrors({ email: 'Veuillez saisir votre email pour réinitialiser votre mot de passe' });
        }
    };

    return (
        <div className="w-full max-w-md mx-auto">
            <div className="text-center mb-8">
                <div
                    className="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center"
                    style={{ backgroundColor: primaryColor }}
                >
                    <BookOpen className="h-8 w-8 text-white" />
                </div>
                <h1 className="text-3xl font-bold" style={{ color: secondaryColor }}>
                    Connexion
                </h1>
                <p className="text-gray-600 mt-2">
                    Accédez à votre compte {organizationName}
                </p>
            </div>

            <form onSubmit={handleSubmit} className="space-y-6">
                {/* Erreur générale */}
                {errors.general && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                        <p className="text-red-600 text-sm">{errors.general}</p>
                    </div>
                )}

                {/* Champ email */}
                <Input
                    label="Adresse email"
                    type="email"
                    placeholder="votre@email.com"
                    value={formData.email}
                    onChange={handleInputChange('email')}
                    error={errors.email}
                    leftIcon={<Mail className="h-5 w-5" />}
                    autoComplete="email"
                    required
                />

                {/* Champ mot de passe */}
                <Input
                    label="Mot de passe"
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Votre mot de passe"
                    value={formData.password}
                    onChange={handleInputChange('password')}
                    error={errors.password}
                    leftIcon={<Lock className="h-5 w-5" />}
                    rightIcon={
                        <button
                            type="button"
                            onClick={() => setShowPassword(!showPassword)}
                            className="text-gray-400 hover:text-gray-600 transition-colors"
                        >
                            {showPassword ? <EyeOff className="h-5 w-5 cursor-pointer" /> : <Eye className="h-5 w-5" />}
                        </button>
                    }
                    autoComplete="current-password"
                    required
                />

                {/* Options supplémentaires */}
                <div className="flex items-center justify-between">
                    <label className="flex items-center">
                        <input
                            type="checkbox"
                            checked={formData.rememberMe}
                            onChange={handleInputChange('rememberMe')}
                            className="h-4 w-4 rounded cursor-pointer border-gray-300 focus:ring-2 transition-colors"
                            style={{
                                color:`${primaryColor}30`
                            }}
                        />
                        <span className="ml-2 text-sm text-gray-600">Se souvenir de moi</span>
                    </label>

                    <button
                        type="button"
                        onClick={handleForgotPassword}
                        className="text-sm font-medium hover:underline transition-colors"
                        style={{ color: primaryColor }}
                    >
                        Mot de passe oublié ?
                    </button>
                </div>

                {/* Bouton de connexion */}
                <Button
                    type="submit"
                    variant="primary"
                    size="lg"
                    fullWidth
                    loading={loading}
                    className="cursor-pointer"
                    leftIcon={<LogIn className="h-5 w-5" />}
                >
                    {loading ? 'Connexion en cours...' : 'Se connecter'}
                </Button>

                {/* Séparateur */}
                <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                        <div className="w-full border-t border-gray-300"></div>
                    </div>
                    <div className="relative flex justify-center text-sm">
            <span className="px-2 bg-white text-gray-500">
              Nouveau sur {organizationName} ?
            </span>
                    </div>
                </div>

                {/* Bouton d'inscription */}
                <Button
                    type="button"
                    variant="outline"
                    size="lg"
                    fullWidth
                    className="cursor-pointer"
                    onClick={onSwitchToRegister}
                >
                    Créer un compte
                </Button>
            </form>

            {/* Informations supplémentaires */}
            <div className="mt-8 p-4 bg-gray-50 rounded-lg">
                <h3 className="font-medium text-gray-800 mb-2">Première visite ?</h3>
                <p className="text-sm text-gray-600 mb-3">
                    Créez votre compte pour accéder à notre catalogue complet et profiter de tous nos services.
                </p>
                <ul className="text-sm text-gray-600 space-y-1">
                    <li className="flex items-center">
                        <div
                            className="w-2 h-2 rounded-full mr-2"
                            style={{ backgroundColor: primaryColor }}
                        ></div>
                        Accès à plus de 500 livres
                    </li>
                    <li className="flex items-center">
                        <div
                            className="w-2 h-2 rounded-full mr-2"
                            style={{ backgroundColor: primaryColor }}
                        ></div>
                        Réservation en ligne
                    </li>
                    <li className="flex items-center">
                        <div
                            className="w-2 h-2 rounded-full mr-2"
                            style={{ backgroundColor: primaryColor }}
                        ></div>
                        Recommandations personnalisées
                    </li>
                </ul>
            </div>
        </div>
    );
};

export default LoginForm;
// END OF FILE: src/components/auth/LoginForm.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/auth/RegisterForm.tsx

import React, { useState, useCallback } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { RegisterFormData, ACADEMIC_LEVELS, DEPARTMENTS, FormErrors } from '../../types/auth';
import { authService } from '../../services/auth/authService';

// Import des composants UI
import Input from '../ui/Input';
import Select from '../ui/Select';
import Button from '../ui/Button';
import AvatarUploader from '../common/AvatarUploader';

import {
    User,
    Mail,
    Lock,
    Phone,
    Eye,
    EyeOff,
    GraduationCap,
    Users,
    UserCheck,
    BookOpen,
    Shield,
    Camera,
    CheckCircle
} from 'lucide-react';

interface RegisterFormProps {
    onSuccess: (email: string) => void;
    onSwitchToLogin: () => void;
}

const RegisterForm: React.FC<RegisterFormProps> = ({ onSuccess, onSwitchToLogin }) => {
    const { orgSettings } = useConfig();
    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    // États du formulaire
    const [formData, setFormData] = useState<RegisterFormData>({
        name: '',
        email: '',
        password: '',
        confirmPassword: '',
        matricule: '',
        tel: '',
        statut: 'etudiant',
        departement: '',
        niveau: '',
        profilePicture: undefined
    });

    const [errors, setErrors] = useState<FormErrors>({});
    const [loading, setLoading] = useState(false);
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);
    const [avatarUrl, setAvatarUrl] = useState<string>('');

    // Validation du formulaire
    const validateForm = useCallback((): boolean => {
        const newErrors: FormErrors = {};

        // Validation du nom
        if (!formData.name.trim()) {
            newErrors.name = 'Le nom est requis';
        } else if (formData.name.trim().length < 2) {
            newErrors.name = 'Le nom doit contenir au moins 2 caractères';
        }

        // Validation de l'email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!formData.email) {
            newErrors.email = 'L\'email est requis';
        } else if (!emailRegex.test(formData.email)) {
            newErrors.email = 'Format d\'email invalide';
        }

        // Validation du matricule
        if (!formData.matricule.trim()) {
            newErrors.matricule = 'Le matricule est requis';
        } else if (formData.matricule.trim().length < 6) {
            newErrors.matricule = 'Le matricule doit contenir au moins 6 caractères';
        }

        // Validation du téléphone
        const phoneRegex = /^[+]?[0-9]{8,}$/;
        if (!formData.tel) {
            newErrors.tel = 'Le numéro de téléphone est requis';
        } else if (!phoneRegex.test(formData.tel)) {
            newErrors.tel = 'Format de téléphone invalide';
        }

        // Validation du mot de passe
        if (!formData.password) {
            newErrors.password = 'Le mot de passe est requis';
        } else if (formData.password.length < 6) {
            newErrors.password = 'Le mot de passe doit contenir au moins 6 caractères';
        }

        // Validation de la confirmation du mot de passe
        if (!formData.confirmPassword) {
            newErrors.confirmPassword = 'La confirmation du mot de passe est requise';
        } else if (formData.password !== formData.confirmPassword) {
            newErrors.confirmPassword = 'Les mots de passe ne correspondent pas';
        }

        // Validation pour les étudiants
        if (formData.statut === 'etudiant') {
            if (!formData.departement) {
                newErrors.departement = 'Le département est requis pour les étudiants';
            }
            if (!formData.niveau) {
                newErrors.niveau = 'Le niveau est requis pour les étudiants';
            }
        }

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    }, [formData]);

    // Gestion des changements de champs
    const handleInputChange = (field: keyof RegisterFormData) => (
        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
    ) => {
        const value = e.target.value;
        setFormData(prev => ({ ...prev, [field]: value }));

        // Nettoyer l'erreur du champ modifié
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: '' }));
        }

        // Réinitialiser les champs département et niveau si on change de statut
        if (field === 'statut' && value === 'enseignant') {
            setFormData(prev => ({ ...prev, departement: '', niveau: '' }));
            setErrors(prev => ({ ...prev, departement: '', niveau: '' }));
        }
    };

    // Gestion de l'upload d'avatar
    const handleAvatarUploaded = useCallback((url: string) => {
        setAvatarUrl(url);
        setFormData(prev => ({
            ...prev,
            profilePicture: url
        }));

        if (errors.profilePicture) {
            setErrors(prev => ({
                ...prev,
                profilePicture: ''
            }));
        }
    }, [errors.profilePicture]);

    const handleAvatarRemoved = useCallback(() => {
        setAvatarUrl('');
        setFormData(prev => ({
            ...prev,
            profilePicture: undefined
        }));
    }, []);

    // Switch de statut
    const handleStatusSwitch = (status: 'etudiant' | 'enseignant') => {
        setFormData(prev => ({ ...prev, statut: status }));
        if (status === 'enseignant') {
            setFormData(prev => ({ ...prev, departement: '', niveau: '' }));
            setErrors(prev => ({ ...prev, departement: '', niveau: '' }));
        }
    };

    // Soumission du formulaire
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!validateForm()) {
            return;
        }

        setLoading(true);

        try {
            const response = await authService.signUp(formData);

            if (response.success) {
                onSuccess(formData.email);
            } else {
                setErrors({ general: response.message || 'Erreur lors de l\'inscription' });
            }
        } catch {
            setErrors({ general: 'Une erreur inattendue s\'est produite' });
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 via-white to-gray-100 py-6 px-4 flex items-center justify-center">
            <div className="w-full max-w-6xl">
                {/* En-tête */}
                <div className="text-center mb-8">
                    <div className="relative inline-block">
                        <div
                            className="w-20 h-20 mx-auto mb-4 rounded-2xl flex items-center justify-center shadow-lg transform rotate-3 hover:rotate-0 transition-transform duration-300"
                            style={{ backgroundColor: primaryColor }}
                        >
                            <GraduationCap className="h-10 w-10 text-white" />
                        </div>
                        <div className="absolute -top-2 -right-2 w-8 h-8 rounded-full bg-green-500 flex items-center justify-center shadow-lg">
                            <CheckCircle className="h-5 w-5 text-white" />
                        </div>
                    </div>
                    <h1 className="text-4xl font-bold mb-2" style={{ color: secondaryColor }}>
                        Rejoindre {organizationName}
                    </h1>
                    <p className="text-gray-600 text-lg">
                        Créez votre compte et accédez à notre univers de connaissances
                    </p>
                    <div className="w-24 h-1 mx-auto mt-4 rounded-full" style={{ backgroundColor: primaryColor }}></div>
                </div>

                {/* Card principale */}
                <div className="bg-white rounded-3xl shadow-2xl border border-gray-100 overflow-hidden">
                    <form onSubmit={handleSubmit}>
                        {/* Erreur générale */}
                        {errors.general && (
                            <div className="m-6 mb-0 bg-red-50 border-l-4 border-red-400 rounded-lg p-4">
                                <div className="flex items-center">
                                    <div className="flex-shrink-0">
                                        <svg className="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                    <div className="ml-3">
                                        <p className="text-red-800 font-medium">{errors.general}</p>
                                    </div>
                                </div>
                            </div>
                        )}

                        <div className="p-8">
                            {/* Section Avatar & Statut */}
                            <div className="mb-8">
                                <div className="flex items-center mb-6">
                                    <Camera className="h-6 w-6 mr-3" style={{ color: primaryColor }} />
                                    <h2 className="text-xl font-semibold text-gray-800">Profil & Statut</h2>
                                    <div className="flex-1 ml-4 h-px bg-gradient-to-r from-gray-300 to-transparent"></div>
                                </div>

                                <div className="flex flex-col xl:flex-row xl:gap-8 xl:items-center">
                                    {/* Avatar */}
                                    <div className="flex-1 flex flex-col items-center xl:items-start">
                                        <div className="flex justify-center xl:justify-start w-full">
                                            <AvatarUploader
                                                currentAvatar={avatarUrl}
                                                onAvatarUploaded={handleAvatarUploaded}
                                                onAvatarRemoved={handleAvatarRemoved}
                                                size="xl"
                                                userName={formData.name}
                                                userId="temp-user"
                                            />
                                        </div>
                                        <p className="text-sm text-gray-500 mt-3 text-center xl:text-left max-w-xs">
                                            Ajoutez une photo de profil pour personnaliser votre compte
                                        </p>
                                    </div>

                                    {/* Séparateur vertical pour desktop */}
                                    <div className="hidden xl:flex xl:items-center xl:justify-center">
                                        <div
                                            className="w-px bg-gradient-to-b from-transparent via-gray-300 to-transparent"
                                            style={{ height: '200px' }}
                                        ></div>
                                    </div>

                                    {/* Séparateur horizontal pour mobile */}
                                    <div className="xl:hidden my-6">
                                        <div className="border-t border-gray-200"></div>
                                    </div>

                                    {/* Switch Statut */}
                                    <div className="flex-1 flex flex-col justify-center">
                                        <h3 className="text-lg font-medium text-gray-800 mb-4 text-center xl:text-left">
                                            Vous êtes <span style={{ color: primaryColor }}>*</span>
                                        </h3>
                                        <div className="relative">
                                            <div className="grid grid-cols-2 gap-3">
                                                <button
                                                    type="button"
                                                    onClick={() => handleStatusSwitch('etudiant')}
                                                    className={`relative overflow-hidden group flex items-center justify-center cursor-pointer py-4 px-6 rounded-xl font-medium transition-all duration-300 border-2 ${
                                                        formData.statut === 'etudiant'
                                                            ? 'text-white shadow-lg transform scale-105'
                                                            : 'text-gray-600 border-gray-200 hover:border-gray-300 bg-gray-50 hover:bg-gray-100'
                                                    }`}
                                                    style={{
                                                        backgroundColor: formData.statut === 'etudiant' ? primaryColor : undefined,
                                                        borderColor: formData.statut === 'etudiant' ? primaryColor : undefined
                                                    }}
                                                >
                                                    <GraduationCap className="h-5 w-5 mr-2" />
                                                    <span>Étudiant(e)</span>
                                                    {formData.statut === 'etudiant' && (
                                                        <div className="absolute inset-0 bg-white bg-opacity-20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                                                    )}
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => handleStatusSwitch('enseignant')}
                                                    className={`relative overflow-hidden group cursor-pointer flex items-center justify-center py-4 px-6 rounded-xl font-medium transition-all duration-300 border-2 ${
                                                        formData.statut === 'enseignant'
                                                            ? 'text-white shadow-lg transform scale-105'
                                                            : 'text-gray-600 border-gray-200 hover:border-gray-300 bg-gray-50 hover:bg-gray-100'
                                                    }`}
                                                    style={{
                                                        backgroundColor: formData.statut === 'enseignant' ? secondaryColor : undefined,
                                                        borderColor: formData.statut === 'enseignant' ? secondaryColor : undefined
                                                    }}
                                                >
                                                    <UserCheck className="h-5 w-5 mr-2" />
                                                    <span>Enseignant(e)</span>
                                                    {formData.statut === 'enseignant' && (
                                                        <div className="absolute inset-0 bg-white bg-opacity-20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                                                    )}
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Séparateur */}
                            <div className="my-8 border-t border-gray-200"></div>

                            {/* Section Informations */}
                            <div className="flex flex-col xl:flex-row xl:gap-8">
                                {/* COLONNE GAUCHE */}
                                <div className="flex-1 space-y-6">
                                    {/* Informations personnelles */}
                                    <div>
                                        <div className="flex items-center mb-6">
                                            <User className="h-6 w-6 mr-3" style={{ color: primaryColor }} />
                                            <h2 className="text-xl font-semibold text-gray-800">Informations personnelles</h2>
                                        </div>

                                        <div className="space-y-4">
                                            <Input
                                                label="Nom complet"
                                                type="text"
                                                placeholder="Votre nom complet"
                                                value={formData.name}
                                                onChange={handleInputChange('name')}
                                                error={errors.name}
                                                leftIcon={<User className="h-5 w-5" />}
                                                required
                                            />

                                            <Input
                                                label="Adresse email"
                                                type="email"
                                                placeholder="votre@email.com"
                                                value={formData.email}
                                                onChange={handleInputChange('email')}
                                                error={errors.email}
                                                leftIcon={<Mail className="h-5 w-5" />}
                                                required
                                            />

                                            <Input
                                                label="Matricule"
                                                type="text"
                                                placeholder="Votre matricule"
                                                value={formData.matricule}
                                                onChange={handleInputChange('matricule')}
                                                error={errors.matricule}
                                                leftIcon={<Users className="h-5 w-5" />}
                                                required
                                            />

                                            <Input
                                                label="Numéro de téléphone"
                                                type="tel"
                                                placeholder="+237 6XX XXX XXX"
                                                value={formData.tel}
                                                onChange={handleInputChange('tel')}
                                                error={errors.tel}
                                                leftIcon={<Phone className="h-5 w-5" />}
                                                required
                                            />
                                        </div>
                                    </div>
                                </div>

                                {/* SÉPARATEUR VERTICAL */}
                                <div className="hidden xl:flex xl:items-center xl:justify-center xl:px-4">
                                    <div
                                        className="w-px bg-gradient-to-b from-transparent via-gray-300 to-transparent"
                                        style={{ height: '500px' }}
                                    ></div>
                                </div>

                                {/* SÉPARATEUR HORIZONTAL MOBILE */}
                                <div className="xl:hidden my-8">
                                    <div className="border-t border-gray-200"></div>
                                </div>

                                {/* COLONNE DROITE */}
                                <div className="flex-1 space-y-6">
                                    {/* Informations académiques pour étudiants */}
                                    {formData.statut === 'etudiant' && (
                                        <div>
                                            <div className="flex items-center mb-6">
                                                <GraduationCap className="h-6 w-6 mr-3" style={{ color: primaryColor }} />
                                                <h2 className="text-xl font-semibold text-gray-800">Informations académiques</h2>
                                            </div>

                                            <div className="space-y-4">
                                                <Select
                                                    label="Département"
                                                    placeholder="Sélectionnez votre département"
                                                    value={formData.departement || ''}
                                                    onChange={handleInputChange('departement')}
                                                    error={errors.departement}
                                                    options={DEPARTMENTS.map(dept => ({
                                                        value: dept.id,
                                                        label: dept.name
                                                    }))}
                                                    required
                                                />

                                                <Select
                                                    label="Niveau d'études"
                                                    placeholder="Sélectionnez votre niveau"
                                                    value={formData.niveau || ''}
                                                    onChange={handleInputChange('niveau')}
                                                    error={errors.niveau}
                                                    options={ACADEMIC_LEVELS.map(level => ({
                                                        value: level.id,
                                                        label: level.name
                                                    }))}
                                                    required
                                                />
                                            </div>
                                        </div>
                                    )}

                                    {/* Informations pour enseignants */}
                                    {formData.statut === 'enseignant' && (
                                        <div>
                                            <div className="flex items-center mb-6">
                                                <UserCheck className="h-6 w-6 mr-3" style={{ color: primaryColor }} />
                                                <h2 className="text-xl font-semibold text-gray-800">Privilèges enseignant</h2>
                                            </div>

                                            <div className="bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl p-6 border border-green-200">
                                                <div className="text-center">
                                                    <BookOpen className="h-16 w-16 mx-auto mb-4 text-green-600" />
                                                    <h3 className="text-lg font-semibold text-green-800 mb-2">Accès privilégié</h3>
                                                    <p className="text-green-700 text-sm leading-relaxed">
                                                        En tant qu'enseignant, vous bénéficiez d'un accès étendu aux ressources,
                                                        de privilèges de gestion et d'outils pédagogiques avancés.
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    {/* Sécurité */}
                                    <div>
                                        <div className="flex items-center mb-6">
                                            <Shield className="h-6 w-6 mr-3" style={{ color: primaryColor }} />
                                            <h2 className="text-xl font-semibold text-gray-800">Sécurité</h2>
                                        </div>

                                        <div className="space-y-4">
                                            <Input
                                                label="Mot de passe"
                                                type={showPassword ? 'text' : 'password'}
                                                placeholder="Votre mot de passe"
                                                value={formData.password}
                                                onChange={handleInputChange('password')}
                                                error={errors.password}
                                                leftIcon={<Lock className="h-5 w-5" />}
                                                rightIcon={
                                                    <button
                                                        type="button"
                                                        onClick={() => setShowPassword(!showPassword)}
                                                        className="text-gray-400 hover:text-gray-600 transition-colors"
                                                    >
                                                        {showPassword ? <EyeOff className="h-5 w-5 cursor-pointer" /> : <Eye className="h-5 w-5 cursor-pointer" />}
                                                    </button>
                                                }
                                                autoComplete="new-password"
                                                required
                                            />

                                            <Input
                                                label="Confirmer le mot de passe"
                                                type={showConfirmPassword ? 'text' : 'password'}
                                                placeholder="Confirmez votre mot de passe"
                                                value={formData.confirmPassword}
                                                onChange={handleInputChange('confirmPassword')}
                                                error={errors.confirmPassword}
                                                leftIcon={<Lock className="h-5 w-5" />}
                                                rightIcon={
                                                    <button
                                                        type="button"
                                                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                                                        className="text-gray-400 hover:text-gray-600 transition-colors"
                                                    >
                                                        {showConfirmPassword ? <EyeOff className="h-5 w-5 cursor-pointer" /> : <Eye className="h-5 w-5 cursor-pointer" />}
                                                    </button>
                                                }
                                                autoComplete="new-password"
                                                required
                                            />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Séparateur */}
                            <div className="my-8 border-t border-gray-200"></div>

                            {/* Boutons d'action */}
                            <div className="space-y-4">
                                <Button
                                    type="submit"
                                    variant="primary"
                                    size="lg"
                                    fullWidth
                                    loading={loading}
                                    leftIcon={<GraduationCap className="h-5 w-5" />}
                                    className="py-4 text-lg font-semibold cursor-pointer shadow-xl hover:shadow-2xl transform hover:scale-[1.02] transition-all duration-300"
                                >
                                    {loading ? 'Création en cours...' : 'Créer mon compte'}
                                </Button>

                                <div className="text-center">
                                    <span className="text-gray-500 text-sm">Vous avez déjà un compte ?</span>
                                    <button
                                        type="button"
                                        onClick={onSwitchToLogin}
                                        className="ml-2 font-medium cursor-pointer hover:underline transition-colors"
                                        style={{ color: primaryColor }}
                                    >
                                        Se connecter
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

                {/* Footer */}
                <div className="text-center mt-8 text-sm text-gray-500">
                    <p>En créant un compte, vous acceptez nos conditions d'utilisation et notre politique de confidentialité.</p>
                </div>
            </div>
        </div>
    );
};

export default RegisterForm;
// END OF FILE: src/components/auth/RegisterForm.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/AdvancedSearchBar.tsx

import React, { useState, useRef, useEffect } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { 
    Search, 
    X, 
    Filter,
    BookOpen,
    User,
    Building,
    Tag,
    Calendar
} from 'lucide-react';

interface SearchFilters {
    query: string;
    author: string;
    publisher: string;
    category: string;
    yearFrom: string;
    yearTo: string;
}

interface AdvancedSearchBarProps {
    onSearchChange: (filters: SearchFilters) => void;
    placeholder?: string;
    className?: string;
}

const AdvancedSearchBar: React.FC<AdvancedSearchBarProps> = ({
    onSearchChange,
    placeholder = "Rechercher des livres, auteurs, éditeurs...",
    className = ""
}) => {
    const { orgSettings } = useConfig();
    const [filters, setFilters] = useState<SearchFilters>({
        query: '',
        author: '',
        publisher: '',
        category: '',
        yearFrom: '',
        yearTo: ''
    });
    const [showAdvanced, setShowAdvanced] = useState(false);
    const [isFocused, setIsFocused] = useState(false);
    const searchRef = useRef<HTMLDivElement>(null);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    // Déclencher la recherche quand les filtres changent
    useEffect(() => {
        const timeoutId = setTimeout(() => {
            onSearchChange(filters);
        }, 300); // Debounce de 300ms

        return () => clearTimeout(timeoutId);
    }, [filters, onSearchChange]);

    // Gérer les changements de filtres
    const handleFilterChange = (key: keyof SearchFilters, value: string) => {
        setFilters(prev => ({
            ...prev,
            [key]: value
        }));
    };

    // Effacer tous les filtres
    const clearAllFilters = () => {
        setFilters({
            query: '',
            author: '',
            publisher: '',
            category: '',
            yearFrom: '',
            yearTo: ''
        });
        setShowAdvanced(false);
    };

    // Vérifier si des filtres avancés sont actifs
    const hasAdvancedFilters = filters.author || filters.publisher || filters.category || filters.yearFrom || filters.yearTo;

    // Fermer les filtres avancés quand on clique ailleurs
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
                setIsFocused(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div ref={searchRef} className={`bg-white rounded-xl border border-gray-200 shadow-sm ${className}`}>
            {/* Barre de recherche principale */}
            <div className={`flex items-center p-4 transition-all duration-200 ${
                isFocused ? 'ring-2 ring-opacity-50' : ''
            }`} style={{ ringColor: `${primaryColor}50` }}>
                <Search className="w-5 h-5 text-gray-400 mr-3 flex-shrink-0" />
                
                <input
                    type="text"
                    placeholder={placeholder}
                    value={filters.query}
                    onChange={(e) => handleFilterChange('query', e.target.value)}
                    onFocus={() => setIsFocused(true)}
                    className="flex-1 text-gray-700 placeholder-gray-400 border-none outline-none bg-transparent"
                />

                {/* Boutons d'action */}
                <div className="flex items-center gap-2 ml-3">
                    {(filters.query || hasAdvancedFilters) && (
                        <button
                            onClick={clearAllFilters}
                            className="p-1 hover:bg-gray-100 rounded-full transition-colors"
                            title="Effacer la recherche"
                        >
                            <X className="w-4 h-4 text-gray-400" />
                        </button>
                    )}

                    <button
                        onClick={() => setShowAdvanced(!showAdvanced)}
                        className={`p-2 rounded-lg transition-all duration-200 ${
                            showAdvanced || hasAdvancedFilters
                                ? 'text-white'
                                : 'text-gray-600 hover:bg-gray-100'
                        }`}
                        style={{
                            backgroundColor: (showAdvanced || hasAdvancedFilters) ? primaryColor : 'transparent'
                        }}
                        title="Filtres avancés"
                    >
                        <Filter className="w-4 h-4" />
                    </button>
                </div>
            </div>

            {/* Filtres avancés */}
            {showAdvanced && (
                <div className="border-t border-gray-100 p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {/* Auteur */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <User className="w-3 h-3 inline mr-1" />
                                Auteur
                            </label>
                            <input
                                type="text"
                                placeholder="Nom de l'auteur"
                                value={filters.author}
                                onChange={(e) => handleFilterChange('author', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                                style={{ focusRing: `${primaryColor}50` }}
                            />
                        </div>

                        {/* Éditeur */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <Building className="w-3 h-3 inline mr-1" />
                                Éditeur
                            </label>
                            <input
                                type="text"
                                placeholder="Maison d'édition"
                                value={filters.publisher}
                                onChange={(e) => handleFilterChange('publisher', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                                style={{ focusRing: `${primaryColor}50` }}
                            />
                        </div>

                        {/* Catégorie */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <Tag className="w-3 h-3 inline mr-1" />
                                Catégorie
                            </label>
                            <input
                                type="text"
                                placeholder="Genre ou domaine"
                                value={filters.category}
                                onChange={(e) => handleFilterChange('category', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                                style={{ focusRing: `${primaryColor}50` }}
                            />
                        </div>

                        {/* Année de publication */}
                        <div className="md:col-span-2 lg:col-span-1">
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <Calendar className="w-3 h-3 inline mr-1" />
                                Année de publication
                            </label>
                            <div className="flex gap-2">
                                <input
                                    type="number"
                                    placeholder="De"
                                    value={filters.yearFrom}
                                    onChange={(e) => handleFilterChange('yearFrom', e.target.value)}
                                    className="flex-1 p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                                    style={{ focusRing: `${primaryColor}50` }}
                                    min="1800"
                                    max={new Date().getFullYear()}
                                />
                                <span className="text-gray-400 self-center">à</span>
                                <input
                                    type="number"
                                    placeholder="À"
                                    value={filters.yearTo}
                                    onChange={(e) => handleFilterChange('yearTo', e.target.value)}
                                    className="flex-1 p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                                    style={{ focusRing: `${primaryColor}50` }}
                                    min="1800"
                                    max={new Date().getFullYear()}
                                />
                            </div>
                        </div>
                    </div>

                    {/* Actions des filtres avancés */}
                    {hasAdvancedFilters && (
                        <div className="mt-4 pt-4 border-t border-gray-100">
                            <div className="flex items-center justify-between">
                                <span className="text-xs text-gray-500">
                                    Filtres actifs : {[filters.author, filters.publisher, filters.category, filters.yearFrom, filters.yearTo].filter(Boolean).length}
                                </span>
                                
                                <button
                                    onClick={() => {
                                        setFilters(prev => ({
                                            ...prev,
                                            author: '',
                                            publisher: '',
                                            category: '',
                                            yearFrom: '',
                                            yearTo: ''
                                        }));
                                    }}
                                    className="text-xs text-gray-500 hover:text-red-500 transition-colors"
                                >
                                    Effacer les filtres avancés
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            )}

            {/* Suggestions de recherche rapide */}
            {isFocused && !filters.query && (
                <div className="border-t border-gray-100 p-4">
                    <div className="text-xs font-medium text-gray-600 mb-3">Recherches populaires :</div>
                    <div className="flex flex-wrap gap-2">
                        {['Informatique', 'Mathématiques', 'Physique', 'Littérature', 'Histoire'].map((term) => (
                            <button
                                key={term}
                                onClick={() => handleFilterChange('query', term)}
                                className="px-3 py-1 text-xs rounded-full border border-gray-200 hover:border-gray-300 text-gray-600 hover:text-gray-800 transition-colors"
                            >
                                {term}
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdvancedSearchBar;// END OF FILE: src/components/books/AdvancedSearchBar.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/BookCard.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import {
    Heart,
    ShoppingCart,
    CheckCircle,
    AlertCircle,
    BookOpen,
    User,
    Building,
    Package
} from 'lucide-react';
import { Link } from 'react-router-dom';
import {Timestamp} from "firebase/firestore";

// Structure selon votre base de données
export interface Comment {
    heure: Timestamp;
    nomUser: string;
    note: number;
    texte: string;
}

export interface CommentWithUserData extends Comment {
    id: string;
    userId: string;
    userName: string;
    userAvatar?: string;
    helpful?: number;
}

export interface BiblioBook {
    id: string;
    name: string;
    auteur: string;
    cathegorie: string;
    commentaire: Comment[];
    desc: string;
    edition: string;
    etagere: string;
    exemplaire: number;
    image: string;
    initialExemplaire: number;
}

interface BookCardProps {
    book: BiblioBook;
    viewMode?: 'grid' | 'list';
    onReserve?: (bookId: string) => void;
    onToggleFavorite?: (bookId: string) => void;
    isFavorite?: boolean;
    isLoading?: boolean;
    className?: string;
}

const BookCard: React.FC<BookCardProps> = ({
                                               book,
                                               viewMode = 'grid',
                                               onReserve,
                                               onToggleFavorite,
                                               isFavorite = false,
                                               isLoading = false,
                                               className = ""
                                           }) => {
    const { orgSettings } = useConfig();
    const [imageError, setImageError] = useState(false);
    const [isReserving, setIsReserving] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Gérer la réservation
    const handleReserve = async (e: React.MouseEvent) => {
        e.preventDefault();
        e.stopPropagation();

        if (!onReserve || book.exemplaire === 0) return;

        setIsReserving(true);
        try {
            await onReserve(book.id);
        } catch (error) {
            console.error('Erreur lors de la réservation:', error);
        } finally {
            setIsReserving(false);
        }
    };

    // Gérer les favoris
    const handleToggleFavorite = (e: React.MouseEvent) => {
        e.preventDefault();
        e.stopPropagation();

        if (onToggleFavorite) {
            onToggleFavorite(book.id);
        }
    };

    // Calculer les statistiques de disponibilité
    const isAvailable = book.exemplaire > 0;
    const availabilityPercentage = (book.exemplaire / book.initialExemplaire) * 100;

    // Déterminer la couleur de la barre de disponibilité
    const getAvailabilityColor = () => {
        if (availabilityPercentage > 50) return '#10b981';
        if (availabilityPercentage > 20) return '#f59e0b';
        return '#ef4444'; // Rouge
    };

    const handleImageError = () => {
        setImageError(true);
    };

    // Vue grille (par défaut)
    if (viewMode === 'grid') {
        return (
            <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${className}`}>
                <Link to={`/books/${book.id}`} className="block">
                    {/* Image de couverture */}
                    <div className="relative aspect-[3/4] overflow-hidden bg-gray-100">
                        {book.image && !imageError ? (
                            <img
                                src={book.image}
                                alt={`Couverture de ${book.name}`}
                                className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                                onError={handleImageError}
                                loading="lazy"
                            />
                        ) : (
                            <div className="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                                <BookOpen className="w-16 h-16 text-gray-400 mb-2" />
                                <span className="text-xs text-gray-500 text-center px-2">
                                    {book.image ? 'Image non disponible' : 'Pas d\'image'}
                                </span>
                            </div>
                        )}

                        {/* Badge de disponibilité */}
                        <div className="absolute top-2 left-2 z-20">
                            <div className={`px-2 py-1 rounded-full text-xs font-medium flex items-center shadow-md ${
                                isAvailable
                                    ? 'bg-green-100 text-green-700 border border-green-200'
                                    : 'bg-red-100 text-red-700 border border-red-200'
                            }`}>
                                {isAvailable ? (
                                    <CheckCircle className="w-3 h-3 mr-1" />
                                ) : (
                                    <AlertCircle className="w-3 h-3 mr-1" />
                                )}
                                {isAvailable ? `${book.exemplaire} dispo` : 'Épuisé'}
                            </div>
                        </div>

                        {/* Bouton favori */}
                        <button
                            onClick={handleToggleFavorite}
                            className={`absolute top-2 cursor-pointer right-2 p-2 rounded-full transition-all duration-200 z-20 shadow-md ${
                                isFavorite
                                    ? 'bg-red-100 text-red-600 border border-red-200'
                                    : 'bg-white bg-opacity-90 text-gray-600 hover:bg-white hover:bg-opacity-100 border border-gray-200'
                            }`}
                            title={isFavorite ? 'Retirer des favoris' : 'Ajouter aux favoris'}
                        >
                            <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
                        </button>

                        {/* Badge d'étagère */}
                        {book.etagere && (
                            <div className="absolute bottom-2 right-2 z-10">
                                <div className="px-2 py-1 rounded-full bg-black bg-opacity-60 text-white text-xs font-medium">
                                    Ét: {book.etagere}
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Contenu */}
                    <div className="p-4">
                        {/* Titre */}
                        <h3 className="font-semibold text-gray-900 mb-1 line-clamp-2 group-hover:text-gray-700 transition-colors">
                            {book.name}
                        </h3>

                        {/* Auteur */}
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                            <User className="w-3 h-3 mr-1 flex-shrink-0" />
                            <span className="line-clamp-1">{book.auteur}</span>
                        </div>

                        {/* Catégorie */}
                        <div className="mb-3">
                            <span
                                className="inline-block px-2 py-1 rounded-full text-xs font-medium"
                                style={{
                                    backgroundColor: `${primaryColor}10`,
                                    color: primaryColor
                                }}
                            >
                                {book.cathegorie}
                            </span>
                        </div>

                        {/* Édition */}
                        {book.edition && (
                            <div className="flex items-center text-xs text-gray-500 mb-3">
                                <Building className="w-3 h-3 mr-1" />
                                <span className="truncate">{book.edition}</span>
                            </div>
                        )}

                        {/* Barre de disponibilité */}
                        <div className="mb-3">
                            <div className="flex justify-between text-xs text-gray-500 mb-1">
                                <span>Disponibilité</span>
                                <span>{book.exemplaire}/{book.initialExemplaire}</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                                <div
                                    className="h-2 rounded-full transition-all duration-300"
                                    style={{
                                        width: `${availabilityPercentage}%`,
                                        backgroundColor: getAvailabilityColor()
                                    }}
                                />
                            </div>
                        </div>

                        {/* Nombre de commentaires */}
                        {book.commentaire && book.commentaire.length > 0 && (
                            <div className="flex items-center text-xs text-gray-500">
                                <span>{book.commentaire.length} commentaire{book.commentaire.length > 1 ? 's' : ''}</span>
                            </div>
                        )}
                    </div>
                </Link>

                {/* Actions */}
                <div className="p-4 pt-0">
                    <button
                        onClick={handleReserve}
                        disabled={!isAvailable || isReserving || isLoading}
                        className={`w-full py-2 px-4 cursor-pointer rounded-lg font-medium transition-all duration-200 flex items-center justify-center ${
                            isAvailable && !isReserving && !isLoading
                                ? 'text-white hover:shadow-lg transform hover:scale-[1.02]'
                                : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                        }`}
                        style={{
                            backgroundColor: isAvailable && !isReserving && !isLoading ? primaryColor : undefined
                        }}
                    >
                        {isReserving ? (
                            <>
                                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                Réservation...
                            </>
                        ) : (
                            <>
                                <ShoppingCart className="w-4 h-4 mr-2" />
                                {isAvailable ? 'Réserver' : 'Épuisé'}
                            </>
                        )}
                    </button>
                </div>
            </div>
        );
    }

    // Vue liste
    return (
        <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md ${className}`}>
            <Link to={`/books/${book.id}`} className="flex">
                {/* Image de couverture */}
                <div className="relative w-24 h-32 flex-shrink-0 overflow-hidden bg-gray-100">
                    {book.image && !imageError ? (
                        <img
                            src={book.image}
                            alt={`Couverture de ${book.name}`}
                            className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                            onError={handleImageError}
                            loading="lazy"
                        />
                    ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                            <BookOpen className="w-8 h-8 text-gray-400" />
                        </div>
                    )}

                    {/* Badge de disponibilité */}
                    <div className="absolute bottom-1 left-1">
                        <div className={`w-3 h-3 rounded-full ${
                            isAvailable ? 'bg-green-500' : 'bg-red-500'
                        }`} />
                    </div>

                    {/* Badge d'étagère */}
                    {book.etagere && (
                        <div className="absolute top-1 right-1">
                            <div className="px-1 py-0.5 rounded text-xs bg-black bg-opacity-60 text-white font-medium">
                                {book.etagere}
                            </div>
                        </div>
                    )}
                </div>

                {/* Contenu */}
                <div className="flex-1 p-4 min-w-0">
                    <div className="flex justify-between items-start">
                        <div className="flex-1 min-w-0 mr-4">
                            {/* Titre */}
                            <h3 className="font-semibold text-gray-900 mb-1 line-clamp-1 group-hover:text-gray-700 transition-colors">
                                {book.name}
                            </h3>

                            {/* Auteur */}
                            <div className="flex items-center text-sm text-gray-600 mb-2">
                                <User className="w-3 h-3 mr-1 flex-shrink-0" />
                                <span className="truncate">{book.auteur}</span>
                            </div>

                            {/* Édition et étagère */}
                            <div className="flex items-center gap-4 text-xs text-gray-500 mb-2">
                                {book.edition && (
                                    <div className="flex items-center">
                                        <Building className="w-3 h-3 mr-1" />
                                        <span className="truncate">{book.edition}</span>
                                    </div>
                                )}
                                {book.etagere && (
                                    <div className="flex items-center">
                                        <Package className="w-3 h-3 mr-1" />
                                        <span>Étagère: {book.etagere}</span>
                                    </div>
                                )}
                            </div>

                            {/* Description */}
                            {book.desc && (
                                <p className="text-sm text-gray-600 line-clamp-2 mb-2">
                                    {book.desc}
                                </p>
                            )}

                            {/* Catégorie et disponibilité */}
                            <div className="flex items-center gap-3 mb-2">
                                <span
                                    className="inline-block px-2 py-1 rounded-full text-xs font-medium"
                                    style={{
                                        backgroundColor: `${primaryColor}10`,
                                        color: primaryColor
                                    }}
                                >
                                    {book.cathegorie}
                                </span>

                                <span className="text-xs text-gray-500 flex items-center">
                                    <CheckCircle className="w-3 h-3 mr-1" />
                                    {book.exemplaire}/{book.initialExemplaire} disponibles
                                </span>

                                {book.commentaire && book.commentaire.length > 0 && (
                                    <span className="text-xs text-gray-500 flex items-center">
                                        {book.commentaire.length} avis
                                    </span>
                                )}
                            </div>

                            {/* Barre de disponibilité compacte */}
                            <div className="w-full max-w-xs">
                                <div className="w-full bg-gray-200 rounded-full h-1.5">
                                    <div
                                        className="h-1.5 rounded-full transition-all duration-300"
                                        style={{
                                            width: `${availabilityPercentage}%`,
                                            backgroundColor: getAvailabilityColor()
                                        }}
                                    />
                                </div>
                            </div>
                        </div>

                        {/* Actions */}
                        <div className="flex items-center gap-2 flex-shrink-0">
                            <button
                                onClick={handleToggleFavorite}
                                className={`p-2 rounded-full cursor-pointer transition-all duration-200 ${
                                    isFavorite
                                        ? 'bg-red-100 text-red-600'
                                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                }`}
                            >
                                <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
                            </button>

                            <button
                                onClick={handleReserve}
                                disabled={!isAvailable || isReserving || isLoading}
                                className={`py-2 px-4 rounded-lg cursor-pointer font-medium transition-all duration-200 flex items-center ${
                                    isAvailable && !isReserving && !isLoading
                                        ? 'text-white hover:shadow-lg'
                                        : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                }`}
                                style={{
                                    backgroundColor: isAvailable && !isReserving && !isLoading ? primaryColor : undefined
                                }}
                            >
                                {isReserving ? (
                                    <>
                                        <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                        <span className="hidden sm:inline">Réservation...</span>
                                    </>
                                ) : (
                                    <>
                                        <ShoppingCart className="w-4 h-4 mr-2" />
                                        <span className="hidden sm:inline">
                                            {isAvailable ? 'Réserver' : 'Épuisé'}
                                        </span>
                                    </>
                                )}
                            </button>
                        </div>
                    </div>
                </div>
            </Link>
        </div>
    );
};

export default BookCard;
// END OF FILE: src/components/books/BookCard.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/BookDescription.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { BiblioBook } from './BookCard';
import { ChevronDown, ChevronUp, Book, Info } from 'lucide-react';

interface BookDescriptionProps {
    book: BiblioBook;
}

const BookDescription: React.FC<BookDescriptionProps> = ({ book }) => {
    const { orgSettings } = useConfig();
    const [isExpanded, setIsExpanded] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    const shouldShowExpandButton = book.desc && book.desc.length > 300;
    const displayText = shouldShowExpandButton && !isExpanded
        ? book.desc.substring(0, 300) + '...'
        : book.desc;

    if (!book.desc || book.desc.trim() === '') {
        return (
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 lg:p-8">
                <div className="flex items-center mb-4">
                    <Info className="w-6 h-6 mr-3" style={{ color: primaryColor }} />
                    <h2 className="text-2xl font-bold text-gray-900">Description</h2>
                </div>
                <div className="bg-gray-50 rounded-xl p-6 text-center">
                    <Book className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                    <p className="text-gray-500">Aucune description disponible pour ce livre.</p>
                </div>
            </div>
        );
    }

    return (
        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 lg:p-8">
            {/* En-tête */}
            <div className="flex items-center mb-6">
                <div
                    className="w-10 h-10 rounded-full flex items-center justify-center mr-4"
                    style={{ backgroundColor: `${primaryColor}15` }}
                >
                    <Book className="w-5 h-5" style={{ color: primaryColor }} />
                </div>
                <h2 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                    Description
                </h2>
            </div>

            {/* Contenu de la description */}
            <div className="prose prose-lg max-w-none">
                <div
                    className="text-gray-700 leading-relaxed"
                    style={{ lineHeight: '1.8' }}
                >
                    {displayText.split('\n').map((paragraph, index) => (
                        <p key={index} className="mb-4 last:mb-0">
                            {paragraph}
                        </p>
                    ))}
                </div>

                {/* Bouton d'expansion */}
                {shouldShowExpandButton && (
                    <div className="mt-6 flex justify-center">
                        <button
                            onClick={() => setIsExpanded(!isExpanded)}
                            className="inline-flex items-center px-6 py-3 rounded-xl font-medium transition-all duration-200 hover:shadow-md"
                            style={{
                                backgroundColor: `${primaryColor}10`,
                                color: primaryColor,
                                border: `1px solid ${primaryColor}30`
                            }}
                            onMouseEnter={(e) => {
                                e.currentTarget.style.backgroundColor = `${primaryColor}20`;
                                e.currentTarget.style.transform = 'translateY(-1px)';
                            }}
                            onMouseLeave={(e) => {
                                e.currentTarget.style.backgroundColor = `${primaryColor}10`;
                                e.currentTarget.style.transform = 'translateY(0)';
                            }}
                        >
                            {isExpanded ? (
                                <>
                                    <ChevronUp className="w-5 h-5 mr-2" />
                                    Voir moins
                                </>
                            ) : (
                                <>
                                    <ChevronDown className="w-5 h-5 mr-2" />
                                    Lire la suite
                                </>
                            )}
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default BookDescription;
// END OF FILE: src/components/books/BookDescription.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/BookHeader.tsx

// src/components/book/BookHeader.tsx - Mis à jour avec la nouvelle interface
import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { BiblioBook, CommentWithUserData } from './BookCard';
import {
    Heart,
    Share2,
    Star,
    CheckCircle,
    AlertCircle,
    ShoppingCart,
    Building,
    Package,
    Calendar,
    User,
    MessageSquare,
    BookOpen
} from 'lucide-react';

interface BookHeaderProps {
    book: BiblioBook;
    onReserve: () => void;
    onToggleFavorite: () => void;
    onOpenCommentModal: () => void;
    isFavorite: boolean;
    isAuthenticated: boolean;
    isReserving: boolean;
    commentsWithUserData?: CommentWithUserData[];
}

const BookHeader: React.FC<BookHeaderProps> = ({
                                                   book,
                                                   onReserve,
                                                   onToggleFavorite,
                                                   onOpenCommentModal,
                                                   isFavorite,
                                                   isAuthenticated,
                                                   isReserving,
                                                   commentsWithUserData = []
                                               }) => {
    const { orgSettings } = useConfig();
    const [imageError, setImageError] = useState(false);
    const [showShareMenu, setShowShareMenu] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    const isAvailable = book.exemplaire > 0;
    const availabilityPercentage = (book.exemplaire / book.initialExemplaire) * 100;

    const getAvailabilityColor = () => {
        if (availabilityPercentage > 50) return '#10b981';
        if (availabilityPercentage > 20) return '#f59e0b';
        return '#ef4444';
    };

    // Calcul de la note moyenne depuis commentsWithUserData (utilise field 'note' depuis Comment)
    const averageRating = commentsWithUserData.length > 0
        ? commentsWithUserData.reduce((sum, comment) => sum + comment.note, 0) / commentsWithUserData.length
        : 0;

    const handleShare = async () => {
        if (navigator.share) {
            try {
                await navigator.share({
                    title: book.name,
                    text: `Découvrez "${book.name}" par ${book.auteur}`,
                    url: window.location.href,
                });
            } catch {
                console.log('Partage annulé');
            }
        } else {
            setShowShareMenu(!showShareMenu);
        }
    };

    const copyToClipboard = () => {
        navigator.clipboard.writeText(window.location.href);
        setShowShareMenu(false);
    };

    return (
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 p-6 lg:p-8">
                {/* Image du livre */}
                <div className="lg:col-span-1">
                    <div className="relative group">
                        <div className="aspect-[3/4] rounded-xl overflow-hidden bg-gray-100 shadow-lg">
                            {book.image && !imageError ? (
                                <img
                                    src={book.image}
                                    alt={`Couverture de ${book.name}`}
                                    className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                                    onError={() => setImageError(true)}
                                />
                            ) : (
                                <div className="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                                    <BookOpen className="w-20 h-20 text-gray-400 mb-4" />
                                    <span className="text-sm text-gray-500 text-center px-4">
                                        {book.image ? 'Image non disponible' : 'Pas d\'image de couverture'}
                                    </span>
                                </div>
                            )}
                        </div>

                        {/* Badge de disponibilité flottant */}
                        <div className="absolute top-4 left-4 z-10">
                            <div className={`px-3 py-2 rounded-full text-sm font-semibold flex items-center shadow-lg backdrop-blur-sm ${
                                isAvailable
                                    ? 'bg-green-100/90 text-green-700 border border-green-200'
                                    : 'bg-red-100/90 text-red-700 border border-red-200'
                            }`}>
                                {isAvailable ? (
                                    <>
                                        <CheckCircle className="w-4 h-4 mr-2" />
                                        {book.exemplaire} disponible{book.exemplaire > 1 ? 's' : ''}
                                    </>
                                ) : (
                                    <>
                                        <AlertCircle className="w-4 h-4 mr-2" />
                                        Épuisé
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Informations du livre */}
                <div className="lg:col-span-2">
                    <div className="h-full flex flex-col">
                        {/* En-tête avec titre et actions */}
                        <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between mb-6">
                            <div className="flex-1 mb-4 lg:mb-0 lg:pr-6">
                                <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-3 leading-tight">
                                    {book.name}
                                </h1>

                                <div className="flex items-center text-lg text-gray-600 mb-4">
                                    <User className="w-5 h-5 mr-2" />
                                    <span className="font-medium">{book.auteur}</span>
                                </div>

                                {/* Évaluation basée sur commentsWithUserData */}
                                {commentsWithUserData.length > 0 && (
                                    <div className="flex items-center mb-4">
                                        <div className="flex items-center mr-4">
                                            {[1, 2, 3, 4, 5].map((star) => (
                                                <Star
                                                    key={star}
                                                    className={`w-5 h-5 transition-colors duration-200 ${
                                                        star <= Math.round(averageRating)
                                                            ? 'fill-current text-yellow-400'
                                                            : 'text-gray-300'
                                                    }`}
                                                />
                                            ))}
                                        </div>
                                        <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4">
                                            <span className="text-sm text-gray-600 font-medium">
                                                {averageRating.toFixed(1)} sur 5
                                            </span>
                                            <span className="text-sm text-gray-500">
                                                ({commentsWithUserData.length} avis)
                                            </span>
                                        </div>
                                    </div>
                                )}

                                {/* Pas d'avis encore */}
                                {commentsWithUserData.length === 0 && book.commentaire.length === 0 && (
                                    <div className="flex items-center mb-4">
                                        <div className="flex items-center mr-4">
                                            {[1, 2, 3, 4, 5].map((star) => (
                                                <Star
                                                    key={star}
                                                    className="w-5 h-5 text-gray-300"
                                                />
                                            ))}
                                        </div>
                                        <span className="text-sm text-gray-500">
                                            Aucun avis pour le moment
                                        </span>
                                    </div>
                                )}
                            </div>

                            {/* Actions rapides */}
                            <div className="flex items-center space-x-3">
                                <button
                                    onClick={onToggleFavorite}
                                    disabled={!isAuthenticated}
                                    className={`p-3 rounded-full transition-all duration-200 ${
                                        isFavorite
                                            ? 'bg-red-100 text-red-600 hover:bg-red-200'
                                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                    } ${!isAuthenticated ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    title={
                                        !isAuthenticated
                                            ? 'Connectez-vous pour ajouter aux favoris'
                                            : isFavorite
                                                ? 'Retirer des favoris'
                                                : 'Ajouter aux favoris'
                                    }
                                >
                                    <Heart className={`w-5 h-5 ${isFavorite ? 'fill-current' : ''}`} />
                                </button>

                                <div className="relative">
                                    <button
                                        onClick={handleShare}
                                        className="p-3 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-all duration-200"
                                        title="Partager ce livre"
                                    >
                                        <Share2 className="w-5 h-5" />
                                    </button>

                                    {showShareMenu && (
                                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border z-50">
                                            <div className="p-2">
                                                <button
                                                    onClick={copyToClipboard}
                                                    className="w-full px-4 py-3 text-left cursor-pointer text-sm hover:bg-gray-50 transition-colors rounded-lg"
                                                >
                                                    Copier le lien
                                                </button>
                                                <button
                                                    onClick={() => {
                                                        window.open(`https://twitter.com/intent/tweet?text=Découvrez "${book.name}" par ${book.auteur}&url=${window.location.href}`, '_blank');
                                                        setShowShareMenu(false);
                                                    }}
                                                    className="w-full px-4 py-3 text-left cursor-pointer text-sm hover:bg-gray-50 transition-colors rounded-lg"
                                                >
                                                    🐦 Partager sur Twitter
                                                </button>
                                                <button
                                                    onClick={() => {
                                                        window.open(`https://www.facebook.com/sharer/sharer.php?u=${window.location.href}`, '_blank');
                                                        setShowShareMenu(false);
                                                    }}
                                                    className="w-full px-4 py-3 text-left cursor-pointer text-sm hover:bg-gray-50 transition-colors rounded-lg"
                                                >
                                                     Partager sur Facebook
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Informations détaillées */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                            <div className="flex items-center">
                                <Package className="w-5 h-5 mr-3 text-gray-400" />
                                <div>
                                    <span className="text-sm text-gray-500">Département</span>
                                    <p className="font-medium">{book.cathegorie}</p>
                                </div>
                            </div>

                            {book.edition && (
                                <div className="flex items-center">
                                    <Building className="w-5 h-5 mr-3 text-gray-400" />
                                    <div>
                                        <span className="text-sm text-gray-500">Éditeur</span>
                                        <p className="font-medium">{book.edition}</p>
                                    </div>
                                </div>
                            )}

                            {book.etagere && (
                                <div className="flex items-center">
                                    <Calendar className="w-5 h-5 mr-3 text-gray-400" />
                                    <div>
                                        <span className="text-sm text-gray-500">Étagère</span>
                                        <p className="font-medium">{book.etagere}</p>
                                    </div>
                                </div>
                            )}

                            <div className="flex items-center">
                                <MessageSquare className="w-5 h-5 mr-3 text-gray-400" />
                                <div>
                                    <span className="text-sm text-gray-500">Commentaires</span>
                                    <p className="font-medium">
                                        {book.commentaire?.length || 0} avis
                                        {commentsWithUserData.length > 0 && (
                                            <span className="text-xs text-gray-400 ml-1">
                                                (Note moyenne: {averageRating.toFixed(1)}/5)
                                            </span>
                                        )}
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Barre de disponibilité */}
                        <div className="mb-6">
                            <div className="flex justify-between items-center mb-2">
                                <span className="text-sm font-medium text-gray-700">Disponibilité</span>
                                <span className="text-sm text-gray-500">
                                    {book.exemplaire}/{book.initialExemplaire} exemplaires
                                </span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                                <div
                                    className="h-3 rounded-full transition-all duration-500 ease-out"
                                    style={{
                                        width: `${Math.max(availabilityPercentage, 5)}%`, // Minimum 5% pour la visibilité
                                        backgroundColor: getAvailabilityColor()
                                    }}
                                />
                            </div>
                            {availabilityPercentage <= 20 && availabilityPercentage > 0 && (
                                <p className="text-xs text-amber-600 mt-1 font-medium">
                                    ⚠️ Stock faible - Plus que {book.exemplaire} exemplaire{book.exemplaire > 1 ? 's' : ''}
                                </p>
                            )}
                        </div>

                        {/* Actions principales */}
                        <div className="mt-auto">
                            <div className="flex flex-col sm:flex-row gap-4">
                                <button
                                    onClick={onReserve}
                                    disabled={!isAvailable || isReserving || !isAuthenticated}
                                    className={`flex-1 py-4 px-6 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center justify-center ${
                                        isAvailable && !isReserving && isAuthenticated
                                            ? 'text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02]'
                                            : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                    }`}
                                    style={{
                                        backgroundColor: isAvailable && !isReserving && isAuthenticated ? primaryColor : undefined
                                    }}
                                >
                                    {isReserving ? (
                                        <>
                                            <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-3" />
                                            Réservation en cours...
                                        </>
                                    ) : !isAuthenticated ? (
                                        <>
                                            <ShoppingCart className="w-5 h-5 mr-3" />
                                            Connectez-vous pour réserver
                                        </>
                                    ) : (
                                        <>
                                            <ShoppingCart className="w-5 h-5 mr-3" />
                                            {isAvailable ? 'Réserver ce livre' : 'Livre épuisé'}
                                        </>
                                    )}
                                </button>

                                <button
                                    onClick={onOpenCommentModal}
                                    disabled={!isAuthenticated}
                                    className={`sm:w-auto px-6 py-4 rounded-xl font-semibold text-lg border-2 transition-all duration-200 hover:shadow-lg ${
                                        !isAuthenticated ? 'opacity-50 cursor-not-allowed' : ''
                                    }`}
                                    style={{
                                        borderColor: primaryColor,
                                        color: isAuthenticated ? primaryColor : '#9ca3af',
                                        backgroundColor: `${primaryColor}08`
                                    }}
                                    onMouseEnter={(e) => {
                                        if (isAuthenticated) {
                                            e.currentTarget.style.backgroundColor = primaryColor;
                                            e.currentTarget.style.color = 'white';
                                        }
                                    }}
                                    onMouseLeave={(e) => {
                                        if (isAuthenticated) {
                                            e.currentTarget.style.backgroundColor = `${primaryColor}08`;
                                            e.currentTarget.style.color = primaryColor;
                                        }
                                    }}
                                    title={!isAuthenticated ? 'Connectez-vous pour donner votre avis' : 'Donner votre avis sur ce livre'}
                                >
                                    <MessageSquare className="w-5 h-5 mr-2 inline" />
                                    {!isAuthenticated ? 'Se connecter pour commenter' : 'Donner mon avis'}
                                </button>
                            </div>

                            {!isAuthenticated && (
                                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                    <p className="text-sm text-blue-700 text-center flex items-center justify-center">
                                        <AlertCircle className="w-4 h-4 mr-2" />
                                        <span>
                                            <button
                                                onClick={() => window.location.href = '/auth'}
                                                className="font-medium underline hover:no-underline"
                                            >
                                                Connectez-vous
                                            </button>
                                            {' '}pour réserver ce livre et laisser un avis
                                        </span>
                                    </p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default BookHeader;
// END OF FILE: src/components/books/BookHeader.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/BooksList.tsx

import React, { useState, useEffect } from 'react';
import { collection, query, orderBy, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';
import LoadingSpinner from '../common/LoadingSpinner';
import BookCard, { BiblioBook } from './BookCard';
import { SortOption, ViewMode } from './BooksSortOptions';
import {
    ChevronLeft,
    ChevronRight,
    BookOpen,
    RefreshCw,
    AlertCircle,
    Search
} from 'lucide-react';

interface SearchFilters {
    query: string;
    author: string;
    publisher: string;
    category: string;
    yearFrom: string;
    yearTo: string;
}

interface BooksListProps {
    searchFilters: SearchFilters;
    selectedDepartments: string[];
    sortOption: SortOption;
    viewMode: ViewMode;
    onBookReserve?: (bookId: string) => void;
    onToggleFavorite?: (bookId: string) => void;
    favoriteBooks?: string[];
    className?: string;
}

const BooksList: React.FC<BooksListProps> = ({
                                                 searchFilters,
                                                 selectedDepartments,
                                                 sortOption,
                                                 viewMode,
                                                 onBookReserve,
                                                 onToggleFavorite,
                                                 favoriteBooks = [],
                                                 className = ""
                                             }) => {
    const { orgSettings } = useConfig();
    const [allBooks, setAllBooks] = useState<BiblioBook[]>([]);
    const [filteredBooks, setFilteredBooks] = useState<BiblioBook[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string>('');
    const [currentPage, setCurrentPage] = useState(1);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const BOOKS_PER_PAGE = 12;

    const loadAllBooks = async () => {
        try {
            setLoading(true);
            setError('');

            // Requête correcte avec la bonne collection
            const booksQuery = query(
                collection(db, 'BiblioBooks'),
                orderBy('name', 'asc')
            );

            const querySnapshot = await getDocs(booksQuery);
            const books: BiblioBook[] = [];

            querySnapshot.forEach((doc) => {
                const bookData = { id: doc.id, ...doc.data() } as BiblioBook;
                books.push(bookData);
            });

            setAllBooks(books);

        } catch {
            setError('Erreur lors du chargement des livres. Veuillez réessayer.');
        } finally {
            setLoading(false);
        }
    };

    // Charger les livres au montage
    useEffect(() => {
        loadAllBooks();
    }, []);

    // Appliquer les filtres et le tri côté client
    useEffect(() => {
        let filtered = [...allBooks];

        // 1. Filtrer par départements (utilise "cathegorie")
        if (selectedDepartments.length > 0) {
            filtered = filtered.filter(book =>
                selectedDepartments.includes(book.cathegorie)
            );
        }

        // 2. Filtrer par recherche textuelle
        if (searchFilters.query.trim()) {
            const searchTerm = searchFilters.query.toLowerCase();
            filtered = filtered.filter(book =>
                book.name.toLowerCase().includes(searchTerm) ||
                book.auteur.toLowerCase().includes(searchTerm) ||
                book.cathegorie.toLowerCase().includes(searchTerm) ||
                (book.desc && book.desc.toLowerCase().includes(searchTerm))
            );
        }

        // 3. Filtres avancés
        if (searchFilters.author.trim()) {
            filtered = filtered.filter(book =>
                book.auteur.toLowerCase().includes(searchFilters.author.toLowerCase())
            );
        }

        if (searchFilters.publisher.trim()) {
            filtered = filtered.filter(book =>
                book.edition && book.edition.toLowerCase().includes(searchFilters.publisher.toLowerCase())
            );
        }

        if (searchFilters.category.trim()) {
            filtered = filtered.filter(book =>
                book.cathegorie.toLowerCase().includes(searchFilters.category.toLowerCase())
            );
        }

        // 4. Appliquer le tri
        filtered.sort((a, b) => {
            switch (sortOption) {
                case 'title-asc':
                    return a.name.localeCompare(b.name);
                case 'title-desc':
                    return b.name.localeCompare(a.name);
                case 'availability-desc':
                    return b.exemplaire - a.exemplaire;
                default:
                    return 0;
            }
        });

        setFilteredBooks(filtered);
        setCurrentPage(1);

    }, [allBooks, searchFilters, selectedDepartments, sortOption]);

    // Calculer les statistiques
    const totalExemplaires = allBooks.reduce((sum, book) => sum + book.exemplaire, 0);
    const totalPages = Math.ceil(filteredBooks.length / BOOKS_PER_PAGE);
    const startIndex = (currentPage - 1) * BOOKS_PER_PAGE;
    const endIndex = startIndex + BOOKS_PER_PAGE;
    const currentBooks = filteredBooks.slice(startIndex, endIndex);

    // Navigation des pages
    const handlePreviousPage = () => {
        setCurrentPage(prev => Math.max(1, prev - 1));
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const handleNextPage = () => {
        setCurrentPage(prev => Math.min(totalPages, prev + 1));
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    // Recharger les données
    const handleRefresh = () => {
        loadAllBooks();
    };

    // Gestion de la réservation
    const handleBookReserve = async (bookId: string) => {
        if (onBookReserve) {
            await onBookReserve(bookId);
            handleRefresh();
        }
    };

    if (loading) {
        return (
            <div className={`flex items-center justify-center py-12 ${className}`}>
                <LoadingSpinner size="lg" text="Chargement des livres..." />
            </div>
        );
    }

    if (error) {
        return (
            <div className={`bg-white rounded-xl border border-red-200 p-8 text-center ${className}`}>
                <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-red-800 mb-2">Erreur de chargement</h3>
                <p className="text-red-600 mb-4">{error}</p>
                <button
                    onClick={handleRefresh}
                    className="inline-flex items-center px-4 py-2 rounded-lg text-white font-medium transition-colors"
                    style={{ backgroundColor: primaryColor }}
                >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Réessayer
                </button>
            </div>
        );
    }

    if (filteredBooks.length === 0) {
        return (
            <div className={`bg-white rounded-xl border border-gray-200 p-12 text-center ${className}`}>
                <div
                    className="w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6"
                    style={{ backgroundColor: `${primaryColor}10` }}
                >
                    <Search className="w-10 h-10" style={{ color: primaryColor }} />
                </div>
                <h3 className="text-xl font-semibold text-gray-800 mb-2">Aucun livre trouvé</h3>
                <p className="text-gray-600 mb-6">
                    Aucun livre ne correspond à vos critères de recherche.
                </p>
                <div className="space-y-2 text-sm text-gray-500">
                    <p>• Vérifiez l'orthographe de vos mots-clés</p>
                    <p>• Utilisez des termes plus généraux</p>
                    <p>• Réduisez le nombre de filtres</p>
                </div>
            </div>
        );
    }

    return (
        <div className={className}>
            {/* En-tête avec statistiques */}
            <div className="mb-6 flex items-center justify-between">
                <div className="flex items-center">
                    <BookOpen className="w-5 h-5 mr-2 text-gray-400" />
                    <span className="text-gray-600">
                        {filteredBooks.length} livre{filteredBooks.length !== 1 ? 's' : ''} • {totalExemplaires} exemplaires au total
                        {totalPages > 1 && ` • Page ${currentPage} sur ${totalPages}`}
                    </span>
                </div>

                <button
                    onClick={handleRefresh}
                    className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                    title="Actualiser"
                >
                    <RefreshCw className="w-4 h-4" />
                </button>
            </div>

            {/* Grille/Liste des livres */}
            <div className={`${
                viewMode === 'grid'
                    ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6'
                    : 'space-y-4'
            }`}>
                {currentBooks.map((book) => (
                    <BookCard
                        key={book.id}
                        book={book}
                        viewMode={viewMode}
                        onReserve={handleBookReserve}
                        onToggleFavorite={onToggleFavorite}
                        isFavorite={favoriteBooks.includes(book.id)}
                    />
                ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
                <div className="mt-8 flex items-center justify-center">
                    <div className="flex items-center bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
                        <button
                            onClick={handleNextPage}
                            disabled={currentPage === totalPages}
                            className={`p-3 transition-colors ${
                                currentPage === totalPages
                                    ? 'text-gray-300 cursor-not-allowed'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                        >
                            <ChevronRight className="w-5 h-5" />
                        </button>

                        <button
                            onClick={handlePreviousPage}
                            disabled={currentPage === totalPages}
                            className={`p-3 transition-colors ${
                                currentPage === totalPages
                                    ? 'text-gray-300 cursor-not-allowed'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                        >
                            <ChevronLeft className="w-5 h-5" />
                        </button>

                    </div>
                </div>
            )}

            {/* Informations sur la pagination */}
            {filteredBooks.length > BOOKS_PER_PAGE && (
                <div className="mt-4 text-center text-sm text-gray-500">
                    Affichage de {startIndex + 1} à {Math.min(endIndex, filteredBooks.length)} sur {filteredBooks.length} livre{filteredBooks.length > 1 ? 's' : ''}
                </div>
            )}
        </div>
    );
};

export default BooksList;
// END OF FILE: src/components/books/BooksList.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/BooksSortOptions.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import {
    SortAsc,
    SortDesc,
    Grid3X3,
    List,
    Calendar,
    Star,
    Eye,
    ChevronDown
} from 'lucide-react';

export type SortOption =
    | 'title-asc'
    | 'title-desc'
    | 'date-asc'
    | 'date-desc'
    | 'rating-asc'
    | 'rating-desc'
    | 'availability-desc';

export type ViewMode = 'grid' | 'list';

interface SortOptionsProps {
    currentSort: SortOption;
    onSortChange: (sort: SortOption) => void;
    viewMode: ViewMode;
    onViewModeChange: (mode: ViewMode) => void;
    className?: string;
}

const BooksSortOptions: React.FC<SortOptionsProps> = ({
    currentSort,
    onSortChange,
    viewMode,
    onViewModeChange,
    className = ""
}) => {
    const { orgSettings } = useConfig();
    const [isSortOpen, setIsSortOpen] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    const sortOptions = [
        {
            value: 'title-asc' as SortOption,
            label: 'Titre (A-Z)',
            icon: SortAsc
        },
        {
            value: 'title-desc' as SortOption,
            label: 'Titre (Z-A)',
            icon: SortDesc
        },
        {
            value: 'date-desc' as SortOption,
            label: 'Plus récents',
            icon: Calendar
        },
        {
            value: 'date-asc' as SortOption,
            label: 'Plus anciens',
            icon: Calendar
        },
        {
            value: 'rating-desc' as SortOption,
            label: 'Mieux notés',
            icon: Star
        },
        {
            value: 'availability-desc' as SortOption,
            label: 'Disponibilité',
            icon: Eye
        }
    ];

    const getCurrentSortLabel = () => {
        const option = sortOptions.find(opt => opt.value === currentSort);
        return option?.label || 'Trier par';
    };

    return (
        <div className={`bg-white rounded-xl border border-gray-200 p-4 ${className}`}>
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                {/* Contrôles */}
                <div className="flex items-center gap-4 w-full sm:w-auto">
                    {/* Sélecteur de tri */}
                    <div className="relative">
                        <button
                            onClick={() => setIsSortOpen(!isSortOpen)}
                            className="flex items-center justify-between px-4 py-2 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors min-w-[140px]"
                        >
                            <span className="text-sm font-medium text-gray-700">
                                {getCurrentSortLabel()}
                            </span>
                            <ChevronDown
                                className={`w-4 h-4 text-gray-400 ml-2 transition-transform ${
                                    isSortOpen ? 'rotate-180' : ''
                                }`}
                            />
                        </button>

                        {/* Menu déroulant de tri */}
                        {isSortOpen && (
                            <div className="absolute top-full right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-xl z-50">
                                <div className="p-2">
                                    {sortOptions.map((option) => {
                                        const IconComponent = option.icon;
                                        return (
                                            <button
                                                key={option.value}
                                                onClick={() => {
                                                    onSortChange(option.value);
                                                    setIsSortOpen(false);
                                                }}
                                                className={`w-full flex items-center px-3 py-2 text-sm rounded-lg transition-colors text-left ${
                                                    currentSort === option.value
                                                        ? 'font-medium'
                                                        : 'hover:bg-gray-50'
                                                }`}
                                                style={{
                                                    backgroundColor: currentSort === option.value ? `${primaryColor}10` : 'transparent',
                                                    color: currentSort === option.value ? primaryColor : '#374151'
                                                }}
                                            >
                                                <IconComponent className="w-4 h-4 mr-3" />
                                                {option.label}
                                            </button>
                                        );
                                    })}
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Sélecteur de vue */}
                    <div className="flex items-center border border-gray-200 rounded-lg overflow-hidden">
                        <button
                            onClick={() => onViewModeChange('grid')}
                            className={`p-2 transition-colors cursor-pointer ${
                                viewMode === 'grid'
                                    ? 'text-white'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                            style={{
                                backgroundColor: viewMode === 'grid' ? primaryColor : 'transparent'
                            }}
                            title="Vue grille"
                        >
                            <Grid3X3 className="w-4 h-4" />
                        </button>

                        <button
                            onClick={() => onViewModeChange('list')}
                            className={`p-2 transition-colors cursor-pointer border-l border-gray-200 ${
                                viewMode === 'list'
                                    ? 'text-white'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                            style={{
                                backgroundColor: viewMode === 'list' ? primaryColor : 'transparent'
                            }}
                            title="Vue liste"
                        >
                            <List className="w-4 h-4" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default BooksSortOptions;
// END OF FILE: src/components/books/BooksSortOptions.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/books/LibraryStatistics.tsx

import React, { useState, useEffect } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';
import LoadingSpinner from '../common/LoadingSpinner';
import { RefreshCw, TrendingUp, TrendingDown } from 'lucide-react';
import { Timestamp } from 'firebase/firestore';

// Interface exacte selon votre structure
interface Comment {
    id: string;
    userId: string;
    text: string;
    createdAt: Timestamp;
}

interface BiblioBook {
    id: string;
    name: string;
    auteur: string;
    cathegorie: string;
    commentaire: Comment[];
    desc: string;
    edition: string;
    etagere: string;
    exemplaire: number;
    image: string;
    initialExemplaire: number;
}

interface LibraryStats {
    totalBooks: number;
    availableBooks: number;
    totalExemplaires: number;
    availableExemplaires: number;
    totalCategories: number;
    totalAuthors: number;
    totalPublishers: number;
    availabilityRate: number;
    mostPopularCategory: string;
    mostPopularAuthor: string;
    totalComments: number;
    averageCommentsPerBook: number;
    topShelf: string;
    booksWithoutImages: number;
}

interface StatCardProps {
    title: string;
    value: string | number;
    subtitle?: string;
    color: string;
    backgroundColor: string;
    trend?: {
        value: number;
        isPositive: boolean;
    };
}

const StatCard: React.FC<StatCardProps> = ({
                                               title,
                                               value,
                                               subtitle,
                                               color,
                                               backgroundColor,
                                               trend
                                           }) => {
    return (
        <div
            className="text-center p-4 rounded-lg transition-all duration-300 hover:shadow-md transform hover:scale-105"
            style={{ backgroundColor }}
        >
            <div className="flex items-center justify-between mb-2">
                <div
                    className="text-2xl font-bold"
                    style={{ color }}
                >
                    {typeof value === 'number' ? value.toLocaleString() : value}
                </div>
                {trend && (
                    <div className={`flex items-center text-xs ${
                        trend.isPositive ? 'text-green-600' : 'text-red-600'
                    }`}>
                        {trend.isPositive ? (
                            <TrendingUp className="w-3 h-3 mr-1" />
                        ) : (
                            <TrendingDown className="w-3 h-3 mr-1" />
                        )}
                        {Math.abs(trend.value)}%
                    </div>
                )}
            </div>
            <div className="text-xs text-gray-600 font-medium">
                {title}
            </div>
            {subtitle && (
                <div className="text-xs text-gray-500 mt-1">
                    {subtitle}
                </div>
            )}
        </div>
    );
};

interface LibraryStatisticsProps {
    className?: string;
    showRefreshButton?: boolean;
    compact?: boolean;
}

const LibraryStatistics: React.FC<LibraryStatisticsProps> = ({
                                                                 className = "",
                                                                 showRefreshButton = true,
                                                                 compact = false
                                                             }) => {
    const { orgSettings } = useConfig();
    const [stats, setStats] = useState<LibraryStats | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string>('');
    const [lastUpdated, setLastUpdated] = useState<Date>(new Date());

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    const fetchLibraryStatistics = async () => {
        try {
            setLoading(true);
            setError('');

            // Récupérer tous les livres de la collection BiblioBooks
            const booksSnapshot = await getDocs(collection(db, 'BiblioBooks'));
            const books: BiblioBook[] = [];

            booksSnapshot.forEach((doc) => {
                books.push({ id: doc.id, ...doc.data() } as BiblioBook);
            });

            if (books.length === 0) {
                throw new Error('Aucun livre trouvé dans la base de données');
            }

            // 1. Statistiques de base des livres
            const totalBooks = books.length;
            const availableBooks = books.filter(book => book.exemplaire > 0).length;
            const totalExemplaires = books.reduce((sum, book) => sum + (book.initialExemplaire || 0), 0);
            const availableExemplaires = books.reduce((sum, book) => sum + (book.exemplaire || 0), 0);
            const availabilityRate = totalExemplaires > 0 ? Math.round((availableExemplaires / totalExemplaires) * 100) : 0;

            // 2. Analyse des catégories
            const categoriesMap = new Map<string, number>();
            books.forEach(book => {
                if (book.cathegorie && book.cathegorie.trim()) {
                    const category = book.cathegorie.trim();
                    categoriesMap.set(category, (categoriesMap.get(category) || 0) + 1);
                }
            });
            const totalCategories = categoriesMap.size;
            const mostPopularCategory = Array.from(categoriesMap.entries())
                .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Non définie';

            // 3. Analyse des auteurs
            const authorsMap = new Map<string, number>();
            books.forEach(book => {
                if (book.auteur && book.auteur.trim()) {
                    const author = book.auteur.trim();
                    authorsMap.set(author, (authorsMap.get(author) || 0) + 1);
                }
            });
            const totalAuthors = authorsMap.size;
            const mostPopularAuthor = Array.from(authorsMap.entries())
                .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Non défini';

            // 4. Analyse des éditeurs
            const publishersSet = new Set<string>();
            books.forEach(book => {
                if (book.edition && book.edition.trim()) {
                    publishersSet.add(book.edition.trim());
                }
            });
            const totalPublishers = publishersSet.size;

            // 5. Analyse des étagères
            const shelvesMap = new Map<string, number>();
            books.forEach(book => {
                if (book.etagere && book.etagere.trim()) {
                    const shelf = book.etagere.trim();
                    shelvesMap.set(shelf, (shelvesMap.get(shelf) || 0) + 1);
                }
            });
            const topShelf = Array.from(shelvesMap.entries())
                .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Non définie';

            // 6. Analyse des commentaires
            const totalComments = books.reduce((sum, book) => {
                return sum + (book.commentaire ? book.commentaire.length : 0);
            }, 0);
            const averageCommentsPerBook = totalBooks > 0 ? Math.round((totalComments / totalBooks) * 10) / 10 : 0;

            // 7. Livres sans images
            const booksWithoutImages = books.filter(book => !book.image || book.image.trim() === '').length;

            const calculatedStats: LibraryStats = {
                totalBooks,
                availableBooks,
                totalExemplaires,
                availableExemplaires,
                totalCategories,
                totalAuthors,
                totalPublishers,
                availabilityRate,
                mostPopularCategory,
                mostPopularAuthor,
                totalComments,
                averageCommentsPerBook,
                topShelf,
                booksWithoutImages
            };

            setStats(calculatedStats);
            setLastUpdated(new Date());

        } catch (err) {
            setError(err instanceof Error ? err.message : 'Erreur lors du calcul des statistiques');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchLibraryStatistics();
    }, []);

    const handleRefresh = () => {
        fetchLibraryStatistics();
    };

    if (loading) {
        return (
            <div className={`bg-white rounded-xl border border-gray-200 shadow-sm p-6 ${className}`}>
                <div className="flex items-center justify-center py-8">
                    <LoadingSpinner size="md" text="Calcul des statistiques..." />
                </div>
            </div>
        );
    }

    if (error || !stats) {
        return (
            <div className={`bg-white rounded-xl border border-red-200 shadow-sm p-6 ${className}`}>
                <div className="text-center py-4">
                    <p className="text-red-600 mb-4">{error || 'Erreur inconnue'}</p>
                    <button
                        onClick={handleRefresh}
                        className="inline-flex items-center px-4 py-2 rounded-lg text-white font-medium"
                        style={{ backgroundColor: primaryColor }}
                    >
                        <RefreshCw className="w-4 h-4 mr-2" />
                        Réessayer
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className={`bg-white rounded-xl border border-gray-200 shadow-sm p-6 ${className}`}>
            {/* En-tête */}
            <div className="flex items-center justify-between mb-4">
                <div>
                    <h3 className="font-semibold text-gray-800">
                        Statistiques de la bibliothèque
                    </h3>
                    <p className="text-xs text-gray-500">
                        Dernière mise à jour: {lastUpdated.toLocaleTimeString()}
                    </p>
                </div>
                {showRefreshButton && (
                    <button
                        onClick={handleRefresh}
                        className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                        title="Actualiser les statistiques"
                    >
                        <RefreshCw className="w-4 h-4" />
                    </button>
                )}
            </div>

            {/* Grille des statistiques principales */}
            <div className={`grid gap-4 ${compact ? 'grid-cols-2' : 'grid-cols-2 lg:grid-cols-4'}`}>
                <StatCard
                    title="Total livres"
                    value={stats.totalBooks}
                    subtitle={`${stats.availableBooks} disponibles`}
                    color={primaryColor}
                    backgroundColor={`${primaryColor}08`}
                    trend={{
                        value: Math.round((stats.availableBooks / stats.totalBooks) * 100),
                        isPositive: stats.availabilityRate > 80
                    }}
                />

                <StatCard
                    title="Exemplaires"
                    value={`${stats.availableExemplaires}/${stats.totalExemplaires}`}
                    subtitle="Disponibles/Total"
                    color={secondaryColor}
                    backgroundColor={`${secondaryColor}08`}
                    trend={{
                        value: stats.availabilityRate,
                        isPositive: stats.availabilityRate >= 70
                    }}
                />

                <StatCard
                    title="Catégories"
                    value={stats.totalCategories}
                    subtitle={`Pop.: ${stats.mostPopularCategory}`}
                    color={primaryColor}
                    backgroundColor={`${primaryColor}08`}
                />

                <StatCard
                    title="Auteurs"
                    value={stats.totalAuthors}
                    subtitle={`Pop.: ${stats.mostPopularAuthor.length > 15 ? stats.mostPopularAuthor.substring(0, 15) + '...' : stats.mostPopularAuthor}`}
                    color={secondaryColor}
                    backgroundColor={`${secondaryColor}08`}
                />
            </div>

            {/* Statistiques secondaires en mode étendu */}
            {!compact && (
                <>
                    <div className="mt-6 grid grid-cols-2 lg:grid-cols-4 gap-4">
                        <StatCard
                            title="Commentaires"
                            value={stats.totalComments}
                            subtitle={`${stats.averageCommentsPerBook} moy./livre`}
                            color={primaryColor}
                            backgroundColor={`${primaryColor}05`}
                        />

                        <StatCard
                            title="Éditeurs"
                            value={stats.totalPublishers}
                            subtitle="Maisons d'édition"
                            color={secondaryColor}
                            backgroundColor={`${secondaryColor}05`}
                        />

                        <StatCard
                            title="Étagère top"
                            value={stats.topShelf}
                            subtitle="Plus de livres"
                            color={primaryColor}
                            backgroundColor={`${primaryColor}05`}
                        />

                        <StatCard
                            title="Sans image"
                            value={stats.booksWithoutImages}
                            subtitle={`${Math.round((stats.booksWithoutImages / stats.totalBooks) * 100)}% du total`}
                            color={stats.booksWithoutImages > 0 ? '#ef4444' : '#10b981'}
                            backgroundColor={stats.booksWithoutImages > 0 ? '#ef444408' : '#10b98108'}
                        />
                    </div>

                    {/* Informations détaillées */}
                    <div className="mt-6 pt-4 border-t border-gray-200">
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                            <div className="bg-gray-50 rounded-lg p-4">
                                <h4 className="font-medium text-gray-800 mb-2">Catégorie populaire</h4>
                                <p className="text-lg font-bold" style={{ color: primaryColor }}>
                                    {stats.mostPopularCategory}
                                </p>
                                <p className="text-xs text-gray-600">
                                    Sur {stats.totalCategories} catégories
                                </p>
                            </div>

                            <div className="bg-gray-50 rounded-lg p-4">
                                <h4 className="font-medium text-gray-800 mb-2">Auteur populaire</h4>
                                <p className="text-lg font-bold" style={{ color: secondaryColor }}>
                                    {stats.mostPopularAuthor.length > 20
                                        ? stats.mostPopularAuthor.substring(0, 20) + '...'
                                        : stats.mostPopularAuthor
                                    }
                                </p>
                                <p className="text-xs text-gray-600">
                                    Sur {stats.totalAuthors} auteurs
                                </p>
                            </div>

                            <div className="bg-gray-50 rounded-lg p-4">
                                <h4 className="font-medium text-gray-800 mb-2">Étagère principale</h4>
                                <p className="text-lg font-bold text-gray-800">
                                    {stats.topShelf}
                                </p>
                                <p className="text-xs text-gray-600">
                                    Contient le plus de livres
                                </p>
                            </div>
                        </div>
                    </div>
                </>
            )}

            {/* Barre de progression globale */}
            <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="flex justify-between text-sm text-gray-600 mb-2">
                    <span>Disponibilité globale</span>
                    <span>{stats.availabilityRate}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                        className="h-2 rounded-full transition-all duration-500"
                        style={{
                            width: `${stats.availabilityRate}%`,
                            backgroundColor: stats.availabilityRate >= 70 ? '#10b981' :
                                stats.availabilityRate >= 50 ? '#f59e0b' : '#ef4444'
                        }}
                    />
                </div>
            </div>
        </div>
    );
};

export default LibraryStatistics;
// END OF FILE: src/components/books/LibraryStatistics.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/AvatarUploader.tsx

import React, { useState, useRef } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { cloudinaryService, UploadProgress } from '../../services/cloudinaryService';
import { Camera, Upload, X, User, CheckCircle, AlertCircle } from 'lucide-react';

interface AvatarUploaderProps {
    currentAvatar?: string;
    onAvatarUploaded: (avatarUrl: string) => void;
    onAvatarRemoved?: () => void;
    size?: 'sm' | 'md' | 'lg' | 'xl';
    userName?: string;
    userId: string;
    disabled?: boolean;
    className?: string;
}

const AvatarUploader: React.FC<AvatarUploaderProps> = ({
                                                           currentAvatar,
                                                           onAvatarUploaded,
                                                           onAvatarRemoved,
                                                           size = 'lg',
                                                           userName = '',
                                                           userId,
                                                           disabled = false,
                                                           className = ''
                                                       }) => {
    const { orgSettings } = useConfig();
    const fileInputRef = useRef<HTMLInputElement>(null);

    const [previewUrl, setPreviewUrl] = useState<string | undefined>(currentAvatar);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [error, setError] = useState<string>('');
    const [isDragging, setIsDragging] = useState(false);
    const [showSuccess, setShowSuccess] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Tailles des avatars avec design amélioré
    const sizes = {
        sm: {
            container: 'w-16 h-16',
            text: 'text-lg',
            icon: 16,
            uploadIcon: 14,
            button: 'w-6 h-6',
            removeButton: 'w-5 h-5'
        },
        md: {
            container: 'w-24 h-24',
            text: 'text-xl',
            icon: 20,
            uploadIcon: 16,
            button: 'w-8 h-8',
            removeButton: 'w-6 h-6'
        },
        lg: {
            container: 'w-32 h-32',
            text: 'text-2xl',
            icon: 24,
            uploadIcon: 20,
            button: 'w-10 h-10',
            removeButton: 'w-7 h-7'
        },
        xl: {
            container: 'w-40 h-40',
            text: 'text-3xl',
            icon: 28,
            uploadIcon: 24,
            button: 'w-12 h-12',
            removeButton: 'w-8 h-8'
        }
    };

    const sizeConfig = sizes[size];

    // Déclencher la sélection de fichier
    const handleSelectFile = () => {
        if (disabled) return;
        fileInputRef.current?.click();
    };

    // Validation du fichier
    const validateFile = (file: File): string | null => {
        // Vérifier le type
        if (!file.type.startsWith('image/')) {
            return 'Seules les images sont autorisées (JPG, PNG, WEBP)';
        }

        // Vérifier la taille (5MB max)
        if (file.size > 5 * 1024 * 1024) {
            return 'L\'image ne doit pas dépasser 5MB';
        }

        return null;
    };

    // Gérer la sélection de fichier
    const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        const validationError = validateFile(file);
        if (validationError) {
            setError(validationError);
            return;
        }

        await handleUpload(file);
        e.target.value = ''; // Reset input
    };

    // Gestion du drag & drop
    const handleDragOver = (e: React.DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        if (!disabled) {
            setIsDragging(true);
        }
    };

    const handleDragLeave = (e: React.DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
    };

    const handleDrop = async (e: React.DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);

        if (disabled) return;

        const files = e.dataTransfer.files;
        const file = files[0];

        if (!file) return;

        const validationError = validateFile(file);
        if (validationError) {
            setError(validationError);
            return;
        }

        await handleUpload(file);
    };

    // Upload du fichier
    const handleUpload = async (file: File) => {
        setError('');
        setIsUploading(true);
        setUploadProgress(0);
        setShowSuccess(false);

        // Créer une prévisualisation locale immédiate
        const localPreview = URL.createObjectURL(file);
        setPreviewUrl(localPreview);

        try {
            const response = await cloudinaryService.uploadAvatar(
                file,
                userId,
                (progress: UploadProgress) => {
                    setUploadProgress(progress.percentage);
                }
            );

            // Libérer la mémoire de la prévisualisation locale
            URL.revokeObjectURL(localPreview);

            if (response.success && response.url) {
                setPreviewUrl(response.url);
                onAvatarUploaded(response.url);
                setShowSuccess(true);

                // Masquer le message de succès après 3 secondes
                setTimeout(() => setShowSuccess(false), 3000);
            } else {
                setError(response.error || 'Erreur lors de l\'upload');
                setPreviewUrl(currentAvatar); // Revenir à l'avatar précédent
            }
        } catch (error) {
            console.error('Erreur upload avatar:', error);
            setError('Erreur inattendue lors de l\'upload');
            setPreviewUrl(currentAvatar);
        } finally {
            setIsUploading(false);
            setUploadProgress(0);
        }
    };

    // Supprimer l'avatar
    const handleRemoveAvatar = () => {
        if (disabled) return;

        setPreviewUrl(undefined);
        setError('');
        setShowSuccess(false);

        if (onAvatarRemoved) {
            onAvatarRemoved();
        }
    };

    // Générer les initiales du nom
    const getInitials = (name: string): string => {
        return name
            .split(' ')
            .map(n => n.charAt(0))
            .join('')
            .toUpperCase()
            .slice(0, 2);
    };

    return (
        <div className={`flex flex-col items-center space-y-4 ${className}`}>
            <input
                ref={fileInputRef}
                type="file"
                accept="image/jpeg,image/png,image/webp"
                onChange={handleFileChange}
                className="hidden"
                disabled={disabled}
            />

            {/* Container de l'avatar avec drag & drop */}
            <div className="relative group">
                <div
                    className={`${sizeConfig.container} rounded-full overflow-hidden border-4 cursor-pointer transition-all duration-300 relative ${
                        disabled
                            ? 'opacity-50 cursor-not-allowed border-gray-300'
                            : isDragging
                                ? 'scale-105 shadow-2xl'
                                : 'hover:scale-105 hover:shadow-xl'
                    } ${isDragging ? 'border-dashed' : 'border-solid'}`}
                    style={{
                        borderColor: disabled
                            ? '#d1d5db'
                            : isDragging
                                ? primaryColor
                                : previewUrl
                                    ? primaryColor
                                    : '#e5e7eb'
                    }}
                    onClick={handleSelectFile}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                >
                    {/* Image ou placeholder */}
                    {previewUrl ? (
                        <img
                            src={previewUrl}
                            alt={userName || 'Avatar'}
                            className="w-full h-full object-cover"
                        />
                    ) : (
                        <div
                            className={`w-full h-full flex items-center justify-center transition-colors ${
                                isDragging ? 'bg-blue-50' : 'bg-gray-50'
                            }`}
                            style={{
                                backgroundColor: isDragging
                                    ? `${primaryColor}10`
                                    : `${primaryColor}05`
                            }}
                        >
                            {userName ? (
                                <span
                                    className={`font-bold ${sizeConfig.text} transition-colors`}
                                    style={{
                                        color: isDragging ? primaryColor : '#9ca3af'
                                    }}
                                >
                                    {getInitials(userName)}
                                </span>
                            ) : (
                                <User
                                    size={sizeConfig.icon}
                                    style={{
                                        color: isDragging ? primaryColor : '#9ca3af'
                                    }}
                                />
                            )}
                        </div>
                    )}

                    {/* Overlay avec icône au survol */}
                    {!disabled && !isUploading && (
                        <div className={`absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center ${isDragging ? 'opacity-100' : ''}`}>
                            <div className="text-center text-white cursor-pointer">
                                <Camera
                                    size={sizeConfig.icon}
                                    className="mx-auto mb-1"
                                />
                                <span className="text-xs font-medium">
                                    {isDragging ? 'Déposez ici' : 'Changer'}
                                </span>
                            </div>
                        </div>
                    )}

                    {/* Barre de progression pendant l'upload */}
                    {isUploading && (
                        <div className="absolute inset-0 bg-black bg-opacity-80 flex items-center justify-center">
                            <div className="text-center text-white">
                                <div className="relative w-16 h-16 mx-auto mb-2">
                                    <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 64 64">
                                        <circle
                                            cx="32"
                                            cy="32"
                                            r="28"
                                            stroke="rgba(255,255,255,0.3)"
                                            strokeWidth="4"
                                            fill="none"
                                        />
                                        <circle
                                            cx="32"
                                            cy="32"
                                            r="28"
                                            stroke={primaryColor}
                                            strokeWidth="4"
                                            fill="none"
                                            strokeDasharray={`${2 * Math.PI * 28}`}
                                            strokeDashoffset={`${2 * Math.PI * 28 * (1 - uploadProgress / 100)}`}
                                            strokeLinecap="round"
                                            className="transition-all duration-300"
                                        />
                                    </svg>
                                    <div className="absolute inset-0 flex items-center justify-center">
                                        <span className="text-white text-sm font-bold">
                                            {uploadProgress}%
                                        </span>
                                    </div>
                                </div>
                                <span className="text-xs">Upload en cours...</span>
                            </div>
                        </div>
                    )}
                </div>

                {/* Bouton de suppression */}
                {previewUrl && !disabled && !isUploading && (
                    <button
                        onClick={(e) => {
                            e.stopPropagation();
                            handleRemoveAvatar();
                        }}
                        className={`absolute -top-2 -right-2 ${sizeConfig.removeButton} rounded-full bg-red-500 text-white flex items-center justify-center shadow-lg hover:bg-red-600 hover:scale-110 transition-all duration-200 z-10`}
                    >
                        <X size={size === 'sm' ? 12 : size === 'md' ? 14 : 16} />
                    </button>
                )}

                {/* Bouton d'upload flottant */}
                {!disabled && !isUploading && (
                    <button
                        onClick={handleSelectFile}
                        className={`absolute -bottom-2 -right-2 ${sizeConfig.button} rounded-full text-white flex items-center justify-center shadow-lg transition-all duration-200 hover:scale-110 hover:shadow-xl`}
                        style={{ backgroundColor: primaryColor }}
                    >
                        <Upload size={sizeConfig.uploadIcon} />
                    </button>
                )}
            </div>

            {/* Instructions améliorées */}
            {!disabled && (
                <div className="text-center max-w-xs">
                    <p className="text-sm text-gray-600 mb-1 font-medium">
                        {previewUrl ? 'Cliquez pour changer' : 'Glissez-déposez ou cliquez'}
                    </p>
                    <p className="text-xs text-gray-500">
                        JPG, PNG, WEBP • Max 5MB • Min 100x100px
                    </p>
                </div>
            )}

            {/* Message d'erreur stylisé */}
            {error && (
                <div className="bg-red-50 border-l-4 border-red-400 rounded-lg p-3 max-w-xs w-full">
                    <div className="flex items-start">
                        <AlertCircle className="h-5 w-5 text-red-400 mr-2 flex-shrink-0 mt-0.5" />
                        <p className="text-red-700 text-sm font-medium">{error}</p>
                    </div>
                </div>
            )}

            {/* Message de succès stylisé */}
            {showSuccess && !isUploading && !error && (
                <div className="bg-green-50 border-l-4 border-green-400 rounded-lg p-3 max-w-xs w-full animate-fadeIn">
                    <div className="flex items-start">
                        <CheckCircle className="h-5 w-5 text-green-400 mr-2 flex-shrink-0 mt-0.5" />
                        <p className="text-green-700 text-sm font-medium">
                            Photo mise à jour avec succès !
                        </p>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AvatarUploader;
// END OF FILE: src/components/common/AvatarUploader.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/CommentModal.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext.tsx';
import { X, Star, Send, AlertCircle } from 'lucide-react';

interface CommentModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (comment: { texte: string; note: number; nomUser: string }) => Promise<void>;
    bookTitle: string;
    isAuthenticated: boolean;
    onLoginRequired?: () => void;
    currentUserName?: string; // Nom de l'utilisateur connecté
}

const CommentModal: React.FC<CommentModalProps> = ({
                                                       isOpen,
                                                       onClose,
                                                       onSubmit,
                                                       bookTitle,
                                                       isAuthenticated,
                                                       onLoginRequired,
                                                       currentUserName = ''
                                                   }) => {
    const { orgSettings } = useConfig();
    const [note, setNote] = useState<number>(5);
    const [hoverNote, setHoverNote] = useState<number>(0);
    const [texte, setTexte] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        if (!isAuthenticated) {
            onLoginRequired?.();
            return;
        }

        if (!texte.trim()) {
            setError('Veuillez saisir un commentaire');
            return;
        }

        if (texte.trim().length < 10) {
            setError('Le commentaire doit contenir au moins 10 caractères');
            return;
        }

        if (texte.trim().length > 500) {
            setError('Le commentaire ne peut pas dépasser 500 caractères');
            return;
        }

        setIsSubmitting(true);
        setError('');

        try {
            await onSubmit({
                texte: texte.trim(),
                note: note,
                nomUser: currentUserName || 'Utilisateur anonyme'
            });

            // Réinitialiser le formulaire
            setTexte('');
            setNote(5);
            onClose();
        } catch {
            setError('Erreur lors de l\'envoi du commentaire. Veuillez réessayer.');
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleClose = () => {
        if (!isSubmitting) {
            setTexte('');
            setNote(5);
            setError('');
            onClose();
        }
    };

    // Évaluation textuelle de la note
    const getRatingText = (rating: number) => {
        switch (rating) {
            case 1: return 'Très décevant';
            case 2: return 'Décevant';
            case 3: return 'Correct';
            case 4: return 'Bon';
            case 5: return 'Excellent';
            default: return '';
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div
                className="bg-white rounded-2xl shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto"
                onClick={(e) => e.stopPropagation()}
            >
                {/* En-tête */}
                <div className="flex items-center justify-between p-6 border-b border-gray-200">
                    <div>
                        <h2 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                            Donner mon avis
                        </h2>
                        <p className="text-gray-600 mt-1">
                            Sur "{bookTitle}"
                        </p>
                    </div>
                    <button
                        onClick={handleClose}
                        disabled={isSubmitting}
                        className="p-2 rounded-full cursor-pointer hover:bg-gray-100 transition-colors disabled:opacity-50"
                    >
                        <X className="w-6 h-6 text-gray-500" />
                    </button>
                </div>

                {/* Contenu */}
                <form onSubmit={handleSubmit} className="p-6">
                    {/* Alerte si non authentifié */}
                    {!isAuthenticated && (
                        <div className="mb-6 bg-orange-50 border border-orange-200 rounded-xl p-4">
                            <div className="flex items-start">
                                <AlertCircle className="w-5 h-5 text-orange-600 mr-3 mt-0.5 flex-shrink-0" />
                                <div>
                                    <h3 className="font-semibold text-orange-800 mb-1">
                                        Connexion requise
                                    </h3>
                                    <p className="text-orange-700 text-sm">
                                        Vous devez vous connecter pour pouvoir laisser un commentaire et une note.
                                    </p>
                                    <button
                                        type="button"
                                        onClick={onLoginRequired}
                                        className="mt-3 text-sm font-medium text-orange-600 hover:text-orange-800 underline"
                                    >
                                        Se connecter
                                    </button>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Système de notation */}
                    <div className="mb-6">
                        <label className="block text-sm font-semibold text-gray-700 mb-3">
                            Votre note
                        </label>
                        <div className="flex items-center space-x-3">
                            <div className="flex items-center space-x-1">
                                {[1, 2, 3, 4, 5].map((star) => (
                                    <button
                                        key={star}
                                        type="button"
                                        className="focus:outline-none transition-all duration-150 hover:scale-110"
                                        onMouseEnter={() => setHoverNote(star)}
                                        onMouseLeave={() => setHoverNote(0)}
                                        onClick={() => setNote(star)}
                                        disabled={!isAuthenticated}
                                    >
                                        <Star
                                            className={`w-8 h-8 transition-colors duration-150 ${
                                                star <= (hoverNote || note)
                                                    ? 'fill-current text-yellow-400'
                                                    : 'text-gray-300'
                                            } ${!isAuthenticated ? 'opacity-50' : 'cursor-pointer'}`}
                                        />
                                    </button>
                                ))}
                            </div>
                            <div className="ml-4">
                                <span className="text-sm text-gray-600 font-medium">
                                    {note} étoile{note > 1 ? 's' : ''}
                                </span>
                                <p className="text-xs text-gray-500 mt-1">
                                    {getRatingText(hoverNote || note)}
                                </p>
                            </div>
                        </div>
                    </div>

                    {/* Zone de commentaire */}
                    <div className="mb-6">
                        <label className="block text-sm font-semibold text-gray-700 mb-3">
                            Votre commentaire
                        </label>
                        <textarea
                            value={texte}
                            onChange={(e) => {
                                setTexte(e.target.value);
                                setError('');
                            }}
                            placeholder={
                                isAuthenticated
                                    ? "Partagez votre expérience avec ce livre... Qu'avez-vous aimé ? Qu'est-ce qui vous a marqué ?"
                                    : "Connectez-vous pour laisser un commentaire"
                            }
                            rows={6}
                            maxLength={500}
                            disabled={!isAuthenticated}
                            className={`w-full p-4 border rounded-xl resize-none transition-all duration-200 ${
                                error
                                    ? 'border-red-300 focus:border-red-500 focus:ring-red-500'
                                    : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500'
                            } focus:ring-2 focus:ring-opacity-50 disabled:bg-gray-50 disabled:text-gray-500`}
                        />
                        <div className="flex justify-between mt-2">
                            <span className={`text-sm ${error ? 'text-red-600 font-medium' : 'text-gray-500'}`}>
                                {error || `${texte.length}/500 caractères`}
                            </span>
                            {texte.length > 0 && texte.length < 10 && (
                                <span className="text-sm text-amber-600">
                                    {10 - texte.length} caractères minimum
                                </span>
                            )}
                        </div>
                    </div>

                    {/* Conseils */}
                    <div className="mb-6 bg-gray-50 rounded-xl p-4">
                        <h4 className="font-medium text-gray-800 mb-2 flex items-center">
                            <span className="mr-2">💡</span>
                            Conseils pour un bon commentaire
                        </h4>
                        <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Décrivez ce que vous avez aimé ou moins aimé dans ce livre</li>
                            <li>• Mentionnez le style d'écriture, l'intrigue, les personnages</li>
                            <li>• Restez respectueux et constructif dans vos critiques</li>
                            <li>• Évitez les spoilers importants qui gâcheraient la lecture</li>
                        </ul>
                    </div>

                    {/* Prévisualisation si texte saisi */}
                    {texte.trim() && texte.length >= 10 && (
                        <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-xl">
                            <h4 className="font-medium text-blue-800 mb-2">Aperçu de votre avis :</h4>
                            <div className="flex items-center mb-2">
                                <div className="flex items-center mr-3">
                                    {[1, 2, 3, 4, 5].map((star) => (
                                        <Star
                                            key={star}
                                            className={`w-4 h-4 ${
                                                star <= note
                                                    ? 'fill-current text-yellow-400'
                                                    : 'text-gray-300'
                                            }`}
                                        />
                                    ))}
                                </div>
                                <span className="text-sm font-medium text-blue-800">
                                    {currentUserName || 'Votre nom'}
                                </span>
                            </div>
                            <p className="text-sm text-blue-700 italic">"{texte.trim()}"</p>
                        </div>
                    )}

                    {/* Actions */}
                    <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t border-gray-200">
                        <button
                            type="button"
                            onClick={handleClose}
                            disabled={isSubmitting}
                            className="sm:w-auto px-6 py-3 cursor-pointer rounded-xl font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 transition-colors disabled:opacity-50"
                        >
                            Annuler
                        </button>

                        <button
                            type="submit"
                            disabled={!isAuthenticated || isSubmitting || !texte.trim() || texte.length < 10}
                            className="flex-1 sm:flex-none cursor-pointer px-8 py-3 rounded-xl font-semibold text-white transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
                            style={{
                                backgroundColor: isAuthenticated && !isSubmitting && texte.trim().length >= 10
                                    ? primaryColor
                                    : '#9ca3af'
                            }}
                        >
                            {isSubmitting ? (
                                <>
                                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                    Envoi en cours...
                                </>
                            ) : (
                                <>
                                    <Send className="w-5 h-5 mr-2" />
                                    Publier mon avis
                                </>
                            )}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default CommentModal;
// END OF FILE: src/components/common/CommentModal.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/CommentsSection.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext.tsx';
import { CommentWithUserData } from '../books/BookCard.tsx';
import { Timestamp } from 'firebase/firestore';
import {
    MessageSquare,
    Star,
    Calendar,
    User,
    ThumbsUp,
    MoreHorizontal,
    Filter
} from 'lucide-react';

interface CommentsSectionProps {
    comments: CommentWithUserData[];
    onOpenCommentModal: () => void;
    onHelpfulClick?: (commentId: string) => void;
    isAuthenticated: boolean;
}

type SortOption = 'newest' | 'oldest' | 'rating-high' | 'rating-low' | 'helpful';
type FilterOption = 'all' | '5stars' | '4stars' | '3stars' | '2stars' | '1star';

const CommentsSection: React.FC<CommentsSectionProps> = ({
                                                             comments,
                                                             onOpenCommentModal,
                                                             onHelpfulClick,
                                                             isAuthenticated
                                                         }) => {
    const { orgSettings } = useConfig();
    const [sortBy, setSortBy] = useState<SortOption>('newest');
    const [filterBy, setFilterBy] = useState<FilterOption>('all');
    const [showFilters, setShowFilters] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    // Calculer les statistiques des évaluations (utilise field 'note')
    const ratingStats = {
        average: comments.length > 0
            ? comments.reduce((sum, comment) => sum + comment.note, 0) / comments.length
            : 0,
        distribution: [5, 4, 3, 2, 1].map(rating =>
            comments.filter(comment => comment.note === rating).length
        )
    };

    // Filtrer et trier les commentaires
    const getFilteredAndSortedComments = () => {
        let filtered = [...comments];

        // Appliquer le filtre
        if (filterBy !== 'all') {
            const targetRating = parseInt(filterBy.charAt(0));
            filtered = filtered.filter(comment => comment.note === targetRating);
        }

        // Appliquer le tri avec Timestamp
        filtered.sort((a, b) => {
            switch (sortBy) {
                case 'oldest':
                    return a.heure.toMillis() - b.heure.toMillis();
                case 'rating-high':
                    return b.note - a.note;
                case 'rating-low':
                    return a.note - b.note;
                case 'helpful':
                    return (b.helpful || 0) - (a.helpful || 0);
                default: // newest
                    return b.heure.toMillis() - a.heure.toMillis();
            }
        });

        return filtered;
    };

    const filteredComments = getFilteredAndSortedComments();

    // Formatage de date avec Timestamp
    const formatDate = (timestamp: Timestamp) => {
        const date = timestamp.toDate();
        const now = new Date();
        const diffInDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
        const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
        const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));

        if (diffInMinutes < 1) return 'À l\'instant';
        if (diffInMinutes < 60) return `Il y a ${diffInMinutes} minute${diffInMinutes > 1 ? 's' : ''}`;
        if (diffInHours < 24) return `Il y a ${diffInHours} heure${diffInHours > 1 ? 's' : ''}`;
        if (diffInDays === 0) return 'Aujourd\'hui';
        if (diffInDays === 1) return 'Hier';
        if (diffInDays < 7) return `Il y a ${diffInDays} jour${diffInDays > 1 ? 's' : ''}`;
        if (diffInDays < 30) return `Il y a ${Math.floor(diffInDays / 7)} semaine${Math.floor(diffInDays / 7) > 1 ? 's' : ''}`;
        if (diffInDays < 365) return `Il y a ${Math.floor(diffInDays / 30)} mois`;
        return date.toLocaleDateString('fr-FR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    const getRatingPercentage = (starCount: number) => {
        return comments.length > 0 ? (ratingStats.distribution[5 - starCount] / comments.length) * 100 : 0;
    };

    return (
        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 lg:p-8">
            {/* En-tête */}
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-8">
                <div className="flex items-center mb-4 lg:mb-0">
                    <div
                        className="w-10 h-10 rounded-full flex items-center justify-center mr-4"
                        style={{ backgroundColor: `${primaryColor}15` }}
                    >
                        <MessageSquare className="w-5 h-5" style={{ color: primaryColor }} />
                    </div>
                    <div>
                        <h2 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                            Avis des lecteurs
                        </h2>
                        <p className="text-gray-600">
                            {comments.length} commentaire{comments.length !== 1 ? 's' : ''}
                        </p>
                    </div>
                </div>
            </div>

            {/* Statistiques des évaluations */}
            {comments.length > 0 && (
                <div className="bg-gray-50 rounded-xl p-6 mb-8">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {/* Note moyenne */}
                        <div className="text-center lg:text-left">
                            <div className="flex items-center justify-center lg:justify-start mb-4">
                                <span className="text-4xl font-bold mr-4" style={{ color: primaryColor }}>
                                    {ratingStats.average.toFixed(1)}
                                </span>
                                <div>
                                    <div className="flex items-center mb-1">
                                        {[1, 2, 3, 4, 5].map((star) => (
                                            <Star
                                                key={star}
                                                className={`w-5 h-5 ${
                                                    star <= ratingStats.average
                                                        ? 'fill-current text-yellow-400'
                                                        : 'text-gray-300'
                                                }`}
                                            />
                                        ))}
                                    </div>
                                    <p className="text-sm text-gray-600">
                                        Basé sur {comments.length} avis
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Distribution des notes */}
                        <div className="space-y-2">
                            {[5, 4, 3, 2, 1].map((rating, index) => (
                                <div key={rating} className="flex items-center">
                                    <span className="text-sm text-gray-600 w-8">{rating}</span>
                                    <Star className="w-4 h-4 text-yellow-400 fill-current mr-2" />
                                    <div className="flex-1 bg-gray-200 rounded-full h-2 mr-3">
                                        <div
                                            className="h-2 rounded-full transition-all duration-500"
                                            style={{
                                                width: `${getRatingPercentage(rating)}%`,
                                                backgroundColor: primaryColor
                                            }}
                                        />
                                    </div>
                                    <span className="text-sm text-gray-600 w-8">
                                        {ratingStats.distribution[index]}
                                    </span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}

            {/* Filtres et tri */}
            {comments.length > 1 && (
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 p-4 bg-gray-50 rounded-xl">
                    <div className="flex items-center space-x-4 mb-4 sm:mb-0">
                        <div className="relative">
                            <button
                                onClick={() => setShowFilters(!showFilters)}
                                className="flex items-center px-4 py-2 rounded-lg bg-white border border-gray-300 hover:bg-gray-50 transition-colors"
                            >
                                <Filter className="w-4 h-4 mr-2" />
                                Filtrer
                            </button>

                            {showFilters && (
                                <div className="absolute top-full left-0 mt-2 w-48 bg-white rounded-lg shadow-xl border z-50">
                                    <div className="p-2">
                                        {[
                                            { value: 'all', label: 'Tous les avis' },
                                            { value: '5stars', label: '5 étoiles' },
                                            { value: '4stars', label: '4 étoiles' },
                                            { value: '3stars', label: '3 étoiles' },
                                            { value: '2stars', label: '2 étoiles' },
                                            { value: '1star', label: '1 étoile' }
                                        ].map((option) => (
                                            <button
                                                key={option.value}
                                                onClick={() => {
                                                    setFilterBy(option.value as FilterOption);
                                                    setShowFilters(false);
                                                }}
                                                className={`w-full text-left px-3 py-2 rounded hover:bg-gray-100 transition-colors ${
                                                    filterBy === option.value ? 'bg-gray-100 font-medium' : ''
                                                }`}
                                            >
                                                {option.label}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>

                        <select
                            value={sortBy}
                            onChange={(e) => setSortBy(e.target.value as SortOption)}
                            className="px-4 py-2 rounded-lg bg-white border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        >
                            <option value="newest">Plus récents</option>
                            <option value="oldest">Plus anciens</option>
                            <option value="rating-high">Note décroissante</option>
                            <option value="rating-low">Note croissante</option>
                            <option value="helpful">Plus utiles</option>
                        </select>
                    </div>

                    <span className="text-sm text-gray-600">
                        {filteredComments.length} avis affiché{filteredComments.length !== 1 ? 's' : ''}
                    </span>
                </div>
            )}

            {/* Liste des commentaires */}
            <div className="space-y-6">
                {filteredComments.length > 0 ? (
                    filteredComments.map((comment) => (
                        <div key={comment.id} className="border border-gray-200 rounded-xl p-6 hover:shadow-md transition-shadow">
                            {/* En-tête du commentaire */}
                            <div className="flex items-start justify-between mb-4">
                                <div className="flex items-center">
                                    {comment.userAvatar ? (
                                        <img
                                            src={comment.userAvatar}
                                            alt={comment.userName || comment.nomUser}
                                            className="w-10 h-10 rounded-full object-cover mr-3"
                                        />
                                    ) : (
                                        <div
                                            className="w-10 h-10 rounded-full flex items-center justify-center mr-3"
                                            style={{ backgroundColor: `${primaryColor}15` }}
                                        >
                                            <User className="w-5 h-5" style={{ color: primaryColor }} />
                                        </div>
                                    )}
                                    <div>
                                        <h4 className="font-semibold text-gray-900">
                                            {comment.userName || comment.nomUser || 'Lecteur anonyme'}
                                        </h4>
                                        <div className="flex items-center mt-1">
                                            <div className="flex items-center mr-3">
                                                {[1, 2, 3, 4, 5].map((star) => (
                                                    <Star
                                                        key={star}
                                                        className={`w-4 h-4 ${
                                                            star <= comment.note
                                                                ? 'fill-current text-yellow-400'
                                                                : 'text-gray-300'
                                                        }`}
                                                    />
                                                ))}
                                            </div>
                                            <span className="text-sm text-gray-500 flex items-center">
                                                <Calendar className="w-4 h-4 mr-1" />
                                                {formatDate(comment.heure)}
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <button className="p-2 rounded-full hover:bg-gray-100 transition-colors">
                                    <MoreHorizontal className="w-5 h-5 text-gray-400" />
                                </button>
                            </div>

                            {/* Contenu du commentaire */}
                            <p className="text-gray-700 leading-relaxed mb-4">
                                {comment.texte}
                            </p>

                            {/* Actions du commentaire */}
                            <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                                <button
                                    onClick={() => onHelpfulClick?.(comment.id)}
                                    disabled={!isAuthenticated}
                                    className="flex items-center text-sm text-gray-600 hover:text-gray-800 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                >
                                    <ThumbsUp className="w-4 h-4 mr-2" />
                                    Utile ({comment.helpful || 0})
                                </button>

                                {!isAuthenticated && (
                                    <span className="text-xs text-gray-400">
                                        Connectez-vous pour interagir
                                    </span>
                                )}
                            </div>
                        </div>
                    ))
                ) : (
                    <div className="text-center py-12">
                        {comments.length === 0 ? (
                            <div>
                                <MessageSquare className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                                <h3 className="text-lg font-semibold text-gray-600 mb-2">
                                    Aucun avis pour le moment
                                </h3>
                                <p className="text-gray-500 mb-6">
                                    Soyez le premier à partager votre opinion sur ce livre !
                                </p>
                                <button
                                    onClick={onOpenCommentModal}
                                    className="px-6 py-3 rounded-xl font-semibold text-white transition-all duration-200 hover:shadow-lg"
                                    style={{ backgroundColor: primaryColor }}
                                >
                                    Écrire le premier avis
                                </button>
                            </div>
                        ) : (
                            <div>
                                <Filter className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                                <h3 className="text-lg font-semibold text-gray-600 mb-2">
                                    Aucun avis ne correspond aux filtres
                                </h3>
                                <p className="text-gray-500">
                                    Essayez de modifier vos critères de filtrage
                                </p>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

export default CommentsSection;
// END OF FILE: src/components/common/CommentsSection.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/DepartmentFilter.tsx

import React, { useState, useEffect } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase.ts';
import { useConfig } from '../../contexts/ConfigContext.tsx';
import { Filter, ChevronDown, X, Check, Image as ImageIcon } from 'lucide-react';

interface Department {
    id: string;
    nom: string;
    image?: string;
}

interface DepartmentFilterProps {
    selectedDepartments: string[];
    onDepartmentChange: (departments: string[]) => void;
    className?: string;
}

const DepartmentFilter: React.FC<DepartmentFilterProps> = ({
                                                               selectedDepartments,
                                                               onDepartmentChange,
                                                               className = ""
                                                           }) => {
    const { orgSettings } = useConfig();
    const [departments, setDepartments] = useState<Department[]>([]);
    const [loading, setLoading] = useState(true);
    const [isOpen, setIsOpen] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    useEffect(() => {
        const fetchDepartments = async () => {
            try {
                const querySnapshot = await getDocs(collection(db, 'Departements'));
                const departmentsList: Department[] = [];

                querySnapshot.forEach((doc) => {
                    departmentsList.push({
                        id: doc.id,
                        ...doc.data()
                    } as Department);
                });

                // Trier par nom
                departmentsList.sort((a, b) => a.nom.localeCompare(b.nom));
                setDepartments(departmentsList);
            } catch (error) {
                console.error('Erreur lors du chargement des départements:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchDepartments();
    }, []);

    // Filtrer les départements par terme de recherche
    const filteredDepartments = departments.filter(dept =>
        dept.nom.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Gérer la sélection d'un département
    const handleDepartmentToggle = (departmentId: string) => {
        const department = departments.find(d => d.id === departmentId);
        if (!department) return;

        const departmentName = department.nom;

        if (selectedDepartments.includes(departmentName)) {
            const updatedSelection = selectedDepartments.filter(name => name !== departmentName);
            onDepartmentChange(updatedSelection);
        } else {
            const updatedSelection = [...selectedDepartments, departmentName];
            onDepartmentChange(updatedSelection);
        }
    };

    // Effacer tous les filtres
    const clearAllFilters = () => {
        onDepartmentChange([]);
    };

    // Sélectionner tous les départements
    const selectAllDepartments = () => {
        const allDepartmentNames = departments.map(dept => dept.nom);
        onDepartmentChange(allDepartmentNames);
    };

    // Fermer le dropdown quand on clique ailleurs
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            const target = event.target as HTMLElement;
            if (!target.closest('.department-filter-dropdown')) {
                setIsOpen(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    if (loading) {
        return (
            <div className={`bg-white rounded-xl border border-gray-200 p-4 ${className}`}>
                <div className="animate-pulse">
                    <div className="h-4 bg-gray-200 rounded w-32 mb-3"></div>
                    <div className="h-12 bg-gray-200 rounded"></div>
                </div>
            </div>
        );
    }

    return (
        <div className={`bg-white rounded-xl border border-gray-200 shadow-sm ${className}`}>
            {/* En-tête du filtre */}
            <div className="p-4 border-b border-gray-100">
                <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center">
                        <div
                            className="w-8 h-8 rounded-lg flex items-center justify-center mr-3"
                            style={{ backgroundColor: `${primaryColor}15` }}
                        >
                            <Filter className="w-4 h-4" style={{ color: primaryColor }} />
                        </div>
                        <h3 className="font-semibold text-gray-800">Départements</h3>
                    </div>

                    {selectedDepartments.length > 0 && (
                        <button
                            onClick={clearAllFilters}
                            className="text-xs text-red-500 cursor-pointer hover:text-red-700 flex items-center transition-colors font-medium"
                        >
                            <X className="w-3 h-3 mr-1" />
                            Effacer
                        </button>
                    )}
                </div>

                {/* Dropdown de sélection */}
                <div className="relative department-filter-dropdown">
                    <button
                        onClick={() => setIsOpen(!isOpen)}
                        className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:border-gray-300 transition-all duration-200 bg-gray-50 hover:bg-gray-100"
                    >
                        <span className={`${selectedDepartments.length === 0 ? 'text-gray-500' : 'text-gray-700 font-medium'}`}>
                            {selectedDepartments.length === 0
                                ? 'Tous les départements'
                                : selectedDepartments.length === departments.length
                                    ? 'Tous les départements'
                                    : `${selectedDepartments.length} sélectionné${selectedDepartments.length > 1 ? 's' : ''}`
                            }
                        </span>
                        <ChevronDown
                            className={`w-4 h-4 text-gray-400 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
                        />
                    </button>

                    {/* Liste déroulante */}
                    {isOpen && (
                        <div className="absolute top-full left-0 right-0 mt-2 bg-white border border-gray-200 rounded-lg shadow-xl z-50 max-h-80 overflow-hidden">
                            {/* Barre de recherche */}
                            <div className="p-3 border-b border-gray-100 bg-gray-50">
                                <input
                                    type="text"
                                    placeholder="Rechercher un département..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="w-full p-2 text-sm border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-opacity-50 bg-white"
                                />
                            </div>

                            {/* Actions rapides */}
                            <div className="p-2 border-b border-gray-100 flex gap-2">
                                <button
                                    onClick={() => {
                                        selectAllDepartments();
                                        setIsOpen(false);
                                    }}
                                    className="flex-1 text-xs px-3 cursor-pointer py-2 rounded-md border border-gray-200 hover:bg-gray-50 transition-colors"
                                >
                                    Tout sélectionner
                                </button>
                                <button
                                    onClick={() => {
                                        clearAllFilters();
                                        setIsOpen(false);
                                    }}
                                    className="flex-1 text-xs px-3 cursor-pointer py-2 rounded-md border border-gray-200 hover:bg-gray-50 transition-colors"
                                >
                                    Tout désélectionner
                                </button>
                            </div>

                            {/* Liste des départements */}
                            <div className="max-h-60 overflow-y-auto">
                                {filteredDepartments.length === 0 ? (
                                    <div className="p-4 text-center text-gray-500 text-sm">
                                        Aucun département trouvé
                                    </div>
                                ) : (
                                    <div className="p-2">
                                        {filteredDepartments.map((department) => (
                                            <button
                                                key={department.id}
                                                onClick={() => handleDepartmentToggle(department.id)}
                                                className="w-full flex items-center cursor-pointer p-3 hover:bg-gray-50 rounded-lg transition-colors text-left group"
                                            >
                                                {/* Image du département */}
                                                <div className="w-8 h-8 rounded-md overflow-hidden bg-gray-100 flex items-center justify-center mr-3 flex-shrink-0">
                                                    {department.image ? (
                                                        <img
                                                            src={department.image}
                                                            alt={department.nom}
                                                            className="w-full h-full object-cover"
                                                        />
                                                    ) : (
                                                        <ImageIcon className="w-4 h-4 text-gray-400" />
                                                    )}
                                                </div>

                                                {/* Nom du département */}
                                                <div className="flex-1">
                                                    <div className="font-medium text-gray-800 group-hover:text-gray-900">
                                                        {department.nom}
                                                    </div>
                                                </div>

                                                {/* Checkbox */}
                                                <div className="flex-shrink-0">
                                                    {selectedDepartments.includes(department.id) ? (
                                                        <div
                                                            className="w-5 h-5 rounded flex items-center justify-center"
                                                            style={{ backgroundColor: primaryColor }}
                                                        >
                                                            <Check className="w-3 h-3 text-white cursor-pointer" />
                                                        </div>
                                                    ) : (
                                                        <div className="w-5 h-5 border-2 border-gray-300 rounded group-hover:border-gray-400 transition-colors"></div>
                                                    )}
                                                </div>
                                            </button>
                                        ))}
                                    </div>
                                )}
                            </div>
                        </div>
                    )}
                </div>
            </div>

            {/* Tags des départements sélectionnés */}
            {selectedDepartments.length > 0 && selectedDepartments.length < departments.length && (
                <div className="p-4">
                    <div className="flex flex-wrap gap-2">
                        {selectedDepartments.map((deptId) => {
                            const dept = departments.find(d => d.id === deptId);
                            if (!dept) return null;

                            return (
                                <div
                                    key={deptId}
                                    className="flex items-center px-3 py-1.5 rounded-full text-xs font-medium border transition-all duration-200 hover:shadow-sm"
                                    style={{
                                        backgroundColor: `${primaryColor}10`,
                                        borderColor: `${primaryColor}30`,
                                        color: primaryColor
                                    }}
                                >
                                    {/* Image miniature */}
                                    {dept.image && (
                                        <div className="w-4 h-4 rounded-full overflow-hidden mr-2">
                                            <img
                                                src={dept.image}
                                                alt={dept.nom}
                                                className="w-full h-full object-cover"
                                            />
                                        </div>
                                    )}

                                    <span className="max-w-[100px] truncate">{dept.nom}</span>

                                    <button
                                        onClick={() => handleDepartmentToggle(deptId)}
                                        className="ml-2 hover:bg-black hover:bg-opacity-10 rounded-full p-0.5 transition-colors"
                                    >
                                        <X className="w-3 h-3" />
                                    </button>
                                </div>
                            );
                        })}
                    </div>
                </div>
            )}

            {/* Statistiques */}
            <div className="px-4 pb-4">
                <div className="text-xs text-gray-500 flex items-center justify-between">
                    <span>{departments.length} département{departments.length > 1 ? 's' : ''} disponible{departments.length > 1 ? 's' : ''}</span>
                    {selectedDepartments.length > 0 && (
                        <span className="font-medium" style={{ color: primaryColor }}>
                            {selectedDepartments.length} sélectionné{selectedDepartments.length > 1 ? 's' : ''}
                        </span>
                    )}
                </div>
            </div>
        </div>
    );
};

export default DepartmentFilter;
// END OF FILE: src/components/common/DepartmentFilter.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/DragDropUploader.tsx

// src/components/ui/DragDropUploader.tsx
import React, { useState, useRef, useCallback } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { cloudinaryService, UploadProgress } from '../../services/cloudinaryService';
import { Upload, X, Eye, File, CheckCircle } from 'lucide-react';

interface UploadedFile {
    id: string;
    name: string;
    url: string;
    size: number;
    type: string;
}

interface DragDropUploaderProps {
    onFilesUploaded: (files: UploadedFile[]) => void;
    onFileRemoved?: (fileId: string) => void;
    multiple?: boolean;
    maxFiles?: number;
    folder?: string;
    maxSizeMB?: number;
    acceptedTypes?: string[];
    showPreview?: boolean;
    disabled?: boolean;
    className?: string;
    description?: string;
}

const DragDropUploader: React.FC<DragDropUploaderProps> = ({
                                                               onFilesUploaded,
                                                               onFileRemoved,
                                                               multiple = true,
                                                               maxFiles = 10,
                                                               folder = "uploads",
                                                               maxSizeMB = 20,
                                                               acceptedTypes = ['jpg', 'jpeg', 'png', 'webp', 'gif'],
                                                               showPreview = true,
                                                               disabled = false,
                                                               className = "",
                                                               description = "Glissez-déposez vos images ici ou cliquez pour sélectionner"
                                                           }) => {
    const { orgSettings } = useConfig();
    const fileInputRef = useRef<HTMLInputElement>(null);

    const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);
    const [isDragging, setIsDragging] = useState(false);
    const [uploadingFiles, setUploadingFiles] = useState<Map<string, number>>(new Map());
    const [errors, setErrors] = useState<string[]>([]);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Validation des fichiers
    const validateFiles = useCallback((files: FileList): { valid: File[]; errors: string[] } => {
        const validFiles: File[] = [];
        const newErrors: string[] = [];

        Array.from(files).forEach((file) => {
            // Vérifier le type
            const fileExtension = file.name.split('.').pop()?.toLowerCase();
            if (!acceptedTypes.includes(fileExtension || '')) {
                newErrors.push(`${file.name}: Type de fichier non autorisé`);
                return;
            }

            // Vérifier la taille
            if (file.size > maxSizeMB * 1024 * 1024) {
                newErrors.push(`${file.name}: Taille trop importante (max ${maxSizeMB}MB)`);
                return;
            }

            // Vérifier le nombre maximum
            if (uploadedFiles.length + validFiles.length >= maxFiles) {
                newErrors.push(`Nombre maximum de fichiers atteint (${maxFiles})`);
                return;
            }

            validFiles.push(file);
        });

        return { valid: validFiles, errors: newErrors };
    }, [acceptedTypes, maxSizeMB, maxFiles, uploadedFiles.length]);

    // Upload des fichiers
    const uploadFiles = async (files: File[]) => {
        if (disabled || files.length === 0) return;

        const newUploadingFiles = new Map(uploadingFiles);

        // Initialiser le progrès pour chaque fichier
        files.forEach((file) => {
            const fileId = `${file.name}_${Date.now()}_${Math.random()}`;
            newUploadingFiles.set(fileId, 0);
        });

        setUploadingFiles(newUploadingFiles);

        const uploadPromises = files.map(async (file) => {
            const fileId = `${file.name}_${Date.now()}_${Math.random()}`;

            try {
                const response = await cloudinaryService.uploadGeneral(
                    file,
                    folder,
                    (progress: UploadProgress) => {
                        setUploadingFiles(prev => new Map(prev.set(fileId, progress.percentage)));
                    }
                );

                if (response.success && response.url) {
                    const uploadedFile: UploadedFile = {
                        id: fileId,
                        name: file.name,
                        url: response.url,
                        size: file.size,
                        type: file.type
                    };

                    setUploadedFiles(prev => [...prev, uploadedFile]);
                    return uploadedFile;
                } else {
                    throw new Error(response.error || 'Erreur lors de l\'upload');
                }
            } catch (error) {
                console.error('Erreur upload:', error);
                setErrors(prev => [...prev, `${file.name}: ${error instanceof Error ? error.message : 'Erreur inconnue'}`]);
                return null;
            } finally {
                setUploadingFiles(prev => {
                    const newMap = new Map(prev);
                    newMap.delete(fileId);
                    return newMap;
                });
            }
        });

        const results = await Promise.all(uploadPromises);
        const successfulUploads = results.filter((file): file is UploadedFile => file !== null);

        if (successfulUploads.length > 0) {
            onFilesUploaded(successfulUploads);
        }
    };

    // Gestion du drag & drop
    const handleDragOver = useCallback((e: React.DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        if (!disabled) {
            setIsDragging(true);
        }
    }, [disabled]);

    const handleDragLeave = useCallback((e: React.DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);
    }, []);

    const handleDrop = useCallback(async (e: React.DragEvent) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragging(false);

        if (disabled) return;

        const files = e.dataTransfer.files;
        if (files.length === 0) return;

        setErrors([]);
        const { valid, errors } = validateFiles(files);

        if (errors.length > 0) {
            setErrors(errors);
        }

        if (valid.length > 0) {
            await uploadFiles(valid);
        }
    }, [disabled, validateFiles, uploadFiles]);

    // Gestion de la sélection de fichiers
    const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const files = e.target.files;
        if (!files || files.length === 0) return;

        setErrors([]);
        const { valid, errors } = validateFiles(files);

        if (errors.length > 0) {
            setErrors(errors);
        }

        if (valid.length > 0) {
            await uploadFiles(valid);
        }

        e.target.value = ''; // Reset input
    };

    // Supprimer un fichier
    const handleRemoveFile = (fileId: string) => {
        setUploadedFiles(prev => prev.filter(file => file.id !== fileId));
        if (onFileRemoved) {
            onFileRemoved(fileId);
        }
    };

    // Déclencher la sélection de fichiers
    const handleSelectFiles = () => {
        if (disabled) return;
        fileInputRef.current?.click();
    };

    // Formater la taille du fichier
    const formatFileSize = (bytes: number): string => {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    return (
        <div className={`w-full ${className}`}>
            <input
                ref={fileInputRef}
                type="file"
                multiple={multiple}
                accept={acceptedTypes.map(type => `image/${type}`).join(',')}
                onChange={handleFileSelect}
                className="hidden"
                disabled={disabled}
            />

            {/* Zone de drop */}
            <div
                onDragOver={handleDragOver}
                onDragLeave={handleDragLeave}
                onDrop={handleDrop}
                onClick={handleSelectFiles}
                className={`
          border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all duration-300
          ${disabled
                    ? 'border-gray-200 bg-gray-50 cursor-not-allowed opacity-50'
                    : isDragging
                        ? 'border-blue-400 bg-blue-50'
                        : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                }
        `}
                style={{
                    borderColor: !disabled && isDragging ? primaryColor : undefined,
                    backgroundColor: !disabled && isDragging ? `${primaryColor}10` : undefined
                }}
            >
                <div className="flex flex-col items-center justify-center space-y-4">
                    <div
                        className="w-20 h-20 rounded-full flex items-center justify-center"
                        style={{ backgroundColor: `${primaryColor}15` }}
                    >
                        <Upload
                            size={40}
                            style={{ color: primaryColor }}
                        />
                    </div>

                    <div>
                        <p className="text-lg font-medium text-gray-700 mb-2">
                            {description}
                        </p>
                        <p className="text-sm text-gray-500 mb-4">
                            {acceptedTypes.map(t => t.toUpperCase()).join(', ')} - Max {maxSizeMB}MB
                        </p>
                        <p className="text-xs text-gray-400">
                            {multiple ? `Jusqu'à ${maxFiles} fichiers` : '1 fichier seulement'}
                        </p>
                    </div>
                </div>
            </div>

            {/* Messages d'erreur */}
            {errors.length > 0 && (
                <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-start space-x-2">
                        <X size={16} className="text-red-600 mt-0.5 flex-shrink-0" />
                        <div>
                            <h4 className="text-sm font-medium text-red-800 mb-1">Erreurs d'upload :</h4>
                            <ul className="text-sm text-red-600 space-y-1">
                                {errors.map((error, index) => (
                                    <li key={index}>• {error}</li>
                                ))}
                            </ul>
                        </div>
                    </div>
                    <button
                        onClick={() => setErrors([])}
                        className="mt-2 text-xs text-red-600 hover:text-red-800 underline"
                    >
                        Masquer les erreurs
                    </button>
                </div>
            )}

            {/* Fichiers en cours d'upload */}
            {uploadingFiles.size > 0 && (
                <div className="mt-4 space-y-2">
                    <h4 className="text-sm font-medium text-gray-700">Upload en cours...</h4>
                    {Array.from(uploadingFiles.entries()).map(([fileId, progress]) => (
                        <div key={fileId} className="bg-gray-50 p-3 rounded-lg">
                            <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-gray-600 truncate">
                  {fileId.split('_')[0]}
                </span>
                                <span className="text-xs text-gray-500">{progress.toFixed(0)}%</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                                <div
                                    className="h-2 rounded-full transition-all duration-300"
                                    style={{
                                        width: `${progress}%`,
                                        backgroundColor: primaryColor
                                    }}
                                />
                            </div>
                        </div>
                    ))}
                </div>
            )}

            {/* Fichiers uploadés */}
            {uploadedFiles.length > 0 && showPreview && (
                <div className="mt-6">
                    <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                        <CheckCircle size={16} className="text-green-600 mr-2" />
                        Fichiers uploadés ({uploadedFiles.length})
                    </h4>

                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {uploadedFiles.map((file) => (
                            <div
                                key={file.id}
                                className="relative bg-white border border-gray-200 rounded-lg p-3 hover:shadow-md transition-shadow"
                            >
                                {/* Bouton de suppression */}
                                <button
                                    onClick={() => handleRemoveFile(file.id)}
                                    className="absolute top-2 right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors z-10"
                                >
                                    <X size={12} />
                                </button>

                                {/* Prévisualisation */}
                                {file.type.startsWith('image/') ? (
                                    <div className="relative group">
                                        <img
                                            src={file.url}
                                            alt={file.name}
                                            className="w-full h-32 object-cover rounded-md"
                                        />
                                        <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-30 transition-all rounded-md flex items-center justify-center">
                                            <a
                                                href={file.url}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="opacity-0 group-hover:opacity-100 transition-opacity"
                                            >
                                                <Eye size={24} className="text-white" />
                                            </a>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="w-full h-32 bg-gray-100 rounded-md flex items-center justify-center">
                                        <File size={40} className="text-gray-400" />
                                    </div>
                                )}

                                {/* Informations du fichier */}
                                <div className="mt-3">
                                    <p className="text-sm font-medium text-gray-900 truncate" title={file.name}>
                                        {file.name}
                                    </p>
                                    <p className="text-xs text-gray-500 mt-1">
                                        {formatFileSize(file.size)}
                                    </p>
                                </div>

                                {/* Lien vers le fichier */}
                                <a
                                    href={file.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="mt-2 inline-flex items-center text-xs hover:underline"
                                    style={{ color: primaryColor }}
                                >
                                    <Eye size={12} className="mr-1" />
                                    Voir le fichier
                                </a>
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* Résumé des uploads */}
            {uploadedFiles.length > 0 && (
                <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center space-x-2">
                        <CheckCircle size={16} className="text-green-600" />
                        <span className="text-sm text-green-800">
              {uploadedFiles.length} fichier{uploadedFiles.length > 1 ? 's' : ''} uploadé{uploadedFiles.length > 1 ? 's' : ''} avec succès
            </span>
                    </div>
                </div>
            )}
        </div>
    );
};

export default DragDropUploader;
// END OF FILE: src/components/common/DragDropUploader.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/LoadingSpinner.tsx

import React from 'react';
import { useConfig } from '../../contexts/ConfigContext';

interface LoadingSpinnerProps {
    size?: 'sm' | 'md' | 'lg' | 'xl';
    text?: string;
    fullScreen?: boolean;
    color?: string;
    showLogo?: boolean;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
                                                           size = 'md',
                                                           text,
                                                           fullScreen = false,
                                                           color, // Si fourni, override les couleurs du thème
                                                           showLogo = true
                                                       }) => {
    const { orgSettings, isLoading: configLoading } = useConfig();

    // Utiliser la couleur personnalisée ou celle du thème
    const primaryColor = color || orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    const sizeClasses = {
        sm: {
            spinner: 'w-4 h-4',
            inner: 'w-2 h-2',
            logo: 'h-8 w-8',
            text: 'text-sm'
        },
        md: {
            spinner: 'w-8 h-8',
            inner: 'w-4 h-4',
            logo: 'h-10 w-10',
            text: 'text-sm'
        },
        lg: {
            spinner: 'w-12 h-12',
            inner: 'w-6 h-6',
            logo: 'h-12 w-12',
            text: 'text-base'
        },
        xl: {
            spinner: 'w-16 h-16',
            inner: 'w-8 h-8',
            logo: 'h-16 w-16',
            text: 'text-lg'
        }
    };

    const sizeConfig = sizeClasses[size];

    const spinnerContent = (
        <div className="flex flex-col items-center space-y-4">
            {/* Logo de l'organisation si disponible et si showLogo est true */}
            {showLogo && orgSettings?.Logo && size !== 'sm' && !configLoading && (
                <div className="relative">
                    <img
                        src={orgSettings.Logo}
                        alt={organizationName}
                        className={`${sizeConfig.logo} object-contain animate-pulse`}
                    />
                    {/* Cercle de bordure animé autour du logo */}
                    <div
                        className={`absolute inset-0 ${sizeConfig.logo} rounded-full border-2 border-transparent animate-spin`}
                        style={{
                            borderTopColor: primaryColor,
                            borderRightColor: `${primaryColor}40`,
                            animationDuration: '2s'
                        }}
                    ></div>
                </div>
            )}

            {/* Spinner principal */}
            <div className="relative">
                {/* Cercle extérieur */}
                <div
                    className={`${sizeConfig.spinner} rounded-full border-4 animate-spin`}
                    style={{
                        borderColor: `${primaryColor}20`,
                        borderTopColor: primaryColor,
                        borderRightColor: primaryColor
                    }}
                ></div>

                {/* Cercle intérieur pour un effet plus moderne */}
                <div
                    className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${sizeConfig.inner} rounded-full animate-pulse`}
                    style={{
                        backgroundColor: primaryColor,
                        animationDuration: '1.5s'
                    }}
                ></div>

                {/* Effet de pulsation secondaire */}
                <div
                    className={`absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${sizeConfig.spinner} rounded-full border-2 border-transparent animate-ping`}
                    style={{
                        borderColor: `${primaryColor}30`,
                        animationDuration: '2s'
                    }}
                ></div>
            </div>

            {/* Texte de chargement */}
            {text && size !== 'sm' && (
                <div className="text-center max-w-xs">
                    <p
                        className={`${sizeConfig.text} font-medium animate-pulse`}
                        style={{ color: secondaryColor }}
                    >
                        {text}
                    </p>

                    {/* Points animés */}
                    <div className="flex justify-center space-x-1 mt-2">
                        <div
                            className="w-1 h-1 rounded-full animate-bounce"
                            style={{
                                backgroundColor: primaryColor,
                                animationDelay: '0ms'
                            }}
                        ></div>
                        <div
                            className="w-1 h-1 rounded-full animate-bounce"
                            style={{
                                backgroundColor: primaryColor,
                                animationDelay: '150ms'
                            }}
                        ></div>
                        <div
                            className="w-1 h-1 rounded-full animate-bounce"
                            style={{
                                backgroundColor: primaryColor,
                                animationDelay: '300ms'
                            }}
                        ></div>
                    </div>
                </div>
            )}

            {/* Nom de l'organisation pour les grands spinners */}
            {size === 'xl' && !configLoading && organizationName && (
                <div className="text-center">
                    <p
                        className="text-sm font-semibold tracking-wide"
                        style={{ color: primaryColor }}
                    >
                        {organizationName}
                    </p>
                </div>
            )}
        </div>
    );

    if (fullScreen) {
        return (
            <div className="fixed inset-0 bg-white bg-opacity-95 backdrop-blur-sm flex items-center justify-center z-50">
                <div className="text-center">
                    {spinnerContent}

                    {/* Arrière-plan décoratif pour le mode plein écran */}
                    <div className="absolute inset-0 overflow-hidden pointer-events-none">
                        {/* Cercles décoratifs */}
                        <div
                            className="absolute top-1/4 left-1/4 w-32 h-32 rounded-full opacity-5 animate-pulse"
                            style={{
                                backgroundColor: primaryColor,
                                animationDuration: '3s'
                            }}
                        ></div>
                        <div
                            className="absolute bottom-1/4 right-1/4 w-24 h-24 rounded-full opacity-5 animate-pulse"
                            style={{
                                backgroundColor: secondaryColor,
                                animationDuration: '4s',
                                animationDelay: '1s'
                            }}
                        ></div>
                        <div
                            className="absolute top-1/2 right-1/3 w-16 h-16 rounded-full opacity-5 animate-pulse"
                            style={{
                                backgroundColor: primaryColor,
                                animationDuration: '2.5s',
                                animationDelay: '2s'
                            }}
                        ></div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="flex items-center justify-center">
            {spinnerContent}
        </div>
    );
};

export default LoadingSpinner;
// END OF FILE: src/components/common/LoadingSpinner.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/common/SimpleImageUploader.tsx

// src/components/ui/SimpleImageUploader.tsx
import React, { useState, useRef } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { cloudinaryService, UploadProgress } from '../../services/cloudinaryService';
import { Upload, Image as ImageIcon, X, Eye } from 'lucide-react';

interface SimpleImageUploaderProps {
    onImageUploaded: (imageUrl: string) => void;
    onImageRemoved?: () => void;
    initialImage?: string;
    placeholder?: string;
    folder?: string;
    maxSizeMB?: number;
    acceptedFormats?: string[];
    showPreview?: boolean;
    disabled?: boolean;
    className?: string;
}

const SimpleImageUploader: React.FC<SimpleImageUploaderProps> = ({
                                                                     onImageUploaded,
                                                                     onImageRemoved,
                                                                     initialImage,
                                                                     placeholder = "Cliquez pour sélectionner une image",
                                                                     folder = "general",
                                                                     maxSizeMB = 10,
                                                                     acceptedFormats = ['jpg', 'jpeg', 'png', 'webp'],
                                                                     showPreview = true,
                                                                     disabled = false,
                                                                     className = ""
                                                                 }) => {
    const { orgSettings } = useConfig();
    const fileInputRef = useRef<HTMLInputElement>(null);

    const [imageUrl, setImageUrl] = useState<string | undefined>(initialImage);
    const [isUploading, setIsUploading] = useState(false);
    const [uploadProgress, setUploadProgress] = useState(0);
    const [error, setError] = useState<string>('');
    const [showFullImage, setShowFullImage] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Déclencher la sélection de fichier
    const handleSelectFile = () => {
        if (disabled) return;
        fileInputRef.current?.click();
    };

    // Gérer la sélection de fichier
    const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (!file) return;

        await handleUpload(file);
        e.target.value = ''; // Reset input
    };

    // Upload du fichier
    const handleUpload = async (file: File) => {
        setError('');
        setIsUploading(true);
        setUploadProgress(0);

        // Validation de taille
        if (file.size > maxSizeMB * 1024 * 1024) {
            setError(`La taille du fichier ne doit pas dépasser ${maxSizeMB}MB`);
            setIsUploading(false);
            return;
        }

        // Créer une prévisualisation locale
        const localPreview = URL.createObjectURL(file);
        setImageUrl(localPreview);

        try {
            const response = await cloudinaryService.uploadGeneral(
                file,
                folder,
                (progress: UploadProgress) => {
                    setUploadProgress(progress.percentage);
                }
            );

            // Libérer la mémoire de la prévisualisation locale
            URL.revokeObjectURL(localPreview);

            if (response.success && response.url) {
                setImageUrl(response.url);
                onImageUploaded(response.url);
            } else {
                setError(response.error || 'Erreur lors de l\'upload');
                setImageUrl(initialImage); // Revenir à l'image précédente
            }
        } catch (error) {
            console.error('Erreur upload image:', error);
            setError('Erreur inattendue lors de l\'upload');
            setImageUrl(initialImage);
        } finally {
            setIsUploading(false);
            setUploadProgress(0);
        }
    };

    // Supprimer l'image
    const handleRemoveImage = () => {
        if (disabled) return;

        setImageUrl(undefined);
        setError('');

        if (onImageRemoved) {
            onImageRemoved();
        }
    };

    return (
        <div className={`w-full ${className}`}>
            <input
                ref={fileInputRef}
                type="file"
                accept={acceptedFormats.map(format => `image/${format}`).join(',')}
                onChange={handleFileChange}
                className="hidden"
                disabled={disabled}
            />

            {imageUrl && showPreview ? (
                // Affichage de l'image avec options
                <div className="relative group">
                    <div className="relative rounded-lg overflow-hidden border-2 border-gray-200">
                        <img
                            src={imageUrl}
                            alt="Image uploadée"
                            className="w-full h-48 object-cover cursor-pointer"
                            onClick={() => setShowFullImage(true)}
                        />

                        {/* Overlay avec boutons d'action */}
                        <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-3">
                            <button
                                onClick={() => setShowFullImage(true)}
                                className="bg-white text-gray-800 px-3 py-2 rounded-lg text-sm font-medium hover:bg-gray-100 transition-colors flex items-center gap-2"
                            >
                                <Eye size={16} />
                                Voir
                            </button>

                            <button
                                onClick={handleSelectFile}
                                className="text-white px-3 py-2 rounded-lg text-sm font-medium transition-colors flex items-center gap-2"
                                style={{ backgroundColor: primaryColor }}
                            >
                                <Upload size={16} />
                                Changer
                            </button>

                            <button
                                onClick={handleRemoveImage}
                                className="bg-red-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-red-700 transition-colors flex items-center gap-2"
                            >
                                <X size={16} />
                                Supprimer
                            </button>
                        </div>

                        {/* Barre de progression pendant l'upload */}
                        {isUploading && (
                            <div className="absolute inset-0 bg-black bg-opacity-70 flex items-center justify-center">
                                <div className="text-center">
                                    <div
                                        className="w-12 h-12 rounded-full border-4 border-white border-t-transparent animate-spin mb-3"
                                        style={{ borderTopColor: primaryColor }}
                                    ></div>
                                    <div className="text-white">
                                        <p className="text-sm font-medium mb-1">Upload en cours...</p>
                                        <p className="text-xs">{uploadProgress}%</p>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            ) : (
                // Zone de sélection d'image
                <div
                    onClick={handleSelectFile}
                    className={`
            border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-all duration-300
            ${disabled
                        ? 'border-gray-200 bg-gray-50 cursor-not-allowed opacity-50'
                        : 'border-gray-300 hover:border-gray-400 hover:bg-gray-50'
                    }
            ${isUploading ? 'pointer-events-none' : ''}
          `}
                    style={{
                        borderColor: !disabled ? `${primaryColor}40` : undefined,
                        backgroundColor: !disabled ? `${primaryColor}05` : undefined
                    }}
                >
                    <div className="flex flex-col items-center justify-center space-y-3">
                        {isUploading ? (
                            <>
                                <div
                                    className="w-12 h-12 rounded-full border-4 border-gray-300 border-t-transparent animate-spin"
                                    style={{ borderTopColor: primaryColor }}
                                ></div>
                                <p className="text-sm font-medium" style={{ color: primaryColor }}>
                                    Upload en cours... {uploadProgress}%
                                </p>
                            </>
                        ) : (
                            <>
                                <div
                                    className="w-16 h-16 rounded-full flex items-center justify-center"
                                    style={{ backgroundColor: `${primaryColor}15` }}
                                >
                                    <ImageIcon
                                        size={32}
                                        style={{ color: primaryColor }}
                                    />
                                </div>

                                <div>
                                    <p className="text-sm font-medium text-gray-700 mb-1">
                                        {placeholder}
                                    </p>
                                    <p className="text-xs text-gray-500">
                                        {acceptedFormats.map(f => f.toUpperCase()).join(', ')}
                                        {' '}(max {maxSizeMB}MB)
                                    </p>
                                </div>

                                <button
                                    type="button"
                                    className="px-4 py-2 rounded-lg text-white text-sm font-medium transition-colors hover:opacity-90"
                                    style={{ backgroundColor: primaryColor }}
                                >
                                    Sélectionner une image
                                </button>
                            </>
                        )}
                    </div>
                </div>
            )}

            {/* Message d'erreur */}
            {error && (
                <div className="mt-3 bg-red-50 border border-red-200 rounded-lg p-3">
                    <p className="text-red-600 text-sm">{error}</p>
                </div>
            )}

            {/* Modal de visualisation plein écran */}
            {showFullImage && imageUrl && (
                <div
                    className="fixed inset-0 bg-black bg-opacity-90 flex items-center justify-center z-50 p-4"
                    onClick={() => setShowFullImage(false)}
                >
                    <div className="relative max-w-4xl max-h-full">
                        <img
                            src={imageUrl}
                            alt="Image en grand"
                            className="max-w-full max-h-full object-contain"
                        />
                        <button
                            onClick={() => setShowFullImage(false)}
                            className="absolute top-4 right-4 w-10 h-10 rounded-full bg-black bg-opacity-50 text-white flex items-center justify-center hover:bg-opacity-70 transition-colors"
                        >
                            <X size={20} />
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default SimpleImageUploader;
// END OF FILE: src/components/common/SimpleImageUploader.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/DebugConfig.tsx

import React, { useState } from 'react';
import { useConfig } from '../contexts/ConfigContext';
import { configService } from '../services/configService';

const DebugConfig: React.FC = () => {
    const { orgSettings, isLoading, error, refetch, testConnection } = useConfig();
    const [connectionStatus, setConnectionStatus] = useState<string>('Non testé');
    const [firebaseConfig, setFirebaseConfig] = useState<Record<string, string> | null>(null);

    const handleTestConnection = async () => {
        setConnectionStatus('Test en cours...');
        const isConnected = await testConnection();
        setConnectionStatus(isConnected ? '✅ Connecté' : '❌ Échec');
    };

    const handleForceRefresh = async () => {
        await configService.forceRefresh();
        await refetch();
    };

    const checkFirebaseConfig = () => {
        const config = {
            apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
            authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
            projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
            storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
            messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
            appId: import.meta.env.VITE_FIREBASE_APP_ID,
        };
        setFirebaseConfig(config);
    };

    // N'afficher qu'en développement
    if (import.meta.env.PROD) {
        return null;
    }

    return (
        <div style={{
            position: 'fixed',
            top: '10px',
            right: '10px',
            background: 'white',
            border: '2px solid #ff8c00',
            borderRadius: '8px',
            padding: '16px',
            maxWidth: '400px',
            fontSize: '12px',
            zIndex: 9999,
            boxShadow: '0 4px 12px rgba(0,0,0,0.1)'
        }}>
            <h3 style={{ margin: '0 0 12px 0', color: '#1b263b' }}>🔧 Debug Config</h3>

            <div style={{ marginBottom: '8px' }}>
                <strong>Status:</strong> {isLoading ? '⏳ Chargement...' : '✅ Chargé'}
            </div>

            {error && (
                <div style={{ color: 'red', marginBottom: '8px' }}>
                    <strong>Erreur:</strong> {error}
                </div>
            )}

            <div style={{ marginBottom: '8px' }}>
                <strong>Nom org:</strong> {orgSettings?.Name || 'Non défini'}
            </div>

            <div style={{ marginBottom: '8px' }}>
                <strong>Thème:</strong> {orgSettings?.Theme?.Primary || 'Non défini'}
            </div>

            <div style={{ marginBottom: '8px' }}>
                <strong>Connexion:</strong> {connectionStatus}
            </div>

            <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                <button
                    onClick={handleTestConnection}
                    style={{
                        background: '#ff8c00',
                        color: 'white',
                        border: 'none',
                        padding: '4px 8px',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '11px'
                    }}
                >
                    Test Connexion
                </button>

                <button
                    onClick={handleForceRefresh}
                    style={{
                        background: '#1b263b',
                        color: 'white',
                        border: 'none',
                        padding: '4px 8px',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '11px'
                    }}
                >
                    Force Refresh
                </button>

                <button
                    onClick={checkFirebaseConfig}
                    style={{
                        background: '#10b981',
                        color: 'white',
                        border: 'none',
                        padding: '4px 8px',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '11px'
                    }}
                >
                    Check Config
                </button>
            </div>

            {firebaseConfig && (
                <div style={{ marginTop: '12px', padding: '8px', background: '#f5f5f5', borderRadius: '4px' }}>
                    <strong>Firebase Config:</strong>
                    <pre style={{ fontSize: '10px', margin: '4px 0' }}>
                        {JSON.stringify(firebaseConfig, null, 2)}
                    </pre>
                </div>
            )}
        </div>
    );
};

export default DebugConfig;
// END OF FILE: src/components/DebugConfig.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/home/Hero.tsx

import { useEffect, useState } from 'react';
import { ChevronDown, ArrowRight, LogIn, Book, Users, Clock, GraduationCap } from 'lucide-react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import heroImage from "../../assets/images/home/hero_image.jpg"
import book1 from "../../assets/images/home/book1.jpg"
import book2 from "../../assets/images/home/book2.jpg"
import book3 from "../../assets/images/home/book3.jpg"

const UniversityHero = () => {
    const [scrollY, setScrollY] = useState(0);
    const [stats, setStats] = useState({
        books: 0,
        theses: 0,
        students: 0,
        teachers: 0,
        loading: true
    });

    // Configuration par défaut (remplacez par useConfig dans votre projet)
    const orgSettings = {
        Theme: { Primary: '#ff8c00', Secondary: '#1b263b' },
        Name: 'BiblioENSPY'
    };

    useEffect(() => {
        const handleScroll = () => {
            setScrollY(window.scrollY);
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    useEffect(() => {
        const fetchStats = async () => {
            try {
                // Récupérer les livres
                const booksSnapshot = await getDocs(collection(db, 'BiblioBooks'));
                const booksCount = booksSnapshot.size;

                // Récupérer les mémoires
                const thesesSnapshot = await getDocs(collection(db, 'BiblioThesis'));
                const thesesCount = thesesSnapshot.size;

                // Récupérer les utilisateurs et compter étudiants/enseignants
                const usersSnapshot = await getDocs(collection(db, 'BiblioUser'));
                let studentsCount = 0;
                let teachersCount = 0;

                usersSnapshot.forEach((doc) => {
                    const userData = doc.data();
                    if (userData.statut === 'etudiant') {
                        studentsCount++;
                    } else if (userData.statut === 'enseignant') {
                        teachersCount++;
                    }
                });

                setStats({
                    books: booksCount,
                    theses: thesesCount,
                    students: studentsCount,
                    teachers: teachersCount,
                    loading: false
                });
            } catch (error) {
                console.error('Erreur lors du chargement des statistiques:', error);
                setStats(prev => ({ ...prev, loading: false }));
            }
        };

        fetchStats();
    }, []);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    return (
        <div
            className="relative min-h-[130vh] flex items-center justify-center overflow-hidden"
            style={{
                background: `linear-gradient(135deg, ${secondaryColor} 0%, ${secondaryColor}e6 50%, ${primaryColor}b3 100%)`
            }}
        >
            {/* Background Elements */}
            <div className="absolute inset-0 overflow-hidden">
                <div
                    className="absolute top-0 left-0 w-96 h-96 opacity-10 rounded-full blur-3xl transform -translate-x-1/2 -translate-y-1/2 animate-pulse"
                    style={{ backgroundColor: primaryColor }}
                ></div>
                <div
                    className="absolute bottom-0 right-0 w-96 h-96 opacity-10 rounded-full blur-3xl transform translate-x-1/3 translate-y-1/3 animate-pulse"
                    style={{ backgroundColor: primaryColor, animationDelay: '2s' }}
                ></div>

                {/* University pattern overlay */}
                <div className="absolute inset-0">
                    <div className="absolute top-20 left-20 text-white opacity-5 transform rotate-12">
                        <GraduationCap size={120} />
                    </div>
                    <div className="absolute top-40 right-32 text-white opacity-5 transform -rotate-12">
                        <Book size={80} />
                    </div>
                    <div className="absolute bottom-32 left-32 text-white opacity-5 transform rotate-45">
                        <Users size={100} />
                    </div>
                </div>
            </div>

            <div className="container mx-auto px-6 relative z-10">
                <div className="flex flex-col-reverse lg:flex-row items-center gap-12 lg:gap-20">
                    <div className="w-full lg:w-1/2 text-center lg:text-left">
                        <div className="inline-block px-6 py-2 rounded-full bg-white/10 backdrop-blur-sm mb-6 transform hover:scale-105 transition-transform duration-300">
                            <span className="text-white/90 font-medium text-sm flex items-center justify-center lg:justify-start">
                                <GraduationCap className="w-4 h-4 mr-2" />
                                Bibliothèque Universitaire • {organizationName}
                            </span>
                        </div>

                        <h1 className="text-4xl md:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight">
                            Votre porte d'entrée vers{' '}
                            <span
                                className="relative inline-block animate-pulse"
                                style={{ color: primaryColor }}
                            >
                                l'excellence
                                <div className="absolute bottom-0 left-0 w-full h-3 bg-white opacity-20 transform -skew-x-12"></div>
                            </span>{' '}
                            académique
                        </h1>

                        <p className="text-lg md:text-xl text-white/90 mb-8 max-w-lg mx-auto lg:mx-0 leading-relaxed">
                            Explorez notre riche collection de ressources académiques,
                            réservez vos ouvrages en ligne et construisez votre parcours
                            vers la réussite universitaire.
                        </p>

                        <div className="flex flex-col sm:flex-row justify-center lg:justify-start gap-4 mb-12">
                            <a
                                href="/catalogue"
                                className="group bg-white text-gray-800 py-4 px-8 rounded-xl font-semibold transition-all duration-300 shadow-xl flex items-center justify-center transform hover:scale-105 hover:shadow-2xl"
                                onMouseEnter={(e) => {
                                    e.currentTarget.style.backgroundColor = primaryColor;
                                    e.currentTarget.style.color = 'white';
                                }}
                                onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = 'white';
                                    e.currentTarget.style.color = '#1f2937';
                                }}
                            >
                                <Book className="h-5 w-5 mr-2" />
                                Explorer le catalogue
                                <ArrowRight className="h-5 w-5 ml-2 transform group-hover:translate-x-1 transition-transform" />
                            </a>

                            <a
                                href="/auth"
                                className="bg-transparent border-2 border-white text-white py-4 px-8 rounded-xl font-semibold transition-all duration-300 shadow-xl flex items-center justify-center hover:bg-white transform hover:scale-105"
                                onMouseEnter={(e) => {
                                    e.currentTarget.style.backgroundColor = 'white';
                                    e.currentTarget.style.color = secondaryColor;
                                }}
                                onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = 'transparent';
                                    e.currentTarget.style.color = 'white';
                                }}
                            >
                                <LogIn className="h-5 w-5 mr-2" />
                                Accéder à mon compte
                            </a>
                        </div>

                        {/* Quick Stats with Real Data */}
                        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                            <div className="p-4 bg-white/10 backdrop-blur-sm rounded-xl transform hover:scale-105 transition-transform duration-300">
                                <div className="flex items-center justify-center mb-2">
                                    <Book className="h-6 w-6" style={{ color: primaryColor }} />
                                </div>
                                <div className="text-center">
                                    <div className="font-bold text-xl text-white">
                                        {stats.loading ? (
                                            <div className="animate-pulse bg-white/20 h-6 w-12 rounded mx-auto"></div>
                                        ) : (
                                            `${stats.books.toLocaleString()}+`
                                        )}
                                    </div>
                                    <div className="text-white/80 text-xs">Livres</div>
                                </div>
                            </div>

                            <div className="p-4 bg-white/10 backdrop-blur-sm rounded-xl transform hover:scale-105 transition-transform duration-300">
                                <div className="flex items-center justify-center mb-2">
                                    <GraduationCap className="h-6 w-6" style={{ color: primaryColor }} />
                                </div>
                                <div className="text-center">
                                    <div className="font-bold text-xl text-white">
                                        {stats.loading ? (
                                            <div className="animate-pulse bg-white/20 h-6 w-12 rounded mx-auto"></div>
                                        ) : (
                                            `${stats.theses.toLocaleString()}+`
                                        )}
                                    </div>
                                    <div className="text-white/80 text-xs">Mémoires</div>
                                </div>
                            </div>

                            <div className="p-4 bg-white/10 backdrop-blur-sm rounded-xl transform hover:scale-105 transition-transform duration-300">
                                <div className="flex items-center justify-center mb-2">
                                    <Users className="h-6 w-6" style={{ color: primaryColor }} />
                                </div>
                                <div className="text-center">
                                    <div className="font-bold text-xl text-white">
                                        {stats.loading ? (
                                            <div className="animate-pulse bg-white/20 h-6 w-12 rounded mx-auto"></div>
                                        ) : (
                                            `${stats.students.toLocaleString()}+`
                                        )}
                                    </div>
                                    <div className="text-white/80 text-xs">Étudiants</div>
                                </div>
                            </div>

                            <div className="p-4 bg-white/10 backdrop-blur-sm rounded-xl transform hover:scale-105 transition-transform duration-300">
                                <div className="flex items-center justify-center mb-2">
                                    <Clock className="h-6 w-6" style={{ color: primaryColor }} />
                                </div>
                                <div className="text-center">
                                    <div className="font-bold text-xl text-white">24/7</div>
                                    <div className="text-white/80 text-xs">En ligne</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Right side - Avec vraies images comme le premier composant */}
                    <div className="w-full lg:w-1/2 mb-12 lg:mb-0">
                        <div className="relative">
                            {/* Main book showcase avec vraie image */}
                            <div
                                className="relative z-10 rounded-2xl shadow-2xl overflow-hidden border-4 border-white/20 backdrop-blur-sm transform hover:scale-105 transition-transform duration-500"
                                style={{ transform: `perspective(1000px) rotateY(${scrollY * 0.02}deg) rotateX(${scrollY * 0.01}deg)` }}
                            >
                                <div className="aspect-[4/3] bg-gradient-to-br from-white/5 to-white/30 backdrop-blur-sm p-3">
                                    {/* Image placeholder with modern design */}
                                    <div className="w-full h-full rounded-xl overflow-hidden relative">
                                        <img
                                            src={heroImage}
                                            alt="Bibliothèque universitaire"
                                            className="w-full h-full object-cover rounded-xl"
                                        />

                                        {/* Overlay gradient */}
                                        <div
                                            className="absolute inset-0"
                                            style={{
                                                background: `linear-gradient(to bottom, ${secondaryColor}30, ${secondaryColor}cc)`
                                            }}
                                        ></div>

                                        {/* Floating book elements avec vraies images */}
                                        <div className="absolute top-1/4 left-1/4 w-20 h-24 bg-white rounded shadow-lg transform -rotate-12 animate-float">
                                            <img src={book1} alt="Book cover" className="w-full h-full object-cover rounded" />
                                        </div>
                                        <div className="absolute top-1/3 right-1/4 w-20 h-24 bg-white rounded shadow-lg transform rotate-6 animate-float" style={{ animationDelay: '1.5s' }}>
                                            <img src={book2} alt="Book cover" className="w-full h-full object-cover rounded" />
                                        </div>
                                        <div className="absolute bottom-1/4 right-1/3 w-20 h-24 bg-white rounded shadow-lg transform -rotate-3 animate-float" style={{ animationDelay: '1s' }}>
                                            <img src={book3} alt="Book cover" className="w-full h-full object-cover rounded" />
                                        </div>

                                        {/* Text overlay adapté à l'université */}
                                        <div className="absolute inset-0 flex items-center justify-center">
                                            <div
                                                className="text-white text-xl md:text-2xl font-bold px-6 py-4 rounded-lg backdrop-blur-sm shadow-lg border border-white/10 text-center"
                                                style={{ backgroundColor: `${secondaryColor}60` }}
                                            >
                                                <GraduationCap className="w-8 h-8 mx-auto mb-2" />
                                                {organizationName}
                                                <div className="text-sm mt-1 opacity-90">Excellence Académique</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            {/* Decorative elements */}
                            <div
                                className="absolute -top-10 right-0 w-32 h-32 rounded-full blur-3xl opacity-20 transform translate-x-1/2 -translate-y-1/2"
                                style={{ backgroundColor: primaryColor }}
                            ></div>
                            <div
                                className="absolute -bottom-10 -left-10 w-40 h-40 rounded-full blur-3xl opacity-20"
                                style={{ backgroundColor: secondaryColor }}
                            ></div>

                            {/* Floating book cards avec vraies images */}
                            <div
                                className="absolute -right-4 top-10 w-36 md:w-48 aspect-[2/3] bg-white rounded-lg shadow-xl overflow-hidden transform -rotate-6 hover:rotate-0 transition-transform duration-300"
                                style={{ transform: `rotate(-6deg) translateY(${scrollY * 0.05}px)` }}
                            >
                                <img src={book1} alt="Featured book" className="w-full h-full object-cover" />
                                <div
                                    className="absolute bottom-0 left-0 right-0 text-white p-2 text-sm font-medium"
                                    style={{ backgroundColor: `${secondaryColor}cc` }}
                                >
                                    Référence
                                </div>
                            </div>

                            <div
                                className="absolute -left-4 bottom-10 w-36 md:w-48 aspect-[2/3] bg-white rounded-lg shadow-xl overflow-hidden transform rotate-6 hover:rotate-0 transition-transform duration-300"
                                style={{ transform: `rotate(6deg) translateY(${-scrollY * 0.03}px)` }}
                            >
                                <img src={book2} alt="Featured book" className="w-full h-full object-cover" />
                                <div
                                    className="absolute bottom-0 left-0 right-0 text-white p-2 text-sm font-medium"
                                    style={{ backgroundColor: `${primaryColor}cc` }}
                                >
                                    Mémoire
                                </div>
                            </div>

                            {/* Interactive dots */}
                            <div className="absolute -right-8 top-1/2 transform -translate-y-1/2 hidden md:block">
                                <div className="w-2 h-2 bg-white rounded-full mb-3 animate-ping" style={{ animationDelay: '0s', animationDuration: '3s' }}></div>
                                <div className="w-2 h-2 bg-white rounded-full mb-3 animate-ping" style={{ animationDelay: '0.5s', animationDuration: '3s' }}></div>
                                <div className="w-2 h-2 bg-white rounded-full mb-3 animate-ping" style={{ animationDelay: '1s', animationDuration: '3s' }}></div>
                                <div className="w-2 h-2 bg-white rounded-full animate-ping" style={{ animationDelay: '1.5s', animationDuration: '3s' }}></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Wave divider */}
            <div className="absolute bottom-0 left-0 right-0">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" className="w-full h-auto">
                    <path fill="#ffffff" fillOpacity="1" d="M0,224L60,218.7C120,213,240,203,360,186.7C480,171,600,149,720,160C840,171,960,213,1080,213.3C1200,213,1320,171,1380,149.3L1440,128L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"></path>
                </svg>
            </div>

            {/* Scroll indicator */}
            <div className="absolute bottom-16 left-1/2 transform -translate-x-1/2 z-20 animate-bounce">
                <button
                    onClick={() => document.getElementById('resources-section')?.scrollIntoView({ behavior: 'smooth' })}
                    className="w-12 h-12 rounded-full border-2 border-white/50 flex items-center justify-center cursor-pointer hover:border-white hover:bg-white/10 transition-all"
                >
                    <ChevronDown className="h-6 w-6 text-white" />
                </button>
            </div>

            {/* Style pour l'animation float */}
            <style>{`
                @keyframes float {
                    0% { transform: translateY(0px) rotate(-12deg); }
                    50% { transform: translateY(-10px) rotate(-8deg); }
                    100% { transform: translateY(0px) rotate(-12deg); }
                }

                .animate-float {
                    animation: float 6s ease-in-out infinite;
                }
            `}</style>
        </div>
    );
};

export default UniversityHero;
// END OF FILE: src/components/home/Hero.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/home/LibrarySchedule.tsx

import React from 'react';
import { Clock, Calendar, AlertTriangle, BookOpen, Users, Shield, Info, CheckCircle, XCircle } from 'lucide-react';
import { useConfig } from '../../contexts/ConfigContext';
import LoadingSpinner from '../common/LoadingSpinner';

// Types pour les horaires d'ouverture
interface OpeningHours {
    open: string;
    close: string;
}

// Type pour React Component avec icône
type IconComponent = React.ComponentType<{ className?: string; style?: React.CSSProperties; size?: number }>;

// Props pour DaySchedule
interface DayScheduleProps {
    day: string;
    hours: OpeningHours;
    isToday?: boolean;
    primaryColor: string;
}

// Props pour PolicyCard
interface PolicyCardProps {
    icon: IconComponent;
    title: string;
    items: string[];
    color: string;
}

// Type pour les jours de la semaine
type WeekDay = 'Monday' | 'Tuesday' | 'Wednesday' | 'Thursday' | 'Friday' | 'Saturday' | 'Sunday';

const LibrarySchedule: React.FC = () => {
    const { orgSettings, isLoading } = useConfig();

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    // Fonction pour parser les horaires
    const parseOpeningHours = (dayString: string): OpeningHours => {
        try {
            return JSON.parse(dayString) as OpeningHours;
        } catch {
            return { open: "closed", close: "closed" };
        }
    };

    // Fonction pour formater les horaires
    const formatOpeningHours = (hours: OpeningHours): string => {
        if (hours.open === "closed") {
            return "Fermé";
        }
        return `${hours.open} - ${hours.close}`;
    };

    // Obtenir le jour actuel
    const getCurrentDay = (): WeekDay => {
        const days: WeekDay[] = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        return days[new Date().getDay()];
    };

    // Vérifier si la bibliothèque est ouverte maintenant
    const isOpenNow = (): boolean => {
        if (!orgSettings?.OpeningHours) return false;

        const today = getCurrentDay();
        const todayHours = parseOpeningHours(orgSettings.OpeningHours[today]);

        if (todayHours.open === "closed") return false;

        const now = new Date();
        const currentTime = now.getHours() * 60 + now.getMinutes();

        const [openHour, openMin] = todayHours.open.split(':').map(Number);
        const [closeHour, closeMin] = todayHours.close.split(':').map(Number);

        const openTime = openHour * 60 + openMin;
        const closeTime = closeHour * 60 + closeMin;

        return currentTime >= openTime && currentTime <= closeTime;
    };

    const DaySchedule: React.FC<DayScheduleProps> = ({ day, hours, isToday = false, primaryColor }) => {
        const isOpen = hours.open !== "closed";

        return (
            <div
                className={`flex items-center justify-between p-4 rounded-xl transition-all duration-300 ${
                    isToday
                        ? 'shadow-lg transform scale-105'
                        : 'hover:shadow-md'
                }`}
                style={{
                    backgroundColor: isToday ? `${primaryColor}10` : 'white',
                    border: isToday ? `2px solid ${primaryColor}` : '1px solid #e5e7eb'
                }}
            >
                <div className="flex items-center">
                    <Calendar className="w-5 h-5 mr-3 text-gray-500" />
                    <span className={`font-medium ${isToday ? 'font-bold' : ''}`} style={{ color: isToday ? primaryColor : '#374151' }}>
            {day}
                        {isToday && <span className="ml-2 text-xs px-2 py-1 rounded-full bg-current text-white opacity-80">Aujourd'hui</span>}
          </span>
                </div>

                <div className="flex items-center">
                    {isOpen ? (
                        <>
                            <CheckCircle className="w-4 h-4 mr-2 text-green-500" />
                            <span className="font-medium text-gray-700">{formatOpeningHours(hours)}</span>
                        </>
                    ) : (
                        <>
                            <XCircle className="w-4 h-4 mr-2 text-red-500" />
                            <span className="font-medium text-red-600">Fermé</span>
                        </>
                    )}
                </div>
            </div>
        );
    };

    const PolicyCard: React.FC<PolicyCardProps> = ({ icon: Icon, title, items, color }) => (
        <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-all duration-300">
            <div className="flex items-center mb-4">
                <div
                    className="w-12 h-12 rounded-xl flex items-center justify-center mr-4"
                    style={{ backgroundColor: `${color}15` }}
                >
                    <Icon className="w-6 h-6" style={{ color }} />
                </div>
                <h3 className="text-xl font-bold text-gray-800">{title}</h3>
            </div>

            <ul className="space-y-3">
                {items.map((item, index) => (
                    <li key={index} className="flex items-start">
                        <div
                            className="w-2 h-2 rounded-full mt-2 mr-3 flex-shrink-0"
                            style={{ backgroundColor: color }}
                        ></div>
                        <span className="text-gray-600 leading-relaxed">{item}</span>
                    </li>
                ))}
            </ul>
        </div>
    );

    if (isLoading) {
        return (
            <section
                className="py-20"
                style={{ backgroundColor: `${secondaryColor}03` }}
            >
                <div className="container mx-auto px-4">
                    <div className="text-center">
                        <LoadingSpinner
                            size="lg"
                            text="Chargement des informations..."
                        />
                    </div>
                </div>
            </section>
        );
    }

    if (!orgSettings) {
        return (
            <section
                className="py-20"
                style={{ backgroundColor: `${secondaryColor}03` }}
            >
                <div className="container mx-auto px-4">
                    <div className="text-center">
                        <AlertTriangle className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                        <h3 className="text-lg font-medium text-gray-800 mb-2">Configuration non disponible</h3>
                        <p className="text-gray-600">Impossible de charger les informations de la bibliothèque.</p>
                    </div>
                </div>
            </section>
        );
    }

    const daysOrder: WeekDay[] = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    const dayLabels: Record<WeekDay, string> = {
        Monday: 'Lundi',
        Tuesday: 'Mardi',
        Wednesday: 'Mercredi',
        Thursday: 'Jeudi',
        Friday: 'Vendredi',
        Saturday: 'Samedi',
        Sunday: 'Dimanche'
    };

    const currentDay = getCurrentDay();
    const isCurrentlyOpen = isOpenNow();

    // Règles d'emprunt avec limite dynamique
    const borrowingRules = [
        `Maximum ${orgSettings.MaximumSimultaneousLoans} livre${orgSettings.MaximumSimultaneousLoans > 1 ? 's' : ''} simultanément`,
        ...(orgSettings.SpecificBorrowingRules || [])
    ];

    // Règles générales par défaut
    const generalRules = [
        "Respect du silence dans les espaces d'étude",
        "Interdiction de consommer nourriture et boissons",
        "Usage des téléphones en mode silencieux uniquement",
        "Signalement obligatoire de tout dommage",
        "Respect du matériel et des autres utilisateurs"
    ];

    return (
        <section
            className="py-20"
            style={{ backgroundColor: `${secondaryColor}15` }}
        >
            <div className="container mx-auto px-4">
                {/* Section Header */}
                <div className="text-center mb-16">
                    <div className="flex justify-center mb-4">
                        <div
                            className="w-16 h-1 rounded-full"
                            style={{
                                background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                            }}
                        />
                    </div>

                    <h2 className="text-4xl font-bold mb-6" style={{ color: secondaryColor }}>
                        Horaires & Politiques
                    </h2>

                    <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                        Consultez nos horaires d'ouverture et prenez connaissance de nos règles
                        d'utilisation pour une expérience optimale à {organizationName}.
                    </p>
                </div>

                {/* Status actuel */}
                <div className="text-center mb-12">
                    <div
                        className={`inline-flex items-center px-6 py-3 rounded-full font-semibold text-lg ${
                            isCurrentlyOpen
                                ? 'bg-green-100 text-green-800'
                                : 'bg-red-100 text-red-800'
                        }`}
                    >
                        {isCurrentlyOpen ? (
                            <>
                                <CheckCircle className="w-5 h-5 mr-2" />
                                Bibliothèque actuellement ouverte
                            </>
                        ) : (
                            <>
                                <Clock className="w-5 h-5 mr-2" />
                                Bibliothèque actuellement fermée
                            </>
                        )}
                    </div>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
                    {/* Horaires d'ouverture */}
                    <div>
                        <div className="flex items-center mb-8">
                            <div
                                className="w-12 h-12 rounded-xl flex items-center justify-center mr-4"
                                style={{ backgroundColor: `${primaryColor}15` }}
                            >
                                <Clock className="w-6 h-6" style={{ color: primaryColor }} />
                            </div>
                            <div>
                                <h3 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                                    Horaires d'Ouverture
                                </h3>
                                <p className="text-gray-600">Planning hebdomadaire de la bibliothèque</p>
                            </div>
                        </div>

                        <div className="space-y-3">
                            {daysOrder.map((day) => (
                                <DaySchedule
                                    key={day}
                                    day={dayLabels[day]}
                                    hours={parseOpeningHours(orgSettings.OpeningHours[day])}
                                    isToday={day === currentDay}
                                    primaryColor={primaryColor}
                                />
                            ))}
                        </div>

                        {/* Informations supplémentaires */}
                        <div className="mt-6 p-4 bg-blue-50 rounded-xl border border-blue-200">
                            <div className="flex items-center mb-2">
                                <Info className="w-5 h-5 mr-2 text-blue-600" />
                                <h4 className="font-semibold text-blue-800">Informations pratiques</h4>
                            </div>
                            <ul className="text-sm text-blue-700 space-y-1">
                                <li>• Accès en ligne disponible 24h/24, 7j/7</li>
                                <li>• Réservations possibles en dehors des heures d'ouverture</li>
                                <li>• Service d'aide en ligne pendant les heures d'ouverture</li>
                                <li>• Fermeture exceptionnelle lors des jours fériés</li>
                            </ul>
                        </div>
                    </div>

                    {/* Politiques et règles */}
                    <div>
                        <div className="flex items-center mb-8">
                            <div
                                className="w-12 h-12 rounded-xl flex items-center justify-center mr-4"
                                style={{ backgroundColor: `${secondaryColor}15` }}
                            >
                                <Shield className="w-6 h-6" style={{ color: secondaryColor }} />
                            </div>
                            <div>
                                <h3 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                                    Règlement & Politiques
                                </h3>
                                <p className="text-gray-600">Conditions d'utilisation de nos services</p>
                            </div>
                        </div>

                        <div className="space-y-6">
                            {/* Règles d'emprunt */}
                            <PolicyCard
                                icon={BookOpen}
                                title="Règles d'Emprunt"
                                items={borrowingRules}
                                color={primaryColor}
                            />

                            {/* Sanctions et pénalités */}
                            {orgSettings.LateReturnPenalties && orgSettings.LateReturnPenalties.length > 0 && (
                                <PolicyCard
                                    icon={AlertTriangle}
                                    title="Sanctions & Pénalités"
                                    items={orgSettings.LateReturnPenalties}
                                    color="#ef4444"
                                />
                            )}

                            {/* Règles générales */}
                            <PolicyCard
                                icon={Users}
                                title="Règles Générales"
                                items={generalRules}
                                color={secondaryColor}
                            />
                        </div>
                    </div>
                </div>

                {/* Section Contact pour questions */}
                <div className="mt-16">
                    <div
                        className="rounded-2xl p-8 text-center"
                        style={{
                            background: `linear-gradient(135deg, ${primaryColor}10, ${secondaryColor}10)`
                        }}
                    >
                        <h3 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                            Questions sur nos Politiques ?
                        </h3>
                        <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
                            Notre équipe est disponible pour répondre à toutes vos questions
                            concernant l'utilisation de la bibliothèque et ses services.
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <a
                                href="/contact"
                                className="px-6 py-3 rounded-xl text-white font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                                style={{ backgroundColor: primaryColor }}
                            >
                                Nous contacter
                            </a>
                            <a
                                href="/faq"
                                className="px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105 border-2"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                            >
                                FAQ
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default LibrarySchedule;
// END OF FILE: src/components/home/LibrarySchedule.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/home/OnlineLearningSection.tsx

import React, { useState, useEffect } from 'react';
import { Globe, ExternalLink, Clock, Award, BookOpen, Play } from 'lucide-react';
import { collection, getDocs, query, limit } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';

// Types pour les plateformes d'apprentissage
interface BiblioWeb {
    id: string;
    cathegorie?: string; // Rendu optionnel
    chemin: string;
    desc?: string; // Rendu optionnel
    image?: string; // Rendu optionnel
    name: string;
}

// Type pour React Component avec icône
type IconComponent = React.ComponentType<{ className?: string; style?: React.CSSProperties; size?: number }>;

// Props pour PlatformCard
interface PlatformCardProps {
    platform: BiblioWeb;
}

// Props pour FeatureCard
interface FeatureCardProps {
    icon: IconComponent;
    title: string;
    description: string;
    color: string;
}

const OnlineLearningSection: React.FC = () => {
    const { orgSettings } = useConfig();

    const [learningPlatforms, setLearningPlatforms] = useState<BiblioWeb[]>([]);
    const [loading, setLoading] = useState<boolean>(true);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    useEffect(() => {
        const fetchLearningPlatforms = async (): Promise<void> => {
            try {
                // Récupérer les sites depuis la collection BiblioWeb
                const platformsQuery = query(
                    collection(db, 'BiblioWeb'),
                    limit(12) // Limiter à 12 plateformes pour l'affichage
                );
                const platformsSnapshot = await getDocs(platformsQuery);
                const platformsData: BiblioWeb[] = platformsSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                } as BiblioWeb));

                setLearningPlatforms(platformsData);
                setLoading(false);
            } catch (error) {
                console.error('Erreur lors du chargement des plateformes:', error);
                setLoading(false);
            }
        };

        fetchLearningPlatforms();
    }, []);

    const PlatformCard: React.FC<PlatformCardProps> = ({ platform }) => {
        const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>): void => {
            const target = e.target as HTMLImageElement;
            const nextSibling = target.nextElementSibling as HTMLElement;
            target.style.display = 'none';
            if (nextSibling) {
                nextSibling.style.display = 'flex';
            }
        };

        const getCategoryDisplayName = (category: string | undefined): string => {
            if (!category || category.trim().length === 0) {
                return 'Général';
            }

            const categoryMap: Record<string, string> = {
                'gc': 'Génie Civil',
                'info': 'Informatique',
                'ge': 'Génie Électrique',
                'gm': 'Génie Mécanique',
                'general': 'Général'
            };
            return categoryMap[category.toLowerCase()] || category.toUpperCase();
        };

        return (
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-xl border border-gray-100 group">
                {/* Header with logo */}
                <div className="p-6 pb-4">
                    <div className="flex items-center mb-4">
                        <div className="w-16 h-16 rounded-xl overflow-hidden shadow-md mr-4 bg-gray-100 flex items-center justify-center">
                            {platform.image && (
                                <img
                                    src={platform.image}
                                    alt={platform.name}
                                    className="w-full h-full object-cover"
                                    onError={handleImageError}
                                />
                            )}
                            <div
                                className="w-full h-full flex items-center justify-center"
                                style={{ display: platform.image ? 'none' : 'flex' }}
                            >
                                <Globe className="w-8 h-8 text-gray-400" />
                            </div>
                        </div>
                        <div className="flex-1">
                            <h3 className="text-xl font-bold text-gray-800 mb-2">{platform.name}</h3>
                            <div className="flex flex-col gap-2">
                <span
                    className="inline-block px-3 py-1 rounded-full text-xs font-medium w-fit"
                    style={{
                        backgroundColor: `${primaryColor}15`,
                        color: primaryColor
                    }}
                >
                  Plateforme d'apprentissage
                </span>
                                {platform.cathegorie && platform.cathegorie.trim().length > 0 && (
                                    <span
                                        className="inline-block px-3 py-1 rounded-full text-xs font-medium w-fit"
                                        style={{
                                            backgroundColor: `${secondaryColor}15`,
                                            color: secondaryColor
                                        }}
                                    >
                    {getCategoryDisplayName(platform.cathegorie)}
                  </span>
                                )}
                            </div>
                        </div>
                    </div>

                    <p className="text-gray-600 text-sm leading-relaxed mb-4">
                        {platform.desc && platform.desc.trim().length > 0
                            ? platform.desc
                            : `Plateforme d'apprentissage en ligne pour développer vos compétences avec des cours et certifications professionnelles${platform.cathegorie ? ` dans le domaine ${getCategoryDisplayName(platform.cathegorie)}` : ''}.`
                        }
                    </p>
                </div>

                {/* Platform features */}
                <div className="px-6 pb-4">
                    <div className="flex flex-wrap gap-2 mb-4">
            <span className="px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium">
              ✓ Cours en ligne
            </span>
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
              ✓ Certifications
            </span>
                        <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium">
              ✓ Accès direct
            </span>
                    </div>
                </div>

                {/* Action button */}
                <div className="px-6 pb-6">
                    <a
                        href={platform.chemin}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="w-full flex items-center justify-center py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105 group-hover:shadow-lg"
                        style={{
                            backgroundColor: primaryColor,
                            color: 'white'
                        }}
                    >
                        <ExternalLink className="w-4 h-4 mr-2" />
                        Accéder à la plateforme
                    </a>
                </div>
            </div>
        );
    };

    const FeatureCard: React.FC<FeatureCardProps> = ({ icon: Icon, title, description, color }) => (
        <div className="text-center p-6 bg-gray-50 rounded-xl">
            <div
                className="w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4"
                style={{ backgroundColor: `${color}15` }}
            >
                <Icon className="w-6 h-6" style={{ color }} />
            </div>
            <h3 className="font-bold text-gray-800 mb-2">{title}</h3>
            <p className="text-sm text-gray-600">{description}</p>
        </div>
    );

    const LoadingSkeleton: React.FC = () => (
        <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
            <div className="p-6">
                <div className="flex items-start mb-4">
                    <div className="w-16 h-16 bg-gray-200 rounded-xl animate-pulse mr-4"></div>
                    <div className="flex-1">
                        <div className="h-6 bg-gray-200 rounded animate-pulse mb-2"></div>
                        <div className="h-4 bg-gray-200 rounded animate-pulse w-2/3"></div>
                    </div>
                </div>
                <div className="space-y-2 mb-4">
                    <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-4 bg-gray-200 rounded animate-pulse w-3/4"></div>
                </div>
                <div className="flex gap-2 mb-4">
                    <div className="h-6 bg-gray-200 rounded-full animate-pulse w-16"></div>
                    <div className="h-6 bg-gray-200 rounded-full animate-pulse w-20"></div>
                </div>
                <div className="h-10 bg-gray-200 rounded-xl animate-pulse"></div>
            </div>
        </div>
    );

    return (
        <section className="py-20 bg-white">
            <div className="container mx-auto px-4">
                {/* Section Header */}
                <div className="text-center mb-16">
                    <div className="flex justify-center mb-4">
                        <div
                            className="w-16 h-1 rounded-full"
                            style={{
                                background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                            }}
                        />
                    </div>

                    <span
                        className="inline-block py-2 px-4 rounded-full text-sm font-bold mb-4"
                        style={{
                            backgroundColor: `${primaryColor}10`,
                            color: primaryColor
                        }}
                    >
            Formation & Certification
          </span>

                    <h2 className="text-4xl font-bold mb-6" style={{ color: secondaryColor }}>
                        Plateformes d'Apprentissage en Ligne
                    </h2>

                    <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                        Complétez votre formation académique avec ces plateformes
                        d'apprentissage en ligne recommandées par notre équipe pédagogique de {organizationName}.
                    </p>
                </div>

                {/* Features highlights */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-16">
                    <FeatureCard
                        icon={Globe}
                        title="Accès Global"
                        description="Apprenez depuis n'importe où dans le monde"
                        color={primaryColor}
                    />

                    <FeatureCard
                        icon={Award}
                        title="Certifications"
                        description="Obtenez des certificats reconnus mondialement"
                        color={secondaryColor}
                    />

                    <FeatureCard
                        icon={Clock}
                        title="Flexibilité"
                        description="Apprenez à votre propre rythme"
                        color={primaryColor}
                    />

                    <FeatureCard
                        icon={BookOpen}
                        title="Variété de Cours"
                        description="Explorez tous les domaines d'apprentissage"
                        color={secondaryColor}
                    />
                </div>

                {/* Platforms Grid */}
                {loading ? (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                        {[...Array(6)].map((_, i) => (
                            <LoadingSkeleton key={i} />
                        ))}
                    </div>
                ) : learningPlatforms.length > 0 ? (
                    <>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8">
                            {learningPlatforms.slice(0, 6).map((platform) => (
                                <PlatformCard key={platform.id} platform={platform} />
                            ))}
                        </div>

                        {learningPlatforms.length > 6 && (
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                                {learningPlatforms.slice(6, 12).map((platform) => (
                                    <PlatformCard key={platform.id} platform={platform} />
                                ))}
                            </div>
                        )}
                    </>
                ) : (
                    <div className="text-center py-12 bg-white rounded-xl shadow-sm">
                        <Globe className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                        <h3 className="text-lg font-medium text-gray-800 mb-2">Aucune plateforme trouvée</h3>
                        <p className="text-gray-600">Les plateformes d'apprentissage seront affichées ici une fois ajoutées à la collection BiblioWeb.</p>

                        {/* Bouton pour ajouter des plateformes (pour les administrateurs) */}
                        <div className="mt-6">
                            <a
                                href="/admin/platforms"
                                className="inline-flex items-center px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                                style={{
                                    backgroundColor: `${primaryColor}15`,
                                    color: primaryColor
                                }}
                            >
                                <Globe className="w-4 h-4 mr-2" />
                                Ajouter des plateformes
                            </a>
                        </div>
                    </div>
                )}

                {/* Call to Action */}
                <div className="text-center mt-16">
                    <div
                        className="inline-block p-8 rounded-2xl shadow-xl"
                        style={{
                            background: `linear-gradient(135deg, ${primaryColor}10, ${secondaryColor}10)`
                        }}
                    >
                        <h3 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                            Enrichissez Votre Parcours Académique
                        </h3>
                        <p className="text-gray-600 mb-6 max-w-2xl mx-auto">
                            Ces plateformes d'apprentissage en ligne vous offrent l'opportunité de développer
                            de nouvelles compétences et d'obtenir des certifications reconnues dans le monde entier.
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <a
                                href="/catalogue"
                                className="px-8 py-4 rounded-xl text-white font-semibold transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                                style={{ backgroundColor: primaryColor }}
                            >
                                Explorer notre catalogue
                            </a>
                            <a
                                href="/auth"
                                className="px-8 py-4 rounded-xl font-semibold transition-all duration-300 hover:shadow-lg transform hover:scale-105 border-2"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                            >
                                Créer un compte
                            </a>
                        </div>
                    </div>
                </div>

                {/* Additional info */}
                <div className="mt-12 bg-blue-50 rounded-2xl p-6 border border-blue-200">
                    <div className="flex items-start">
                        <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center mr-4 flex-shrink-0 mt-1">
                            <Play className="w-5 h-5 text-blue-600" />
                        </div>
                        <div>
                            <h4 className="font-bold text-blue-900 mb-2">
                                Recommandation de notre équipe
                            </h4>
                            <p className="text-blue-800 text-sm leading-relaxed">
                                Ces plateformes d'apprentissage en ligne sont soigneusement sélectionnées pour
                                compléter votre formation académique. Elles offrent des cours de qualité, des
                                certifications reconnues et des opportunités d'apprentissage dans de nombreux domaines.
                                Combinez-les avec nos ressources physiques pour une expérience d'apprentissage complète.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default OnlineLearningSection;
// END OF FILE: src/components/home/OnlineLearningSection.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/home/ResourcesSection.tsx

import { useState, useEffect } from 'react';
import { Book, GraduationCap, ArrowRight, Calendar, User, Star, ExternalLink } from 'lucide-react';
import { collection, getDocs, limit, query, Timestamp } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';

// Types pour les commentaires
interface Comment {
    heure: Timestamp;
    nomUser: string;
    note: number;
    texte: string;
}

// Type pour les livres
interface BiblioBook {
    id: string;
    auteur: string;
    cathegorie: string;
    commentaire: Comment[];
    desc: string;
    edition: string;
    etagere: string;
    exemplaire: number;
    image: string;
    initialExemplaire: number;
}

// Type pour les mémoires
interface BiblioThesis {
    id: string;
    abstract: string;
    annee: number;
    commentaire: Comment[];
    département: string;
    etagere: string;
    image: string;
    keywords: string;
    matricule: string;
    name: string;
    pdfUrl: string;
    superviseur: string;
    theme: string;
}

const ResourcesSection: React.FC = () => {
    const { orgSettings } = useConfig();
    const [books, setBooks] = useState<BiblioBook[]>([]);
    const [theses, setTheses] = useState<BiblioThesis[]>([]);
    const [loading, setLoading] = useState<boolean>(true);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    useEffect(() => {
        const fetchResources = async (): Promise<void> => {
            try {
                // Récupérer les livres (limité à 8 pour l'affichage)
                const booksQuery = query(
                    collection(db, 'BiblioBooks'),
                    limit(8)
                );
                const booksSnapshot = await getDocs(booksQuery);
                const booksData: BiblioBook[] = booksSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                } as BiblioBook));

                // Récupérer les mémoires (limité à 8 pour l'affichage)
                const thesesQuery = query(
                    collection(db, 'BiblioThesis'),
                    limit(8)
                );
                const thesesSnapshot = await getDocs(thesesQuery);
                const thesesData: BiblioThesis[] = thesesSnapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                } as BiblioThesis));

                setBooks(booksData);
                setTheses(thesesData);
                setLoading(false);
            } catch (error) {
                console.error('Erreur lors du chargement des ressources:', error);
                setLoading(false);
            }
        };

        fetchResources();
    }, []);

    const BookCard: React.FC<{ book: BiblioBook }> = ({ book }) => {
        const available = book.exemplaire > 0;
        const totalRating = book.commentaire?.reduce((sum, comment) => sum + (comment.note || 0), 0) || 0;
        const avgRating = book.commentaire?.length > 0 ? (totalRating / book.commentaire.length).toFixed(1) : '0';

        return (
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-[1.02] hover:shadow-2xl border border-gray-100 group w-full">
                {/* Image container avec ratio fixe */}
                <div className="relative w-full h-72 overflow-hidden bg-gray-100">
                    <img
                        src={book.image || '/api/placeholder/320/360'}
                        alt={book.auteur}
                        className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                        onError={(e) => {
                            const target = e.target as HTMLImageElement;
                            target.src = '/api/placeholder/320/360';
                        }}
                    />

                    {/* Overlay gradient pour améliorer la lisibilité */}
                    <div className="absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>

                    {/* Status badge - redesigné */}
                    <div className={`absolute top-4 right-4 px-3 py-1 rounded-full text-xs font-semibold shadow-lg backdrop-blur-sm ${
                        available
                            ? 'bg-green-500/90 text-white'
                            : 'bg-red-500/90 text-white'
                    }`}>
                        {available ? `${book.exemplaire} dispo` : 'Emprunté'}
                    </div>

                    {/* Rating badge - repositionné */}
                    {parseFloat(avgRating) > 0 && (
                        <div className="absolute top-4 left-4 flex items-center bg-black/70 backdrop-blur-sm rounded-full px-3 py-1 shadow-lg">
                            <Star className="w-3 h-3 text-yellow-400 fill-current" />
                            <span className="text-white text-xs ml-1 font-medium">{avgRating}</span>
                        </div>
                    )}

                    {/* Catégorie badge en bas à gauche */}
                    <div className="absolute bottom-4 left-4 bg-white/90 backdrop-blur-sm px-3 py-1 rounded-full">
                        <span className="text-xs font-medium text-gray-700">{book.cathegorie}</span>
                    </div>
                </div>

                {/* Contenu de la card */}
                <div className="p-5">
                    {/* Titre du livre */}
                    <h3 className="font-bold text-lg mb-3 line-clamp-2 text-gray-900 leading-tight min-h-[3.5rem]">
                        {book.auteur}
                    </h3>

                    {/* Informations secondaires */}
                    <div className="space-y-2 mb-4">
                        <div className="flex items-center justify-between text-sm">
                            <span className="text-gray-600">Édition</span>
                            <span className="font-medium text-gray-800">{book.edition}</span>
                        </div>

                        <div className="flex items-center justify-between text-sm">
                            <span className="text-gray-600">Étagère</span>
                            <span className="font-medium text-gray-800">{book.etagere}</span>
                        </div>
                    </div>

                    {/* Description */}
                    <p className="text-sm text-gray-600 line-clamp-3 mb-5 leading-relaxed min-h-[4rem]">
                        {book.desc || "Description non disponible pour ce livre."}
                    </p>

                    {/* Bouton d'action */}
                    <div className="space-y-3">
                        <button
                            className="w-full py-3 rounded-xl text-white cursor-pointer font-semibold text-sm transition-all duration-300 hover:shadow-lg transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none flex items-center justify-center"
                            style={{
                                backgroundColor: available ? primaryColor : '#6b7280',
                                boxShadow: available ? `0 4px 14px 0 ${primaryColor}40` : '0 4px 14px 0 rgba(107, 114, 128, 0.25)'
                            }}
                            disabled={!available}
                        >
                            {available ? (
                                <>
                                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    Réserver maintenant
                                </>
                            ) : (
                                <>
                                    <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Liste d'attente
                                </>
                            )}
                        </button>

                        <button className="w-full py-2 border cursor-pointer border-gray-200 rounded-xl text-gray-700 font-medium text-sm transition-all duration-300 hover:bg-gray-50 hover:border-gray-300">
                            Voir les détails
                        </button>
                    </div>
                </div>
            </div>
        );
    };

    const ThesisCard: React.FC<{ thesis: BiblioThesis }> = ({ thesis }) => {
        const hasKeywords = thesis.keywords && thesis.keywords.trim().length > 0;
        const keywordsArray = hasKeywords ? thesis.keywords.split(',').map(k => k.trim()).filter(k => k.length > 0) : [];

        return (
            <div className="bg-white rounded-2xl shadow-lg overflow-hidden transform transition-all duration-300 hover:scale-105 hover:shadow-xl border border-gray-100">
                <div className="p-6">
                    <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                            <h3 className="font-bold text-sm mb-2 line-clamp-2 text-gray-800">{thesis.theme}</h3>
                            <div className="flex items-center text-xs text-gray-600 mb-1">
                                <User className="w-3 h-3 mr-1" />
                                {thesis.name} ({thesis.matricule})
                            </div>
                            <div className="flex items-center text-xs text-gray-600 mb-1">
                                <Calendar className="w-3 h-3 mr-1" />
                                {thesis.annee}
                            </div>
                        </div>

                        <div className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                            Disponible
                        </div>
                    </div>

                    <div className="space-y-2 mb-4">
                        <div className="flex items-center justify-between text-xs">
                            <span className="text-gray-500">Département:</span>
                            <span className="font-medium text-gray-700">{thesis.département}</span>
                        </div>
                        <div className="flex items-center justify-between text-xs">
                            <span className="text-gray-500">Superviseur:</span>
                            <span className="font-medium text-gray-700">{thesis.superviseur}</span>
                        </div>
                        <div className="flex items-center justify-between text-xs">
                            <span className="text-gray-500">Étagère:</span>
                            <span className="font-medium text-gray-700">{thesis.etagere}</span>
                        </div>
                    </div>

                    {thesis.abstract && thesis.abstract.trim().length > 0 && (
                        <p className="text-xs text-gray-600 line-clamp-2 mb-3">{thesis.abstract}</p>
                    )}

                    {keywordsArray.length > 0 && (
                        <div className="mb-3">
                            <div className="flex flex-wrap gap-1">
                                {keywordsArray.slice(0, 3).map((keyword, index) => (
                                    <span
                                        key={index}
                                        className="px-2 py-1 bg-gray-100 rounded-full text-xs text-gray-600"
                                    >
                    {keyword}
                  </span>
                                ))}
                                {keywordsArray.length > 3 && (
                                    <span className="px-2 py-1 bg-gray-100 rounded-full text-xs text-gray-600">
                    +{keywordsArray.length - 3}
                  </span>
                                )}
                            </div>
                        </div>
                    )}

                    <div className="flex gap-2">
                        <button
                            className="flex-1 py-2 rounded-lg text-white font-medium text-sm transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                            style={{ backgroundColor: secondaryColor }}
                        >
                            Consulter
                        </button>
                        {thesis.pdfUrl && thesis.pdfUrl.trim().length > 0 && (
                            <button
                                className="px-3 py-2 rounded-lg border-2 font-medium text-sm transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                                style={{
                                    borderColor: primaryColor,
                                    color: primaryColor
                                }}
                                onClick={() => window.open(thesis.pdfUrl, '_blank')}
                            >
                                <ExternalLink className="w-4 h-4" />
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    };

    const LoadingSkeleton: React.FC<{ type?: 'book' | 'thesis' }> = ({ type = 'book' }) => (
        <div className="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
            {type === 'book' ? (
                <>
                    <div className="aspect-[3/4] bg-gray-200 animate-pulse"></div>
                    <div className="p-4 space-y-3">
                        <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                        <div className="h-3 bg-gray-200 rounded animate-pulse w-3/4"></div>
                        <div className="h-3 bg-gray-200 rounded animate-pulse w-1/2"></div>
                        <div className="h-8 bg-gray-200 rounded animate-pulse"></div>
                    </div>
                </>
            ) : (
                <div className="p-6 space-y-4">
                    <div className="h-4 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-3 bg-gray-200 rounded animate-pulse w-3/4"></div>
                    <div className="space-y-2">
                        <div className="h-3 bg-gray-200 rounded animate-pulse"></div>
                        <div className="h-3 bg-gray-200 rounded animate-pulse"></div>
                        <div className="h-3 bg-gray-200 rounded animate-pulse"></div>
                    </div>
                    <div className="h-8 bg-gray-200 rounded animate-pulse"></div>
                </div>
            )}
        </div>
    );

    if (loading) {
        return (
            <section id="resources-section" className="py-20 bg-gray-50">
                <div className="container mx-auto px-4">
                    {/* Section Header */}
                    <div className="text-center mb-16">
                        <div className="flex justify-center mb-4">
                            <div
                                className="w-16 h-1 rounded-full"
                                style={{
                                    background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                                }}
                            />
                        </div>
                        <h2 className="text-4xl font-bold mb-6" style={{ color: secondaryColor }}>
                            Nos Ressources Académiques
                        </h2>
                        <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                            Chargement des ressources depuis notre base de données...
                        </p>
                    </div>

                    {/* Loading Skeletons */}
                    <div className="mb-20">
                        <div className="flex items-center mb-8">
                            <div className="animate-pulse bg-gray-200 h-8 w-48 rounded"></div>
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                            {[...Array(4)].map((_, i) => (
                                <LoadingSkeleton key={i} type="book" />
                            ))}
                        </div>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                            {[...Array(4)].map((_, i) => (
                                <LoadingSkeleton key={i} type="thesis" />
                            ))}
                        </div>
                    </div>
                </div>
            </section>
        );
    }

    return (
        <section id="resources-section" className="py-20 bg-gray-50">
            <div className="container mx-auto px-4">
                {/* Section Header */}
                <div className="text-center mb-16">
                    <div className="flex justify-center mb-4">
                        <div
                            className="w-16 h-1 rounded-full"
                            style={{
                                background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                            }}
                        />
                    </div>
                    <h2 className="text-4xl font-bold mb-6" style={{ color: secondaryColor }}>
                        Nos Ressources Académiques
                    </h2>
                    <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                        Explorez notre vaste collection de livres académiques et de mémoires de recherche
                        pour enrichir vos connaissances et alimenter vos recherches.
                    </p>
                </div>

                {/* Books Section */}
                <div className="mb-20">
                    <div className="flex items-center justify-between mb-8">
                        <div className="flex items-center">
                            <div
                                className="w-12 h-12 rounded-full flex items-center justify-center mr-4"
                                style={{ backgroundColor: `${primaryColor}15` }}
                            >
                                <Book className="w-6 h-6" style={{ color: primaryColor }} />
                            </div>
                            <div>
                                <h3 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                                    Livres Académiques
                                </h3>
                                <p className="text-gray-600">
                                    {books.length > 0 ? `${books.length} livre${books.length > 1 ? 's' : ''} disponible${books.length > 1 ? 's' : ''}` : 'Collection de livres spécialisés par domaine'}
                                </p>
                            </div>
                        </div>

                        <a
                            href="/catalogue?type=books"
                            className="flex items-center px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                            style={{
                                backgroundColor: `${primaryColor}10`,
                                color: primaryColor
                            }}
                        >
                            Voir tous les livres
                            <ArrowRight className="w-4 h-4 ml-2" />
                        </a>
                    </div>

                    {books.length > 0 ? (
                        <>
                            {/* Grille principale - avec plus d'espace entre les colonnes */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8 mb-8">
                                {books.slice(0, 4).map((book) => (
                                    <BookCard key={book.id} book={book} />
                                ))}
                            </div>

                            {/* Deuxième ligne si plus de 4 livres */}
                            {books.length > 4 && (
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                                    {books.slice(4, 8).map((book) => (
                                        <BookCard key={book.id} book={book} />
                                    ))}
                                </div>
                            )}
                        </>
                    ) : (
                        <div className="text-center py-12 bg-white rounded-xl shadow-sm">
                            <Book className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                            <h3 className="text-lg font-medium text-gray-800 mb-2">Aucun livre trouvé</h3>
                            <p className="text-gray-600">Les livres seront affichés ici une fois ajoutés à la collection.</p>
                        </div>
                    )}
                </div>

                {/* Separator */}
                <div className="flex items-center justify-center mb-20">
                    <div className="h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent w-full max-w-md"></div>
                    <div
                        className="mx-6 w-3 h-3 rounded-full"
                        style={{ backgroundColor: primaryColor }}
                    ></div>
                    <div className="h-px bg-gradient-to-r from-transparent via-gray-300 to-transparent w-full max-w-md"></div>
                </div>

                {/* Theses Section */}
                <div>
                    <div className="flex items-center justify-between mb-8">
                        <div className="flex items-center">
                            <div
                                className="w-12 h-12 rounded-full flex items-center justify-center mr-4"
                                style={{ backgroundColor: `${secondaryColor}15` }}
                            >
                                <GraduationCap className="w-6 h-6" style={{ color: secondaryColor }} />
                            </div>
                            <div>
                                <h3 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                                    Mémoires & Thèses
                                </h3>
                                <p className="text-gray-600">
                                    {theses.length > 0 ? `${theses.length} mémoire${theses.length > 1 ? 's' : ''} disponible${theses.length > 1 ? 's' : ''}` : 'Travaux de recherche et mémoires académiques'}
                                </p>
                            </div>
                        </div>

                        <a
                            href="/catalogue?type=theses"
                            className="flex items-center px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                            style={{
                                backgroundColor: `${secondaryColor}10`,
                                color: secondaryColor
                            }}
                        >
                            Voir tous les mémoires
                            <ArrowRight className="w-4 h-4 ml-2" />
                        </a>
                    </div>

                    {theses.length > 0 ? (
                        <>
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                                {theses.slice(0, 4).map((thesis) => (
                                    <ThesisCard key={thesis.id} thesis={thesis} />
                                ))}
                            </div>

                            {theses.length > 4 && (
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                                    {theses.slice(4, 8).map((thesis) => (
                                        <ThesisCard key={thesis.id} thesis={thesis} />
                                    ))}
                                </div>
                            )}
                        </>
                    ) : (
                        <div className="text-center py-12 bg-white rounded-xl shadow-sm">
                            <GraduationCap className="w-16 h-16 mx-auto mb-4 text-gray-400" />
                            <h3 className="text-lg font-medium text-gray-800 mb-2">Aucun mémoire trouvé</h3>
                            <p className="text-gray-600">Les mémoires seront affichés ici une fois ajoutés à la collection.</p>
                        </div>
                    )}
                </div>

                {/* Call to Action */}
                <div className="text-center mt-16">
                    <div
                        className="inline-block p-8 rounded-2xl shadow-xl"
                        style={{
                            background: `linear-gradient(135deg, ${primaryColor}10, ${secondaryColor}10)`
                        }}
                    >
                        <h3 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                            Besoin d'aide pour trouver une ressource ?
                        </h3>
                        <p className="text-gray-600 mb-6 max-w-md mx-auto">
                            Notre équipe est là pour vous accompagner dans vos recherches académiques.
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <a
                                href="/contact"
                                className="px-6 py-3 rounded-xl text-white font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                                style={{ backgroundColor: primaryColor }}
                            >
                                Contacter un bibliothécaire
                            </a>
                            <a
                                href="/catalogue"
                                className="px-6 py-3 rounded-xl font-medium transition-all duration-300 hover:shadow-lg transform hover:scale-105 border-2"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                            >
                                Recherche avancée
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    );
};

export default ResourcesSection;
// END OF FILE: src/components/home/ResourcesSection.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/home/Statistics.tsx

import { useState, useEffect } from 'react';
import { Book, GraduationCap, Users, UserCheck, TrendingUp, Award, Clock, Building } from 'lucide-react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';

// Types pour les statistiques
interface StatsData {
    books: number;
    theses: number;
    students: number;
    teachers: number;
    totalUsers: number;
    departments: number;
    loading: boolean;
}

interface AnimatedStatsData {
    books: number;
    theses: number;
    students: number;
    teachers: number;
    totalUsers: number;
    departments: number;
}

// Types pour les utilisateurs Firebase
interface BiblioUser {
    statut: 'etudiant' | 'enseignant';
    departement?: string;
}

// Types pour React Component avec icône
type IconComponent = React.ComponentType<{ className?: string; style?: React.CSSProperties; size?: number }>;

// Props pour StatCard
interface StatCardProps {
    icon: IconComponent;
    title: string;
    value: number;
    suffix?: string;
    description: string;
    color: string;
    delay?: number;
    showProgress?: boolean;
    loading?: boolean;
}

// Props pour AchievementBadge
interface AchievementBadgeProps {
    icon: IconComponent;
    title: string;
    description: string;
    color: string;
}

const Statistics: React.FC = () => {
    const { orgSettings } = useConfig();

    const [stats, setStats] = useState<StatsData>({
        books: 0,
        theses: 0,
        students: 0,
        teachers: 0,
        totalUsers: 0,
        departments: 0,
        loading: true
    });

    const [animatedStats, setAnimatedStats] = useState<AnimatedStatsData>({
        books: 0,
        theses: 0,
        students: 0,
        teachers: 0,
        totalUsers: 0,
        departments: 0
    });

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    useEffect(() => {
        const fetchStatistics = async (): Promise<void> => {
            try {
                // Récupérer le nombre de livres
                const booksSnapshot = await getDocs(collection(db, 'BiblioBooks'));
                const booksCount = booksSnapshot.size;

                // Récupérer le nombre de mémoires
                const thesesSnapshot = await getDocs(collection(db, 'BiblioThesis'));
                const thesesCount = thesesSnapshot.size;

                // Récupérer les utilisateurs et analyser par statut
                const usersSnapshot = await getDocs(collection(db, 'BiblioUser'));
                let studentsCount = 0;
                let teachersCount = 0;
                const departmentsSet = new Set<string>();

                usersSnapshot.forEach((doc) => {
                    const userData = doc.data() as BiblioUser;
                    if (userData.statut === 'etudiant') {
                        studentsCount++;
                        if (userData.departement) {
                            departmentsSet.add(userData.departement);
                        }
                    } else if (userData.statut === 'enseignant') {
                        teachersCount++;
                        if (userData.departement) {
                            departmentsSet.add(userData.departement);
                        }
                    }
                });

                const finalStats: StatsData = {
                    books: booksCount,
                    theses: thesesCount,
                    students: studentsCount,
                    teachers: teachersCount,
                    totalUsers: usersSnapshot.size,
                    departments: departmentsSet.size || 8, // Valeur par défaut si aucun département
                    loading: false
                };

                setStats(finalStats);

                // Animation des compteurs
                animateCounters(finalStats);
            } catch (error) {
                console.error('Erreur lors du chargement des statistiques:', error);
                setStats(prev => ({ ...prev, loading: false }));
            }
        };

        fetchStatistics();
    }, []);

    const animateCounters = (finalStats: StatsData): void => {
        const duration = 2000; // 2 secondes
        const steps = 60;
        const stepDuration = duration / steps;

        let currentStep = 0;
        const interval = setInterval(() => {
            currentStep++;
            const progress = currentStep / steps;

            setAnimatedStats({
                books: Math.floor(finalStats.books * progress),
                theses: Math.floor(finalStats.theses * progress),
                students: Math.floor(finalStats.students * progress),
                teachers: Math.floor(finalStats.teachers * progress),
                totalUsers: Math.floor(finalStats.totalUsers * progress),
                departments: Math.floor(finalStats.departments * progress)
            });

            if (currentStep >= steps) {
                clearInterval(interval);
                setAnimatedStats({
                    books: finalStats.books,
                    theses: finalStats.theses,
                    students: finalStats.students,
                    teachers: finalStats.teachers,
                    totalUsers: finalStats.totalUsers,
                    departments: finalStats.departments
                });
            }
        }, stepDuration);
    };

    const StatCard: React.FC<StatCardProps> = ({
                                                   icon: Icon,
                                                   title,
                                                   value,
                                                   suffix = '',
                                                   description,
                                                   color,
                                                   delay = 0,
                                                   showProgress = false,
                                                   loading = false
                                               }) => (
        <div
            className="bg-white rounded-2xl p-6 shadow-lg transform transition-all duration-500 hover:scale-105 hover:shadow-xl border border-gray-100"
            style={{
                animationDelay: `${delay}ms`,
                animation: loading ? 'none' : 'fadeInUp 0.6s ease-out forwards'
            }}
        >
            <div className="flex items-center justify-between mb-4">
                <div
                    className="w-14 h-14 rounded-2xl flex items-center justify-center shadow-lg"
                    style={{ backgroundColor: `${color}15` }}
                >
                    <Icon className="w-7 h-7" style={{ color }} />
                </div>

                <div className="text-right">
                    <div className="flex items-baseline">
                        {loading ? (
                            <div className="animate-pulse bg-gray-200 h-8 w-12 rounded"></div>
                        ) : (
                            <>
                <span
                    className="text-3xl font-bold"
                    style={{ color }}
                >
                  {value.toLocaleString()}
                </span>
                                {suffix && (
                                    <span
                                        className="text-lg font-medium ml-1"
                                        style={{ color }}
                                    >
                    {suffix}
                  </span>
                                )}
                            </>
                        )}
                    </div>
                </div>
            </div>

            <h3 className="font-bold text-gray-800 mb-1">{title}</h3>
            <p className="text-sm text-gray-600">{description}</p>

            {/* Progress bar optionnelle */}
            {showProgress && !loading && (
                <div className="mt-3">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                            className="h-2 rounded-full transition-all duration-1000"
                            style={{
                                width: `${Math.min((value / 100) * 100, 100)}%`,
                                backgroundColor: color
                            }}
                        ></div>
                    </div>
                </div>
            )}
        </div>
    );

    const AchievementBadge: React.FC<AchievementBadgeProps> = ({ icon: Icon, title, description, color }) => (
        <div className="flex items-center p-4 bg-white rounded-xl shadow-md border border-gray-100 hover:shadow-lg transition-all duration-300">
            <div
                className="w-12 h-12 rounded-full flex items-center justify-center mr-4 flex-shrink-0"
                style={{ backgroundColor: `${color}15` }}
            >
                <Icon className="w-6 h-6" style={{ color }} />
            </div>
            <div>
                <h4 className="font-bold text-gray-800">{title}</h4>
                <p className="text-sm text-gray-600">{description}</p>
            </div>
        </div>
    );

    return (
        <section className="py-20 bg-white relative overflow-hidden">
            {/* Background decorations */}
            <div className="absolute inset-0">
                <div
                    className="absolute top-20 right-20 w-64 h-64 rounded-full opacity-5 blur-3xl"
                    style={{ backgroundColor: primaryColor }}
                ></div>
                <div
                    className="absolute bottom-20 left-20 w-48 h-48 rounded-full opacity-5 blur-3xl"
                    style={{ backgroundColor: secondaryColor }}
                ></div>
            </div>

            <div className="container mx-auto px-4 relative z-10">
                {/* Section Header */}
                <div className="text-center mb-16">
                    <div className="flex justify-center mb-4">
                        <div
                            className="w-16 h-1 rounded-full"
                            style={{
                                background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                            }}
                        />
                    </div>

                    <span
                        className="inline-block py-2 px-4 rounded-full text-sm font-bold mb-4"
                        style={{
                            backgroundColor: `${primaryColor}10`,
                            color: primaryColor
                        }}
                    >
            Statistiques {organizationName}
          </span>

                    <h2 className="text-4xl font-bold mb-6" style={{ color: secondaryColor }}>
                        Notre Impact Académique
                    </h2>

                    <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                        Découvrez les chiffres qui témoignent de notre engagement
                        envers l'excellence académique et l'innovation pédagogique.
                    </p>
                </div>

                {/* Main Statistics Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
                    <StatCard
                        icon={Book}
                        title="Livres Disponibles"
                        value={animatedStats.books}
                        description="Ouvrages académiques et scientifiques"
                        color={primaryColor}
                        delay={100}
                        loading={stats.loading}
                    />

                    <StatCard
                        icon={GraduationCap}
                        title="Mémoires & Thèses"
                        value={animatedStats.theses}
                        description="Travaux de recherche archivés"
                        color={secondaryColor}
                        delay={200}
                        loading={stats.loading}
                    />

                    <StatCard
                        icon={Users}
                        title="Étudiants Actifs"
                        value={animatedStats.students}
                        description="Membres étudiants inscrits"
                        color={primaryColor}
                        delay={300}
                        loading={stats.loading}
                    />

                    <StatCard
                        icon={UserCheck}
                        title="Enseignants"
                        value={animatedStats.teachers}
                        description="Corps professoral enregistré"
                        color={secondaryColor}
                        delay={400}
                        loading={stats.loading}
                    />
                </div>

                {/* Secondary Statistics */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-16">
                    <StatCard
                        icon={TrendingUp}
                        title="Total Utilisateurs"
                        value={animatedStats.totalUsers}
                        description="Ensemble de la communauté"
                        color="#10b981"
                        delay={500}
                        loading={stats.loading}
                    />

                    <StatCard
                        icon={Building}
                        title="Départements"
                        value={animatedStats.departments}
                        description="Filières académiques couvertes"
                        color="#8b5cf6"
                        delay={600}
                        loading={stats.loading}
                    />

                    <StatCard
                        icon={Award}
                        title="Taux d'Activité"
                        value={stats.totalUsers > 0 ? Math.round((animatedStats.students + animatedStats.teachers) / animatedStats.totalUsers * 100) : 0}
                        suffix="%"
                        description="Utilisateurs actifs vs inscrits"
                        color="#f59e0b"
                        delay={700}
                        showProgress={true}
                        loading={stats.loading}
                    />

                    <StatCard
                        icon={Clock}
                        title="Ressources par Utilisateur"
                        value={animatedStats.totalUsers > 0 ? Math.round((animatedStats.books + animatedStats.theses) / animatedStats.totalUsers) : 0}
                        description="Ratio ressources/utilisateur"
                        color="#ef4444"
                        delay={800}
                        loading={stats.loading}
                    />
                </div>

                {/* Achievements Section */}
                <div className="bg-gray-50 rounded-3xl p-8">
                    <div className="text-center mb-8">
                        <h3 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                            Nos Réalisations
                        </h3>
                        <p className="text-gray-600">
                            Reconnaissances et accomplissements de notre bibliothèque universitaire
                        </p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <AchievementBadge
                            icon={Award}
                            title="Système Digitalisé"
                            description="Gestion moderne et efficace des ressources"
                            color="#f59e0b"
                        />

                        <AchievementBadge
                            icon={TrendingUp}
                            title="Croissance Continue"
                            description={`${animatedStats.books + animatedStats.theses} ressources disponibles`}
                            color="#10b981"
                        />

                        <AchievementBadge
                            icon={Users}
                            title="Communauté Active"
                            description={`${animatedStats.totalUsers} membres de la communauté`}
                            color="#3b82f6"
                        />

                        <AchievementBadge
                            icon={Book}
                            title="Collection Diversifiée"
                            description={`${animatedStats.departments} départements couverts`}
                            color={primaryColor}
                        />

                        <AchievementBadge
                            icon={GraduationCap}
                            title="Recherche Académique"
                            description="Soutien à la recherche universitaire"
                            color={secondaryColor}
                        />

                        <AchievementBadge
                            icon={Clock}
                            title="Disponibilité 24/7"
                            description="Accès en ligne à tout moment"
                            color="#8b5cf6"
                        />
                    </div>
                </div>

                {/* Call to Action */}
                <div className="text-center mt-16">
                    <div
                        className="inline-block p-8 rounded-2xl shadow-xl"
                        style={{
                            background: `linear-gradient(135deg, ${primaryColor}10, ${secondaryColor}10)`
                        }}
                    >
                        <h3 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                            Rejoignez Notre Communauté Académique
                        </h3>
                        <p className="text-gray-600 mb-6 max-w-md mx-auto">
                            Devenez membre de {organizationName} et accédez à toutes nos ressources
                            pour enrichir votre parcours académique.
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <a
                                href="/auth"
                                className="px-8 py-4 rounded-xl text-white font-semibold transition-all duration-300 hover:shadow-lg transform hover:scale-105"
                                style={{ backgroundColor: primaryColor }}
                            >
                                S'inscrire maintenant
                            </a>
                            <a
                                href="/catalogue"
                                className="px-8 py-4 rounded-xl font-semibold transition-all duration-300 hover:shadow-lg transform hover:scale-105 border-2"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                            >
                                Explorer le catalogue
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <style>{`
        @keyframes fadeInUp {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
      `}</style>
        </section>
    );
};

export default Statistics;
// END OF FILE: src/components/home/Statistics.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/layout/Footer.tsx

import { useConfig } from '../../contexts/ConfigContext.tsx';
import { configService } from '../../services/configService.ts';
import { Mail, Phone, Facebook, Instagram, Clock, MapPin } from 'lucide-react';

const Footer = () => {
    const currentYear = new Date().getFullYear();
    const { orgSettings, isLoading } = useConfig();

    if (isLoading) {
        return (
            <footer className="bg-gray-800 text-white py-6">
                <div className="container mx-auto px-4">
                    <div className="animate-pulse">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                            <div className="space-y-4">
                                <div className="h-6 bg-gray-700 rounded w-3/4"></div>
                                <div className="h-4 bg-gray-700 rounded"></div>
                                <div className="h-4 bg-gray-700 rounded w-5/6"></div>
                            </div>
                            <div className="space-y-4">
                                <div className="h-6 bg-gray-700 rounded w-2/3"></div>
                                <div className="space-y-2">
                                    <div className="h-4 bg-gray-700 rounded w-1/2"></div>
                                    <div className="h-4 bg-gray-700 rounded w-2/3"></div>
                                    <div className="h-4 bg-gray-700 rounded w-1/2"></div>
                                </div>
                            </div>
                            <div className="space-y-4">
                                <div className="h-6 bg-gray-700 rounded w-1/2"></div>
                                <div className="space-y-2">
                                    <div className="h-4 bg-gray-700 rounded"></div>
                                    <div className="h-4 bg-gray-700 rounded w-3/4"></div>
                                    <div className="h-4 bg-gray-700 rounded w-1/2"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </footer>
        );
    }

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Générer les horaires d'ouverture pour la semaine
    const getWeekSchedule = () => {
        if (!orgSettings?.OpeningHours) return [];

        const days = [
            { key: 'Monday', label: 'Lundi' },
            { key: 'Tuesday', label: 'Mardi' },
            { key: 'Wednesday', label: 'Mercredi' },
            { key: 'Thursday', label: 'Jeudi' },
            { key: 'Friday', label: 'Vendredi' },
            { key: 'Saturday', label: 'Samedi' },
            { key: 'Sunday', label: 'Dimanche' }
        ];

        return days.map(day => ({
            ...day,
            hours: configService.formatOpeningHours(orgSettings.OpeningHours[day.key as keyof typeof orgSettings.OpeningHours])
        }));
    };

    const weekSchedule = getWeekSchedule();

    return (
        <footer
            className="text-white py-12"
            style={{ backgroundColor: '#222449' }}
        >
            <div className="container mx-auto px-4">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                    {/* Informations de l'organisation */}
                    <div className="lg:col-span-1">
                        <div className="flex items-center space-x-3 mb-4">
                            {orgSettings?.Logo && (
                                <img
                                    src={orgSettings.Logo}
                                    alt={orgSettings.Name}
                                    className="h-12 w-12 object-contain"
                                />
                            )}
                            <h3 className="text-xl font-bold">{orgSettings?.Name || 'BiblioENSPY'}</h3>
                        </div>
                        <p className="text-gray-300 mb-4">
                            Votre bibliothèque en ligne accessible à tout moment pour réserver et emprunter des livres.
                        </p>

                        {/* Réseaux sociaux */}
                        <div className="flex space-x-4 mt-4">
                            {orgSettings?.Contact.Facebook && (
                                <a
                                    href={orgSettings.Contact.Facebook}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="p-2 rounded-full bg-white bg-opacity-10 hover:bg-opacity-20 transition-colors"
                                    style={{ color: primaryColor }}
                                >
                                    <Facebook size={20} />
                                </a>
                            )}
                            {orgSettings?.Contact.Instagram && (
                                <a
                                    href={orgSettings.Contact.Instagram}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="p-2 rounded-full bg-white bg-opacity-10 hover:bg-opacity-20 transition-colors"
                                    style={{ color: primaryColor }}
                                >
                                    <Instagram size={20} />
                                </a>
                            )}
                        </div>
                    </div>

                    {/* Liens rapides */}
                    <div>
                        <h3 className="text-lg font-bold mb-4">Liens rapides</h3>
                        <ul className="space-y-2">
                            <li>
                                <a
                                    href="/catalogue"
                                    className="text-gray-300 transition-colors"
                                    style={{ '--hover-color': primaryColor } as React.CSSProperties}
                                    onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                    onMouseLeave={(e) => e.currentTarget.style.color = '#d1d5db'}
                                >
                                    Catalogue
                                </a>
                            </li>
                            <li>
                                <a
                                    href="/dashboard/cart"
                                    className="text-gray-300 transition-colors"
                                    onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                    onMouseLeave={(e) => e.currentTarget.style.color = '#d1d5db'}
                                >
                                    Mes réservations
                                </a>
                            </li>
                            <li>
                                <a
                                    href="/dashboard/reservations"
                                    className="text-gray-300 transition-colors"
                                    onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                    onMouseLeave={(e) => e.currentTarget.style.color = '#d1d5db'}
                                >
                                    Mes emprunts
                                </a>
                            </li>
                            <li>
                                <a
                                    href="/aide"
                                    className="text-gray-300 transition-colors"
                                    onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                    onMouseLeave={(e) => e.currentTarget.style.color = '#d1d5db'}
                                >
                                    Aide & Support
                                </a>
                            </li>
                        </ul>
                    </div>

                    {/* Contact */}
                    <div>
                        <h3 className="text-lg font-bold mb-4">Contact</h3>
                        <div className="space-y-3">
                            {/* Adresse */}
                            {orgSettings?.Address && (
                                <div className="flex items-start space-x-3">
                                    <MapPin size={18} className="mt-0.5 flex-shrink-0" style={{ color: primaryColor }} />
                                    <div>
                                        <p className="text-gray-300 text-sm">{orgSettings.Address}</p>
                                    </div>
                                </div>
                            )}

                            {/* Email */}
                            {orgSettings?.Contact.Email && (
                                <div className="flex items-center space-x-3">
                                    <Mail size={18} style={{ color: primaryColor }} />
                                    <a
                                        href={`mailto:${orgSettings.Contact.Email}`}
                                        className="text-gray-300 text-sm hover:underline transition-colors"
                                        onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                        onMouseLeave={(e) => e.currentTarget.style.color = '#d1d5db'}
                                    >
                                        {orgSettings.Contact.Email}
                                    </a>
                                </div>
                            )}

                            {/* Téléphone */}
                            {orgSettings?.Contact.Phone && (
                                <div className="flex items-center space-x-3">
                                    <Phone size={18} style={{ color: primaryColor }} />
                                    <a
                                        href={`tel:${orgSettings.Contact.Phone}`}
                                        className="text-gray-300 text-sm hover:underline transition-colors"
                                        onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                        onMouseLeave={(e) => e.currentTarget.style.color = '#d1d5db'}
                                    >
                                        {orgSettings.Contact.Phone}
                                    </a>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Horaires d'ouverture */}
                    <div>
                        <h3 className="text-lg font-bold mb-4 flex items-center">
                            <Clock size={18} className="mr-2" style={{ color: primaryColor }} />
                            Horaires d'ouverture
                        </h3>
                        <div className="space-y-2">
                            {weekSchedule.map(day => (
                                <div key={day.key} className="flex justify-between text-sm">
                                    <span className="text-gray-300">{day.label}</span>
                                    <span
                                        className={`font-medium ${day.hours === 'Fermé' ? 'text-red-400' : 'text-green-400'}`}
                                    >
                    {day.hours}
                  </span>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>

                {/* Séparateur et copyright */}
                <div
                    className="border-t mt-8 pt-6 text-center"
                    style={{ borderColor: `${primaryColor}40` }}
                >
                    <div className="flex flex-col md:flex-row justify-between items-center">
                        <p className="text-gray-400 text-sm">
                            &copy; {currentYear} {orgSettings?.Name || 'BiblioENSPY'}. Tous droits réservés.
                        </p>
                        <div className="flex space-x-4 mt-4 md:mt-0">
                            <a
                                href="/privacy"
                                className="text-gray-400 text-sm hover:underline transition-colors"
                                onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                onMouseLeave={(e) => e.currentTarget.style.color = '#9ca3af'}
                            >
                                Politique de confidentialité
                            </a>
                            <a
                                href="/terms"
                                className="text-gray-400 text-sm hover:underline transition-colors"
                                onMouseEnter={(e) => e.currentTarget.style.color = primaryColor}
                                onMouseLeave={(e) => e.currentTarget.style.color = '#9ca3af'}
                            >
                                Conditions d'utilisation
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
    );
};

export default Footer;
// END OF FILE: src/components/layout/Footer.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/layout/Header.tsx

// src/components/layout/Header.tsx
import React, { useState, useEffect } from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { onAuthStateChanged, User as FirebaseUser } from 'firebase/auth';
import { auth } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';
import { authService } from '../../services/auth/authService';
import { BiblioUser } from '../../types/auth';

import {
    Search,
    ShoppingBag,
    User,
    Menu,
    X,
    LogOut,
    Settings,
    BookOpen,
    Bell
} from 'lucide-react';

const Header: React.FC = () => {
    const navigate = useNavigate();
    const { orgSettings, isLoading } = useConfig();

    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [scrolled, setScrolled] = useState(false);
    const [reservationCount, setReservationCount] = useState(3);
    const [currentUser, setCurrentUser] = useState<BiblioUser | null>(null);
    const [firebaseUser, setFirebaseUser] = useState<FirebaseUser | null>(null);
    const [showUserMenu, setShowUserMenu] = useState(false);

    // Configuration depuis Firebase
    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    // Effet pour détecter le défilement
    useEffect(() => {
        const handleScroll = () => {
            setScrolled(window.scrollY > 10);
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    // Effet pour surveiller l'état d'authentification
    useEffect(() => {
        const unsubscribe = onAuthStateChanged(auth, async (user) => {
            setFirebaseUser(user);
            if (user && user.emailVerified) {
                try {
                    const biblioUser = await authService.getCurrentUser();
                    setCurrentUser(biblioUser);
                } catch (error) {
                    console.error('Erreur récupération utilisateur:', error);
                }
            } else {
                setCurrentUser(null);
            }
        });

        return () => unsubscribe();
    }, []);

    // Gestion de la déconnexion
    const handleLogout = async () => {
        try {
            await authService.signOut();
            setCurrentUser(null);
            setFirebaseUser(null);
            setShowUserMenu(false);
            navigate('/', { replace: true });
        } catch (error) {
            console.error('Erreur déconnexion:', error);
        }
    };

    // Fermer le menu utilisateur quand on clique ailleurs
    useEffect(() => {
        const handleClickOutside = () => {
            setShowUserMenu(false);
        };

        if (showUserMenu) {
            document.addEventListener('click', handleClickOutside);
            return () => document.removeEventListener('click', handleClickOutside);
        }
    }, [showUserMenu]);

    if (isLoading) {
        return (
            <header className={`fixed w-full z-50 transition-all duration-300 ${
                scrolled ? 'bg-white text-gray-800 shadow-lg py-2' : 'bg-transparent text-white py-4'
            }`}>
                <div className="container mx-auto px-4 flex justify-between items-center">
                    <div className="animate-pulse">
                        <div className="h-8 w-32 bg-gray-200 rounded"></div>
                    </div>
                </div>
            </header>
        );
    }

    return (
        <header
            className={`fixed w-full z-50 transition-all duration-300 ${
                scrolled ? 'bg-white text-gray-800 shadow-lg py-2' : 'bg-transparent text-white py-4'
            }`}
        >
            <div className="container mx-auto px-4 flex justify-between items-center">
                {/* Logo */}
                <NavLink to="/" className="flex items-center space-x-2">
                    {orgSettings?.Logo && (
                        <img
                            src={orgSettings.Logo}
                            alt={organizationName}
                            className="h-10 w-10 object-contain"
                        />
                    )}
                    <div
                        className={`font-bold text-2xl transition-colors ${
                            scrolled ? 'text-gray-800' : 'text-white'
                        }`}
                        style={{
                            color: scrolled ? primaryColor : undefined
                        }}
                    >
                        {organizationName}
                    </div>
                </NavLink>

                {/* Navigation principale pour desktop */}
                <nav className="hidden lg:flex items-center space-x-8">
                    <NavLink
                        to="/"
                        className={({isActive}) => `
              relative transition-all duration-200 py-2 px-1 group
              ${isActive ? '' : scrolled ? 'text-gray-700' : 'text-white'}
            `}
                        style={({isActive}) => isActive ? { color: primaryColor } : {}}
                    >
                        Accueil
                        <span
                            className="absolute bottom-0 left-0 w-0 h-0.5 transition-all duration-300 group-hover:w-full"
                            style={{ backgroundColor: primaryColor }}
                        />
                    </NavLink>

                    <NavLink
                        to="/Books"
                        className={({isActive}) => `
              relative transition-all duration-200 py-2 px-1 group
              ${isActive ? '' : scrolled ? 'text-gray-700' : 'text-white'}
            `}
                        style={({isActive}) => isActive ? { color: primaryColor } : {}}
                    >
                        Livres
                        <span
                            className="absolute bottom-0 left-0 w-0 h-0.5 transition-all duration-300 group-hover:w-full"
                            style={{ backgroundColor: primaryColor }}
                        />
                    </NavLink>

                    <NavLink
                        to="/Thesis"
                        className={({isActive}) => `
              relative transition-all duration-200 py-2 px-1 group
              ${isActive ? '' : scrolled ? 'text-gray-700' : 'text-white'}
            `}
                        style={({isActive}) => isActive ? { color: primaryColor } : {}}
                    >
                        Memoires
                        <span
                            className="absolute bottom-0 left-0 w-0 h-0.5 transition-all duration-300 group-hover:w-full"
                            style={{ backgroundColor: primaryColor }}
                        />
                    </NavLink>

                    <NavLink
                        to="/aide"
                        className={({isActive}) => `
              relative transition-all duration-200 py-2 px-1 group
              ${isActive ? '' : scrolled ? 'text-gray-700' : 'text-white'}
            `}
                        style={({isActive}) => isActive ? { color: primaryColor } : {}}
                    >
                        Aide
                        <span
                            className="absolute bottom-0 left-0 w-0 h-0.5 transition-all duration-300 group-hover:w-full"
                            style={{ backgroundColor: primaryColor }}
                        />
                    </NavLink>
                </nav>

                {/* Actions pour desktop */}
                <div className="hidden lg:flex items-center space-x-4">
                    {/* Recherche */}
                    <button
                        className={`p-2 rounded-full transition-all hover:bg-opacity-10 ${
                            scrolled ? 'text-gray-700' : 'text-white'
                        }`}
                        style={{
                            '--hover-bg': secondaryColor
                        } as React.CSSProperties}
                        onMouseEnter={(e) => {
                            e.currentTarget.style.backgroundColor = `${secondaryColor}10`;
                            e.currentTarget.style.color = primaryColor;
                        }}
                        onMouseLeave={(e) => {
                            e.currentTarget.style.backgroundColor = 'transparent';
                            e.currentTarget.style.color = scrolled ? '#374151' : 'white';
                        }}
                    >
                        <Search size={20} />
                    </button>

                    {/* Panier avec badge */}
                    {currentUser && (
                        <div className="relative">
                            <NavLink
                                to="/dashboard/cart"
                                className={`p-2 rounded-full transition-all hover:bg-opacity-10 ${
                                    scrolled ? 'text-gray-700' : 'text-white'
                                }`}
                                onMouseEnter={(e) => {
                                    e.currentTarget.style.backgroundColor = `${secondaryColor}10`;
                                    e.currentTarget.style.color = primaryColor;
                                }}
                                onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = 'transparent';
                                    e.currentTarget.style.color = scrolled ? '#374151' : 'white';
                                }}
                            >
                                <ShoppingBag size={20} />
                                {reservationCount > 0 && (
                                    <span
                                        className="absolute -top-1 -right-1 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
                                        style={{ backgroundColor: primaryColor }}
                                    >
                    {reservationCount}
                  </span>
                                )}
                            </NavLink>
                        </div>
                    )}

                    {/* Profil utilisateur ou bouton connexion */}
                    {currentUser ? (
                        <div className="relative">
                            <button
                                onClick={(e) => {
                                    e.stopPropagation();
                                    setShowUserMenu(!showUserMenu);
                                }}
                                className="flex items-center space-x-2 p-2 rounded-full transition-all hover:bg-opacity-10"
                                onMouseEnter={(e) => {
                                    e.currentTarget.style.backgroundColor = `${secondaryColor}10`;
                                }}
                                onMouseLeave={(e) => {
                                    e.currentTarget.style.backgroundColor = 'transparent';
                                }}
                            >
                                {currentUser.profilePicture ? (
                                    <img
                                        src={currentUser.profilePicture}
                                        alt={currentUser.name}
                                        className="w-8 h-8 rounded-full object-cover border-2 border-white"
                                    />
                                ) : (
                                    <div
                                        className="w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold"
                                        style={{ backgroundColor: primaryColor }}
                                    >
                                        {currentUser.name.charAt(0).toUpperCase()}
                                    </div>
                                )}
                                <span className={`hidden md:block ${scrolled ? 'text-gray-700' : 'text-white'}`}>
                  {currentUser.name.split(' ')[0]}
                </span>
                            </button>

                            {/* Menu déroulant utilisateur */}
                            {showUserMenu && (
                                <div
                                    className="absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-xl border py-2 z-50"
                                    onClick={(e) => e.stopPropagation()}
                                >
                                    {/* Info utilisateur */}
                                    <div className="px-4 py-3 border-b">
                                        <div className="flex items-center space-x-3">
                                            {currentUser.profilePicture ? (
                                                <img
                                                    src={currentUser.profilePicture}
                                                    alt={currentUser.name}
                                                    className="w-10 h-10 rounded-full object-cover"
                                                />
                                            ) : (
                                                <div
                                                    className="w-10 h-10 rounded-full flex items-center justify-center text-white font-bold"
                                                    style={{ backgroundColor: primaryColor }}
                                                >
                                                    {currentUser.name.charAt(0).toUpperCase()}
                                                </div>
                                            )}
                                            <div>
                                                <p className="font-semibold text-gray-800">{currentUser.name}</p>
                                                <p className="text-sm text-gray-500">{currentUser.email}</p>
                                                <p className="text-xs" style={{ color: primaryColor }}>
                                                    {currentUser.statut === 'etudiant' ? 'Étudiant' : 'Enseignant'}
                                                </p>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Menu items */}
                                    <div className="py-1">
                                        <NavLink
                                            to="/dashboard"
                                            className="flex items-center px-4 py-2 text-gray-700 hover:bg-gray-100 transition-colors"
                                            onClick={() => setShowUserMenu(false)}
                                        >
                                            <User className="h-4 w-4 mr-3" />
                                            Mon Dashboard
                                        </NavLink>

                                        <NavLink
                                            to="/dashboard/profile"
                                            className="flex items-center px-4 py-2 text-gray-700 hover:bg-gray-100 transition-colors"
                                            onClick={() => setShowUserMenu(false)}
                                        >
                                            <Settings className="h-4 w-4 mr-3" />
                                            Paramètres
                                        </NavLink>

                                        <NavLink
                                            to="/dashboard/reservations"
                                            className="flex items-center px-4 py-2 text-gray-700 hover:bg-gray-100 transition-colors"
                                            onClick={() => setShowUserMenu(false)}
                                        >
                                            <BookOpen className="h-4 w-4 mr-3" />
                                            Mes Emprunts
                                        </NavLink>

                                        <NavLink
                                            to="/dashboard/notifications"
                                            className="flex items-center px-4 py-2 text-gray-700 hover:bg-gray-100 transition-colors"
                                            onClick={() => setShowUserMenu(false)}
                                        >
                                            <Bell className="h-4 w-4 mr-3" />
                                            Notifications
                                        </NavLink>
                                    </div>

                                    {/* Déconnexion */}
                                    <div className="border-t pt-1">
                                        <button
                                            onClick={handleLogout}
                                            className="flex items-center w-full px-4 py-2 text-red-600 hover:bg-red-50 transition-colors"
                                        >
                                            <LogOut className="h-4 w-4 mr-3" />
                                            Se déconnecter
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    ) : (
                        <NavLink
                            to="/auth"
                            className="px-5 py-2 rounded-md transition-all duration-300 text-white font-medium"
                            style={{
                                backgroundColor: scrolled ? secondaryColor : primaryColor
                            }}
                            onMouseEnter={(e) => {
                                e.currentTarget.style.backgroundColor = scrolled ? primaryColor : secondaryColor;
                            }}
                            onMouseLeave={(e) => {
                                e.currentTarget.style.backgroundColor = scrolled ? secondaryColor : primaryColor;
                            }}
                        >
                            Connexion
                        </NavLink>
                    )}
                </div>

                {/* Bouton menu mobile */}
                <button
                    className="lg:hidden p-2 rounded-full transition-colors"
                    onClick={() => setIsMenuOpen(!isMenuOpen)}
                >
                    {isMenuOpen ? (
                        <X size={24} className={scrolled ? 'text-gray-800' : 'text-white'} />
                    ) : (
                        <Menu size={24} className={scrolled ? 'text-gray-800' : 'text-white'} />
                    )}
                </button>
            </div>

            {/* Menu mobile */}
            {isMenuOpen && (
                <div className="lg:hidden absolute top-full left-0 right-0 bg-white text-gray-800 shadow-lg">
                    <div className="container mx-auto px-4 py-4">
                        <nav className="flex flex-col space-y-4">
                            <NavLink
                                to="/"
                                className={({isActive}) =>
                                    `py-2 px-4 rounded-md transition-colors ${isActive
                                        ? 'font-medium'
                                        : 'hover:bg-gray-100'}`
                                }
                                style={({isActive}) => isActive ? {
                                    backgroundColor: `${primaryColor}15`,
                                    color: primaryColor
                                } : {}}
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Accueil
                            </NavLink>

                            <NavLink
                                to="/books"
                                className={({isActive}) =>
                                    `py-2 px-4 rounded-md transition-colors ${isActive
                                        ? 'font-medium'
                                        : 'hover:bg-gray-100'}`
                                }
                                style={({isActive}) => isActive ? {
                                    backgroundColor: `${primaryColor}15`,
                                    color: primaryColor
                                } : {}}
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Livres
                            </NavLink>

                            <NavLink
                                to="/Thesis"
                                className={({isActive}) =>
                                    `py-2 px-4 rounded-md transition-colors ${isActive
                                        ? 'font-medium'
                                        : 'hover:bg-gray-100'}`
                                }
                                style={({isActive}) => isActive ? {
                                    backgroundColor: `${primaryColor}15`,
                                    color: primaryColor
                                } : {}}
                                onClick={() => setIsMenuOpen(false)}
                            >
                                Memoire
                            </NavLink>

                            <NavLink
                                to="/help"
                                className={({isActive}) =>
                                    `py-2 px-4 rounded-md transition-colors ${isActive
                                        ? 'font-medium'
                                        : 'hover:bg-gray-100'}`
                                }
                                style={({isActive}) => isActive ? {
                                    backgroundColor: `${primaryColor}15`,
                                    color: primaryColor
                                } : {}}
                                onClick={() => setIsMenuOpen(false)}
                            >
                                aide
                            </NavLink>

                            {currentUser ? (
                                <>
                                    <NavLink
                                        to="/dashboard"
                                        className={({isActive}) =>
                                            `py-2 px-4 rounded-md transition-colors flex items-center space-x-3 ${isActive
                                                ? 'font-medium'
                                                : 'hover:bg-gray-100'}`
                                        }
                                        style={({isActive}) => isActive ? {
                                            backgroundColor: `${primaryColor}15`,
                                            color: primaryColor
                                        } : {}}
                                        onClick={() => setIsMenuOpen(false)}
                                    >
                                        <User size={18} />
                                        <span>Mon Dashboard</span>
                                    </NavLink>

                                    <button
                                        onClick={handleLogout}
                                        className="py-2 px-4 rounded-md transition-colors flex items-center space-x-3 hover:bg-red-50 text-red-600 text-left"
                                    >
                                        <LogOut size={18} />
                                        <span>Se déconnecter</span>
                                    </button>
                                </>
                            ) : (
                                <NavLink
                                    to="/auth"
                                    className="mt-2 text-white font-medium py-3 rounded-md text-center transition-colors"
                                    style={{ backgroundColor: secondaryColor }}
                                    onClick={() => setIsMenuOpen(false)}
                                >
                                    Connexion
                                </NavLink>
                            )}
                        </nav>
                    </div>
                </div>
            )}
        </header>
    );
};

export default Header;
// END OF FILE: src/components/layout/Header.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/Sidebar.tsx

//Sidebar.jsx
import { NavLink } from 'react-router-dom';
import { 
  User, 
  Calendar, 
  ShoppingCart, 
  MessageCircle, 
  History, 
  Bell, 
  LogOut,
  ChevronLeft,
  ChevronRight
} from 'lucide-react';
import SidebarItem from './SidebarItem';

const Sidebar = ({ collapsed, toggleSidebar }) => {
  const menuItems = [
    { 
      path: '/dashboard/profile', 
      name: 'Profil', 
      icon: <User /> 
    },
    { 
      path: '/dashboard/dashboard/cart', 
      name: ' Réservations', 
      icon: <Calendar /> 
    },
    { 
      path: '/dashboard/cart', 
      name: ' Panier', 
      icon: <ShoppingCart /> 
    },
    { 
      path: '/dashboard/chat', 
      name: 'Chat', 
      icon: <MessageCircle /> 
    },
    { 
      path: '/dashboard/history', 
      name: 'Historique', 
      icon: <History /> 
    },
    { 
      path: '/dashboard/notifications', 
      name: 'Notifications', 
      icon: <Bell /> 
    }
  ];

  return (
    <div 
      className="fixed h-full bg-white shadow-lg transition-all duration-300 z-10"
      style={{ 
        width: collapsed ? 'var(--sidebar-collapsed-width)' : 'var(--sidebar-width)',
      }}
    >
      <div className="flex items-center justify-between p-4 border-b">
        {!collapsed && (
          <div className="text-xl font-bold" style={{ color: 'var(--secondary-color)' }}>
            BiblioENSPY
          </div>
        )}
        <button 
          onClick={toggleSidebar}
          className="p-2 rounded-full hover:bg-gray-100 focus:outline-none"
          style={{ color: 'var(--primary-color)' }}
        >
          {collapsed ? <ChevronRight /> : <ChevronLeft />}
        </button>
      </div>

      <div className="py-4">
        <nav>
          <ul>
            {menuItems.map((item, index) => (
              <SidebarItem 
                key={index} 
                item={item} 
                collapsed={collapsed} 
              />
            ))}
          </ul>
        </nav>
      </div>

      <div className="absolute bottom-0 w-full border-t p-4">
        <NavLink 
          to="/logout" 
          className={`flex items-center rounded-md p-2 transition-colors hover:bg-gray-100`}
        >
          <div 
            className="flex items-center justify-center"
            style={{ color: 'var(--primary-color)' }}
          >
            <LogOut size={20} />
          </div>
          {!collapsed && (
            <span className="ml-3 text-gray-700">Se déconnecter</span>
          )}
        </NavLink>
      </div>
    </div>
  );
};

export default Sidebar;
// END OF FILE: src/components/Sidebar.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/SidebarItem.tsx

// SidebarItem.jsx
import { NavLink } from 'react-router-dom';

const SidebarItem = ({ item, collapsed }) => {
  return (
    <li className="mb-1 px-2">
      <NavLink 
        to={item.path} 
        className={({ isActive }) => `
          flex items-center rounded-md p-2 transition-colors
          ${isActive ? 'bg-gray-100 font-medium' : 'hover:bg-gray-100'}
        `}
      >
        <div 
          className="flex items-center justify-center"
          style={{ color: 'var(--primary-color)' }}
        >
          {item.icon}
        </div>
        {!collapsed && (
          <span className="ml-3 text-gray-700">{item.name}</span>
        )}
      </NavLink>
    </li>
  );
};

export default SidebarItem;// END OF FILE: src/components/SidebarItem.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/SimilarBooks.jsx

// src/components/SimilarBooks.jsx
import BookCard from './BookCard';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useState } from 'react';

const SimilarBooks = ({ books }) => {
  const [scrollPosition, setScrollPosition] = useState(0);

  const scroll = (direction) => {
    const container = document.getElementById('similar-books-container');
    const scrollAmount = direction === 'left' ? -320 : 320;
    const newPosition = scrollPosition + scrollAmount;
    
    container.scrollTo({
      left: newPosition,
      behavior: 'smooth'
    });
    
    setScrollPosition(newPosition);
  };

  return (
    <div className="my-12 bg-gray-50 p-8 rounded-2xl">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-800">
          <span className="border-b-4 border-primary pb-1">Vous pourriez aussi aimer</span>
        </h2>
        <div className="flex space-x-2">
          <button 
            onClick={() => scroll('left')}
            className="p-2 rounded-full bg-white hover:bg-primary hover:text-white transition-colors shadow"
          >
            <ChevronLeft size={20} />
          </button>
          <button 
            onClick={() => scroll('right')}
            className="p-2 rounded-full bg-white hover:bg-primary hover:text-white transition-colors shadow"
          >
            <ChevronRight size={20} />
          </button>
        </div>
      </div>
      
      <div 
        id="similar-books-container"
        className="flex gap-6 overflow-x-auto hide-scrollbar pb-4"
        style={{ scrollBehavior: 'smooth' }}
      >
        {books.map(book => (
          <div key={book.id} className="flex-shrink-0">
            <BookCard item={book} />
          </div>
        ))}
      </div>
    </div>
  );
};

export default SimilarBooks;// END OF FILE: src/components/SimilarBooks.jsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisAdvancedSearchBar.tsx

import React, { useState, useRef, useEffect } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import {
    Search,
    X,
    Filter,
    GraduationCap,
    User,
    Building,
    Tag,
    Calendar
} from 'lucide-react';
import { ThesisSearchFilters } from '../../types/thesis';

interface ThesisAdvancedSearchBarProps {
    onSearchChange: (filters: ThesisSearchFilters) => void;
    placeholder?: string;
    className?: string;
}

const ThesisAdvancedSearchBar: React.FC<ThesisAdvancedSearchBarProps> = ({
                                                                             onSearchChange,
                                                                             placeholder = "Rechercher des mémoires, auteurs, départements...",
                                                                             className = ""
                                                                         }) => {
    const { orgSettings } = useConfig();
    const [filters, setFilters] = useState<ThesisSearchFilters>({
        query: '',
        author: '',
        department: '',
        year: '',
        keywords: '',
        supervisor: ''
    });
    const [showAdvanced, setShowAdvanced] = useState(false);
    const [isFocused, setIsFocused] = useState(false);
    const searchRef = useRef<HTMLDivElement>(null);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Déclencher la recherche quand les filtres changent
    useEffect(() => {
        const timeoutId = setTimeout(() => {
            onSearchChange(filters);
        }, 300); // Debounce de 300ms

        return () => clearTimeout(timeoutId);
    }, [filters, onSearchChange]);

    // Gérer les changements de filtres
    const handleFilterChange = (key: keyof ThesisSearchFilters, value: string) => {
        setFilters(prev => ({
            ...prev,
            [key]: value
        }));
    };

    // Effacer tous les filtres
    const clearAllFilters = () => {
        setFilters({
            query: '',
            author: '',
            department: '',
            year: '',
            keywords: '',
            supervisor: ''
        });
        setShowAdvanced(false);
    };

    // Vérifier si des filtres avancés sont actifs
    const hasAdvancedFilters = filters.author || filters.department || filters.year || filters.keywords || filters.supervisor;

    // Fermer les filtres avancés quand on clique ailleurs
    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (searchRef.current && !searchRef.current.contains(event.target as Node)) {
                setIsFocused(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div ref={searchRef} className={`bg-white rounded-xl border border-gray-200 shadow-sm ${className}`}>
            {/* Barre de recherche principale */}
            <div className={`flex items-center p-4 transition-all duration-200 ${
                isFocused ? 'ring-2 ring-opacity-50' : ''
            }`}>
                <Search className="w-5 h-5 text-gray-400 mr-3 flex-shrink-0" />

                <input
                    type="text"
                    placeholder={placeholder}
                    value={filters.query}
                    onChange={(e) => handleFilterChange('query', e.target.value)}
                    onFocus={() => setIsFocused(true)}
                    className="flex-1 text-gray-700 placeholder-gray-400 border-none outline-none bg-transparent"
                />

                {/* Boutons d'action */}
                <div className="flex items-center gap-2 ml-3">
                    {(filters.query || hasAdvancedFilters) && (
                        <button
                            onClick={clearAllFilters}
                            className="p-1 hover:bg-gray-100 rounded-full transition-colors"
                            title="Effacer la recherche"
                        >
                            <X className="w-4 h-4 text-gray-400" />
                        </button>
                    )}

                    <button
                        onClick={() => setShowAdvanced(!showAdvanced)}
                        className={`p-2 cursor-pointer rounded-lg transition-all duration-200 ${
                            showAdvanced || hasAdvancedFilters
                                ? 'text-white'
                                : 'text-gray-600 hover:bg-gray-100'
                        }`}
                        style={{
                            backgroundColor: (showAdvanced || hasAdvancedFilters) ? primaryColor : 'transparent'
                        }}
                        title="Filtres avancés"
                    >
                        <Filter className="w-4 h-4" />
                    </button>
                </div>
            </div>

            {/* Filtres avancés */}
            {showAdvanced && (
                <div className="border-t border-gray-100 p-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {/* Auteur */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <User className="w-3 h-3 inline mr-1" />
                                Auteur
                            </label>
                            <input
                                type="text"
                                placeholder="Nom de l'auteur"
                                value={filters.author}
                                onChange={(e) => handleFilterChange('author', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                            />
                        </div>

                        {/* Département */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <Building className="w-3 h-3 inline mr-1" />
                                Département
                            </label>
                            <input
                                type="text"
                                placeholder="Département d'étude"
                                value={filters.department}
                                onChange={(e) => handleFilterChange('department', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                            />
                        </div>

                        {/* Superviseur */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <GraduationCap className="w-3 h-3 inline mr-1" />
                                Superviseur
                            </label>
                            <input
                                type="text"
                                placeholder="Nom du superviseur"
                                value={filters.supervisor}
                                onChange={(e) => handleFilterChange('supervisor', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                            />
                        </div>

                        {/* Mots-clés */}
                        <div>
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <Tag className="w-3 h-3 inline mr-1" />
                                Mots-clés
                            </label>
                            <input
                                type="text"
                                placeholder="Mots-clés du mémoire"
                                value={filters.keywords}
                                onChange={(e) => handleFilterChange('keywords', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                            />
                        </div>

                        {/* Année */}
                        <div className="md:col-span-2 lg:col-span-1">
                            <label className="block text-xs font-medium text-gray-600 mb-2">
                                <Calendar className="w-3 h-3 inline mr-1" />
                                Année de soutenance
                            </label>
                            <input
                                type="number"
                                placeholder="Ex: 2024"
                                value={filters.year}
                                onChange={(e) => handleFilterChange('year', e.target.value)}
                                className="w-full p-2 border border-gray-200 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-opacity-50"
                                min="2000"
                                max={new Date().getFullYear()}
                            />
                        </div>
                    </div>

                    {/* Actions des filtres avancés */}
                    {hasAdvancedFilters && (
                        <div className="mt-4 pt-4 border-t border-gray-100">
                            <div className="flex items-center justify-between">
                                <span className="text-xs text-gray-500">
                                    Filtres actifs : {[filters.author, filters.department, filters.year, filters.keywords, filters.supervisor].filter(Boolean).length}
                                </span>

                                <button
                                    onClick={() => {
                                        setFilters(prev => ({
                                            ...prev,
                                            author: '',
                                            department: '',
                                            year: '',
                                            keywords: '',
                                            supervisor: ''
                                        }));
                                    }}
                                    className="text-xs cursor-pointer text-gray-500 hover:text-red-500 transition-colors"
                                >
                                    Effacer les filtres avancés
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            )}

            {/* Suggestions de recherche rapide */}
            {isFocused && !filters.query && (
                <div className="border-t border-gray-100 p-4">
                    <div className="text-xs font-medium text-gray-600 mb-3">Recherches populaires :</div>
                    <div className="flex flex-wrap gap-2">
                        {['Génie Informatique', 'Génie Civil', 'Génie Électrique', 'Génie Mécanique', 'Management'].map((term) => (
                            <button
                                key={term}
                                onClick={() => handleFilterChange('query', term)}
                                className="px-3 py-1 text-xs rounded-full border border-gray-200 hover:border-gray-300 text-gray-600 hover:text-gray-800 transition-colors"
                            >
                                {term}
                            </button>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
};

export default ThesisAdvancedSearchBar;
// END OF FILE: src/components/thesis/ThesisAdvancedSearchBar.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisCard.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import {
    Heart,
    Eye,
    GraduationCap,
    User,
    Calendar,
    Package,
    ExternalLink,
    Star
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { BiblioThesis } from '../../types/thesis';

export type ViewMode = 'grid' | 'list';

interface ThesisCardProps {
    thesis: BiblioThesis;
    viewMode?: ViewMode;
    onView?: (thesisId: string) => void;
    onToggleFavorite?: (thesisId: string) => void;
    isFavorite?: boolean;
    isLoading?: boolean;
    className?: string;
}

const ThesisCard: React.FC<ThesisCardProps> = ({
                                                   thesis,
                                                   viewMode = 'grid',
                                                   onView,
                                                   onToggleFavorite,
                                                   isFavorite = false,
                                                   isLoading = false,
                                                   className = ""
                                               }) => {
    const { orgSettings } = useConfig();
    const [imageError, setImageError] = useState(false);
    const [isViewing, setIsViewing] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    // Gérer la consultation
    const handleView = async (e: React.MouseEvent) => {
        e.preventDefault();
        e.stopPropagation();

        if (!onView) return;

        setIsViewing(true);
        try {
            await onView(thesis.id);
        } catch (error) {
            console.error('Erreur lors de la consultation:', error);
        } finally {
            setIsViewing(false);
        }
    };

    // Gérer les favoris
    const handleToggleFavorite = (e: React.MouseEvent) => {
        e.preventDefault();
        e.stopPropagation();

        if (onToggleFavorite) {
            onToggleFavorite(thesis.id);
        }
    };

    const handleImageError = () => {
        setImageError(true);
    };

    // Calculer la note moyenne
    const averageRating = thesis.commentaire.length > 0
        ? thesis.commentaire.reduce((sum, comment) => sum + comment.note, 0) / thesis.commentaire.length
        : 0;

    // Traiter les mots-clés
    const keywords = thesis.keywords
        ? thesis.keywords.split(',').map(k => k.trim()).filter(k => k.length > 0).slice(0, 3)
        : [];

    // Vue grille (par défaut)
    if (viewMode === 'grid') {
        return (
            <div className={`group bg-white cursor-pointer rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 ${className}`}>
                <Link to={`/thesis/${thesis.id}`} className="block">
                    {/* Image de couverture */}
                    <div className="relative aspect-[3/4] overflow-hidden bg-gray-100">
                        {thesis.image && !imageError ? (
                            <img
                                src={thesis.image}
                                alt={`Mémoire de ${thesis.name}`}
                                className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                                onError={handleImageError}
                                loading="lazy"
                            />
                        ) : (
                            <div className="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                                <GraduationCap className="w-16 h-16 text-gray-400 mb-2" />
                                <span className="text-xs text-gray-500 text-center px-2">
                                    {thesis.image ? 'Image non disponible' : 'Pas d\'image'}
                                </span>
                            </div>
                        )}

                        {/* Badge d'année */}
                        <div className="absolute top-2 left-2 z-20">
                            <div className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-700 border border-blue-200 shadow-md">
                                <Calendar className="w-3 h-3 mr-1 inline" />
                                {thesis.annee}
                            </div>
                        </div>

                        {/* Bouton favori */}
                        <button
                            onClick={handleToggleFavorite}
                            className={`absolute cursor-pointer top-2 right-2 p-2 rounded-full transition-all duration-200 z-20 shadow-md ${
                                isFavorite
                                    ? 'bg-red-100 text-red-600 border border-red-200'
                                    : 'bg-white bg-opacity-90 text-gray-600 hover:bg-white hover:bg-opacity-100 border border-gray-200'
                            }`}
                            title={isFavorite ? 'Retirer des favoris' : 'Ajouter aux favoris'}
                        >
                            <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
                        </button>

                        {/* Note moyenne */}
                        {averageRating > 0 && (
                            <div className="absolute bottom-2 left-2 z-10">
                                <div className="px-2 py-1 rounded-full bg-black bg-opacity-60 text-white text-xs font-medium flex items-center">
                                    <Star className="w-3 h-3 text-yellow-400 fill-current mr-1" />
                                    {averageRating.toFixed(1)}
                                </div>
                            </div>
                        )}

                        {/* Badge d'étagère */}
                        {thesis.etagere && (
                            <div className="absolute bottom-2 right-2 z-10">
                                <div className="px-2 py-1 rounded-full bg-black bg-opacity-60 text-white text-xs font-medium">
                                    Ét: {thesis.etagere}
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Contenu */}
                    <div className="p-4">
                        {/* Titre du mémoire (theme ou matricule) */}
                        <h3 className="font-semibold text-gray-900 mb-1 line-clamp-2 group-hover:text-gray-700 transition-colors">
                            {thesis.theme || `Mémoire ${thesis.matricule}`}
                        </h3>

                        {/* Auteur */}
                        <div className="flex items-center text-sm text-gray-600 mb-2">
                            <User className="w-3 h-3 mr-1 flex-shrink-0" />
                            <span className="line-clamp-1">{thesis.name}</span>
                        </div>

                        {/* Matricule */}
                        <div className="flex items-center text-xs text-gray-500 mb-3">
                            <span className="font-medium">Matricule: {thesis.matricule}</span>
                        </div>

                        {/* Département */}
                        <div className="mb-3">
                            <span
                                className="inline-block px-2 py-1 rounded-full text-xs font-medium"
                                style={{
                                    backgroundColor: `${primaryColor}10`,
                                    color: primaryColor
                                }}
                            >
                                {thesis.département}
                            </span>
                        </div>

                        {/* Superviseur si disponible */}
                        {thesis.superviseur && (
                            <div className="flex items-center text-xs text-gray-500 mb-3">
                                <User className="w-3 h-3 mr-1" />
                                <span className="truncate">Sup: {thesis.superviseur}</span>
                            </div>
                        )}

                        {/* Mots-clés */}
                        {keywords.length > 0 && (
                            <div className="mb-3">
                                <div className="flex flex-wrap gap-1">
                                    {keywords.map((keyword, index) => (
                                        <span
                                            key={index}
                                            className="px-2 py-1 bg-gray-100 rounded-full text-xs text-gray-600"
                                        >
                                            {keyword}
                                        </span>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Étagère */}
                        {thesis.etagere && (
                            <div className="flex items-center text-xs text-gray-500 mb-3">
                                <Package className="w-3 h-3 mr-1" />
                                <span>Étagère: {thesis.etagere}</span>
                            </div>
                        )}

                        {/* Nombre de commentaires */}
                        {thesis.commentaire && thesis.commentaire.length > 0 && (
                            <div className="flex items-center text-xs text-gray-500">
                                <span>{thesis.commentaire.length} commentaire{thesis.commentaire.length > 1 ? 's' : ''}</span>
                            </div>
                        )}
                    </div>
                </Link>

                {/* Actions */}
                <div className="p-4 pt-0">
                    <div className="flex gap-2">
                        <button
                            onClick={handleView}
                            disabled={isViewing || isLoading}
                            className={`flex-1 py-2 px-4 rounded-lg font-medium transition-all duration-200 flex items-center justify-center text-white hover:shadow-lg transform hover:scale-[1.02]`}
                            style={{ backgroundColor: primaryColor }}
                        >
                            {isViewing ? (
                                <>
                                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                    Reservation...
                                </>
                            ) : (
                                <>
                                    <Eye className="w-4 h-4 mr-2" />
                                    Reserver
                                </>
                            )}
                        </button>

                        {thesis.pdfUrl && (
                            <button
                                onClick={(e) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    window.open(thesis.pdfUrl, '_blank');
                                }}
                                className="px-3 py-2 rounded-lg border-2 transition-all duration-200 hover:shadow-lg transform hover:scale-[1.02]"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                                title="Ouvrir le PDF"
                            >
                                <ExternalLink className="w-4 h-4" />
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    }

    // Vue liste
    return (
        <div className={`group bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md ${className}`}>
            <Link to={`/thesis/${thesis.id}`} className="flex">
                {/* Image de couverture */}
                <div className="relative w-24 h-32 flex-shrink-0 overflow-hidden bg-gray-100">
                    {thesis.image && !imageError ? (
                        <img
                            src={thesis.image}
                            alt={`Mémoire de ${thesis.name}`}
                            className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                            onError={handleImageError}
                            loading="lazy"
                        />
                    ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                            <GraduationCap className="w-8 h-8 text-gray-400" />
                        </div>
                    )}

                    {/* Badge d'année */}
                    <div className="absolute bottom-1 left-1">
                        <div className="px-1 py-0.5 rounded text-xs bg-blue-500 text-white font-medium">
                            {thesis.annee}
                        </div>
                    </div>

                    {/* Note moyenne */}
                    {averageRating > 0 && (
                        <div className="absolute top-1 right-1">
                            <div className="px-1 py-0.5 rounded text-xs bg-black bg-opacity-60 text-white font-medium flex items-center">
                                <Star className="w-3 h-3 text-yellow-400 fill-current mr-1" />
                                {averageRating.toFixed(1)}
                            </div>
                        </div>
                    )}
                </div>

                {/* Contenu */}
                <div className="flex-1 p-4 min-w-0">
                    <div className="flex justify-between items-start">
                        <div className="flex-1 min-w-0 mr-4">
                            {/* Titre */}
                            <h3 className="font-semibold text-gray-900 mb-1 line-clamp-1 group-hover:text-gray-700 transition-colors">
                                {thesis.theme || `Mémoire ${thesis.matricule}`}
                            </h3>

                            {/* Auteur et matricule */}
                            <div className="flex items-center text-sm text-gray-600 mb-2">
                                <User className="w-3 h-3 mr-1 flex-shrink-0" />
                                <span className="truncate">{thesis.name} ({thesis.matricule})</span>
                            </div>

                            {/* Informations secondaires */}
                            <div className="flex items-center gap-4 text-xs text-gray-500 mb-2">
                                <div className="flex items-center">
                                    <Calendar className="w-3 h-3 mr-1" />
                                    <span>{thesis.annee}</span>
                                </div>
                                {thesis.superviseur && (
                                    <div className="flex items-center">
                                        <User className="w-3 h-3 mr-1" />
                                        <span className="truncate">Sup: {thesis.superviseur}</span>
                                    </div>
                                )}
                                {thesis.etagere && (
                                    <div className="flex items-center">
                                        <Package className="w-3 h-3 mr-1" />
                                        <span>Ét: {thesis.etagere}</span>
                                    </div>
                                )}
                            </div>

                            {/* Abstract */}
                            {thesis.abstract && (
                                <p className="text-sm text-gray-600 line-clamp-2 mb-2 leading-relaxed">
                                    {thesis.abstract}
                                </p>
                            )}

                            {/* Département et mots-clés */}
                            <div className="flex items-center gap-3 mb-2">
                                <span
                                    className="inline-block px-2 py-1 rounded-full text-xs font-medium"
                                    style={{
                                        backgroundColor: `${primaryColor}10`,
                                        color: primaryColor
                                    }}
                                >
                                    {thesis.département}
                                </span>

                                {thesis.commentaire && thesis.commentaire.length > 0 && (
                                    <span className="text-xs text-gray-500 flex items-center">
                                        {thesis.commentaire.length} avis
                                    </span>
                                )}
                            </div>

                            {/* Mots-clés */}
                            {keywords.length > 0 && (
                                <div className="flex flex-wrap gap-1">
                                    {keywords.map((keyword, index) => (
                                        <span
                                            key={index}
                                            className="px-2 py-1 bg-gray-100 rounded-full text-xs text-gray-600"
                                        >
                                            {keyword}
                                        </span>
                                    ))}
                                </div>
                            )}
                        </div>

                        {/* Actions */}
                        <div className="flex items-center gap-2 flex-shrink-0">
                            <button
                                onClick={handleToggleFavorite}
                                className={`p-2 rounded-full cursor-pointer transition-all duration-200 ${
                                    isFavorite
                                        ? 'bg-red-100 text-red-600'
                                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                }`}
                            >
                                <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
                            </button>

                            <button
                                onClick={handleView}
                                disabled={isViewing || isLoading}
                                className={`py-2 px-4 rounded-lg cursor-pointer font-medium transition-all duration-200 flex items-center text-white hover:shadow-lg`}
                                style={{ backgroundColor: primaryColor }}
                            >
                                {isViewing ? (
                                    <>
                                        <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                                        <span className="hidden sm:inline">Reservation...</span>
                                    </>
                                ) : (
                                    <>
                                        <Eye className="w-4 h-4 mr-2" />
                                        <span className="hidden sm:inline">Reserver</span>
                                    </>
                                )}
                            </button>

                            {thesis.pdfUrl && (
                                <button
                                    onClick={(e) => {
                                        e.preventDefault();
                                        e.stopPropagation();
                                        window.open(thesis.pdfUrl, '_blank');
                                    }}
                                    className="px-3 py-2 cursor-pointer rounded-lg border-2 transition-all duration-200 hover:shadow-lg"
                                    style={{
                                        borderColor: secondaryColor,
                                        color: secondaryColor
                                    }}
                                    title="Ouvrir le PDF"
                                >
                                    <ExternalLink className="w-4 h-4" />
                                </button>
                            )}
                        </div>
                    </div>
                </div>
            </Link>
        </div>
    );
};

export default ThesisCard;
// END OF FILE: src/components/thesis/ThesisCard.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisDescription.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { BiblioThesis } from '../../types/thesis';
import { ChevronDown, ChevronUp, FileText, Info } from 'lucide-react';

interface ThesisDescriptionProps {
    thesis: BiblioThesis;
}

const ThesisDescription: React.FC<ThesisDescriptionProps> = ({ thesis }) => {
    const { orgSettings } = useConfig();
    const [isExpanded, setIsExpanded] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    const shouldShowExpandButton = thesis.abstract && thesis.abstract.length > 300;
    const displayText = shouldShowExpandButton && !isExpanded
        ? thesis.abstract.substring(0, 300) + '...'
        : thesis.abstract;

    if (!thesis.abstract || thesis.abstract.trim() === '') {
        return (
            <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 lg:p-8">
                <div className="flex items-center mb-4">
                    <Info className="w-6 h-6 mr-3" style={{ color: primaryColor }} />
                    <h2 className="text-2xl font-bold text-gray-900">Résumé</h2>
                </div>
                <div className="bg-gray-50 rounded-xl p-6 text-center">
                    <FileText className="w-12 h-12 text-gray-300 mx-auto mb-3" />
                    <p className="text-gray-500">Aucun résumé disponible pour ce mémoire.</p>
                </div>
            </div>
        );
    }

    return (
        <div className="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 lg:p-8">
            {/* En-tête */}
            <div className="flex items-center mb-6">
                <div
                    className="w-10 h-10 rounded-full flex items-center justify-center mr-4"
                    style={{ backgroundColor: `${primaryColor}15` }}
                >
                    <FileText className="w-5 h-5" style={{ color: primaryColor }} />
                </div>
                <h2 className="text-2xl font-bold" style={{ color: secondaryColor }}>
                    Résumé
                </h2>
            </div>

            {/* Contenu du résumé */}
            <div className="prose prose-lg max-w-none">
                <div
                    className="text-gray-700 leading-relaxed"
                    style={{ lineHeight: '1.8' }}
                >
                    {displayText.split('\n').map((paragraph, index) => (
                        <p key={index} className="mb-4 last:mb-0">
                            {paragraph}
                        </p>
                    ))}
                </div>

                {/* Bouton d'expansion */}
                {shouldShowExpandButton && (
                    <div className="mt-6 flex justify-center">
                        <button
                            onClick={() => setIsExpanded(!isExpanded)}
                            className="inline-flex cursor-pointer items-center px-6 py-3 rounded-xl font-medium transition-all duration-200 hover:shadow-md"
                            style={{
                                backgroundColor: `${primaryColor}10`,
                                color: primaryColor,
                                border: `1px solid ${primaryColor}30`
                            }}
                            onMouseEnter={(e) => {
                                e.currentTarget.style.backgroundColor = `${primaryColor}20`;
                                e.currentTarget.style.transform = 'translateY(-1px)';
                            }}
                            onMouseLeave={(e) => {
                                e.currentTarget.style.backgroundColor = `${primaryColor}10`;
                                e.currentTarget.style.transform = 'translateY(0)';
                            }}
                        >
                            {isExpanded ? (
                                <>
                                    <ChevronUp className="w-5 h-5 mr-2" />
                                    Voir moins
                                </>
                            ) : (
                                <>
                                    <ChevronDown className="w-5 h-5 mr-2" />
                                    Lire la suite
                                </>
                            )}
                        </button>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ThesisDescription;
// END OF FILE: src/components/thesis/ThesisDescription.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisHeader.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { BiblioThesis, ThesisCommentWithUserData } from '../../types/thesis';
import {
    Heart,
    Share2,
    Star,
    Eye,
    Download,
    GraduationCap,
    User,
    Building,
    Package,
    Calendar,
    MessageSquare,
    FileText,
    Tag
} from 'lucide-react';

interface ThesisHeaderProps {
    thesis: BiblioThesis;
    onView: () => void;
    onToggleFavorite: () => void;
    onOpenCommentModal: () => void;
    isFavorite: boolean;
    isAuthenticated: boolean;
    isViewing: boolean;
    commentsWithUserData?: ThesisCommentWithUserData[];
}

const ThesisHeader: React.FC<ThesisHeaderProps> = ({
                                                       thesis,
                                                       onView,
                                                       onToggleFavorite,
                                                       onOpenCommentModal,
                                                       isFavorite,
                                                       isAuthenticated,
                                                       isViewing,
                                                       commentsWithUserData = []
                                                   }) => {
    const { orgSettings } = useConfig();
    const [imageError, setImageError] = useState(false);
    const [showShareMenu, setShowShareMenu] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    // Calcul de la note moyenne
    const averageRating = commentsWithUserData.length > 0
        ? commentsWithUserData.reduce((sum, comment) => sum + comment.note, 0) / commentsWithUserData.length
        : 0;

    const handleShare = async () => {
        if (navigator.share) {
            try {
                await navigator.share({
                    title: thesis.theme || `Mémoire de ${thesis.name}`,
                    text: `Découvrez le mémoire de ${thesis.name} - ${thesis.département}`,
                    url: window.location.href,
                });
            } catch {
                console.log('Partage annulé');
            }
        } else {
            setShowShareMenu(!showShareMenu);
        }
    };

    const copyToClipboard = () => {
        navigator.clipboard.writeText(window.location.href);
        setShowShareMenu(false);
    };

    // Traiter les mots-clés
    const keywords = thesis.keywords
        ? thesis.keywords.split(',').map(k => k.trim()).filter(k => k.length > 0)
        : [];

    return (
        <div className="bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100">
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 p-6 lg:p-8">
                {/* Image du mémoire */}
                <div className="lg:col-span-1">
                    <div className="relative group">
                        <div className="aspect-[3/4] rounded-xl overflow-hidden bg-gray-100 shadow-lg">
                            {thesis.image && !imageError ? (
                                <img
                                    src={thesis.image}
                                    alt={`Mémoire de ${thesis.name}`}
                                    className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                                    onError={() => setImageError(true)}
                                />
                            ) : (
                                <div className="w-full h-full flex flex-col items-center justify-center bg-gradient-to-br from-gray-100 to-gray-200">
                                    <GraduationCap className="w-20 h-20 text-gray-400 mb-4" />
                                    <span className="text-sm text-gray-500 text-center px-4">
                                        {thesis.image ? 'Image non disponible' : 'Pas d\'image de couverture'}
                                    </span>
                                </div>
                            )}
                        </div>

                        {/* Badge d'année flottant */}
                        <div className="absolute top-4 left-4 z-10">
                            <div className="px-3 py-2 rounded-full text-sm font-semibold flex items-center shadow-lg backdrop-blur-sm bg-blue-100/90 text-blue-700 border border-blue-200">
                                <Calendar className="w-4 h-4 mr-2" />
                                {thesis.annee}
                            </div>
                        </div>

                        {/* Badge d'étagère */}
                        {thesis.etagere && (
                            <div className="absolute bottom-4 right-4 z-10">
                                <div className="px-2 py-1 rounded-full bg-black bg-opacity-60 text-white text-xs font-medium">
                                    Ét: {thesis.etagere}
                                </div>
                            </div>
                        )}
                    </div>
                </div>

                {/* Informations du mémoire */}
                <div className="lg:col-span-2">
                    <div className="h-full flex flex-col">
                        {/* En-tête avec titre et actions */}
                        <div className="flex flex-col lg:flex-row lg:items-start lg:justify-between mb-6">
                            <div className="flex-1 mb-4 lg:mb-0 lg:pr-6">
                                <h1 className="text-3xl lg:text-4xl font-bold text-gray-900 mb-3 leading-tight">
                                    {thesis.theme || `Mémoire ${thesis.matricule}`}
                                </h1>

                                <div className="flex items-center text-lg text-gray-600 mb-4">
                                    <User className="w-5 h-5 mr-2" />
                                    <span className="font-medium">{thesis.name}</span>
                                    <span className="mx-2 text-gray-400">•</span>
                                    <span className="text-gray-500">{thesis.matricule}</span>
                                </div>

                                {/* Évaluation */}
                                {commentsWithUserData.length > 0 && (
                                    <div className="flex items-center mb-4">
                                        <div className="flex items-center mr-4">
                                            {[1, 2, 3, 4, 5].map((star) => (
                                                <Star
                                                    key={star}
                                                    className={`w-5 h-5 transition-colors duration-200 ${
                                                        star <= Math.round(averageRating)
                                                            ? 'fill-current text-yellow-400'
                                                            : 'text-gray-300'
                                                    }`}
                                                />
                                            ))}
                                        </div>
                                        <div className="flex flex-col sm:flex-row sm:items-center sm:space-x-4">
                                            <span className="text-sm text-gray-600 font-medium">
                                                {averageRating.toFixed(1)} sur 5
                                            </span>
                                            <span className="text-sm text-gray-500">
                                                ({commentsWithUserData.length} avis)
                                            </span>
                                        </div>
                                    </div>
                                )}

                                {/* Pas d'avis encore */}
                                {commentsWithUserData.length === 0 && thesis.commentaire.length === 0 && (
                                    <div className="flex items-center mb-4">
                                        <div className="flex items-center mr-4">
                                            {[1, 2, 3, 4, 5].map((star) => (
                                                <Star
                                                    key={star}
                                                    className="w-5 h-5 text-gray-300"
                                                />
                                            ))}
                                        </div>
                                        <span className="text-sm text-gray-500">
                                            Aucun avis pour le moment
                                        </span>
                                    </div>
                                )}
                            </div>

                            {/* Actions rapides */}
                            <div className="flex items-center space-x-3">
                                <button
                                    onClick={onToggleFavorite}
                                    disabled={!isAuthenticated}
                                    className={`p-3 rounded-full cursor-pointer transition-all duration-200 ${
                                        isFavorite
                                            ? 'bg-red-100 text-red-600 hover:bg-red-200'
                                            : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                    } ${!isAuthenticated ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    title={
                                        !isAuthenticated
                                            ? 'Connectez-vous pour ajouter aux favoris'
                                            : isFavorite
                                                ? 'Retirer des favoris'
                                                : 'Ajouter aux favoris'
                                    }
                                >
                                    <Heart className={`w-5 h-5 ${isFavorite ? 'fill-current' : ''}`} />
                                </button>

                                <div className="relative">
                                    <button
                                        onClick={handleShare}
                                        className="p-3 rounded-full cursor-pointer bg-gray-100 text-gray-600 hover:bg-gray-200 transition-all duration-200"
                                        title="Partager ce mémoire"
                                    >
                                        <Share2 className="w-5 h-5" />
                                    </button>

                                    {showShareMenu && (
                                        <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border z-50">
                                            <div className="p-2">
                                                <button
                                                    onClick={copyToClipboard}
                                                    className="w-full px-4 py-3 text-left text-sm hover:bg-gray-50 transition-colors rounded-lg"
                                                >
                                                    Twitter
                                                </button>
                                                <button
                                                    onClick={() => {
                                                        window.open(`https://www.facebook.com/sharer/sharer.php?u=${window.location.href}`, '_blank');
                                                        setShowShareMenu(false);
                                                    }}
                                                    className="w-full px-4 py-3 text-left text-sm hover:bg-gray-50 transition-colors rounded-lg"
                                                >
                                                    Facebook
                                                </button>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        </div>

                        {/* Informations détaillées */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-6">
                            <div className="flex items-center">
                                <Building className="w-5 h-5 mr-3 text-gray-400" />
                                <div>
                                    <span className="text-sm text-gray-500">Département</span>
                                    <p className="font-medium">{thesis.département}</p>
                                </div>
                            </div>

                            {thesis.superviseur && (
                                <div className="flex items-center">
                                    <GraduationCap className="w-5 h-5 mr-3 text-gray-400" />
                                    <div>
                                        <span className="text-sm text-gray-500">Superviseur</span>
                                        <p className="font-medium">{thesis.superviseur}</p>
                                    </div>
                                </div>
                            )}

                            {thesis.etagere && (
                                <div className="flex items-center">
                                    <Package className="w-5 h-5 mr-3 text-gray-400" />
                                    <div>
                                        <span className="text-sm text-gray-500">Étagère</span>
                                        <p className="font-medium">{thesis.etagere}</p>
                                    </div>
                                </div>
                            )}

                            <div className="flex items-center">
                                <MessageSquare className="w-5 h-5 mr-3 text-gray-400" />
                                <div>
                                    <span className="text-sm text-gray-500">Commentaires</span>
                                    <p className="font-medium">
                                        {thesis.commentaire?.length || 0} avis
                                        {commentsWithUserData.length > 0 && (
                                            <span className="text-xs text-gray-400 ml-1">
                                                (Note moyenne: {averageRating.toFixed(1)}/5)
                                            </span>
                                        )}
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Mots-clés */}
                        {keywords.length > 0 && (
                            <div className="mb-6">
                                <div className="flex items-center mb-3">
                                    <Tag className="w-4 h-4 mr-2 text-gray-400" />
                                    <span className="text-sm font-medium text-gray-700">Mots-clés</span>
                                </div>
                                <div className="flex flex-wrap gap-2">
                                    {keywords.map((keyword, index) => (
                                        <span
                                            key={index}
                                            className="px-3 py-1 rounded-full text-sm font-medium border transition-all duration-200 hover:shadow-sm"
                                            style={{
                                                backgroundColor: `${primaryColor}10`,
                                                borderColor: `${primaryColor}30`,
                                                color: primaryColor
                                            }}
                                        >
                                            {keyword}
                                        </span>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Actions principales */}
                        <div className="mt-auto">
                            <div className="flex flex-col sm:flex-row gap-4">
                                <button
                                    onClick={onView}
                                    disabled={isViewing || !isAuthenticated}
                                    className={`flex-1 py-4 px-6 cursor-pointer rounded-xl font-semibold text-lg transition-all duration-200 flex items-center justify-center ${
                                        !isViewing && isAuthenticated
                                            ? 'text-white shadow-lg hover:shadow-xl transform hover:scale-[1.02]'
                                            : 'bg-gray-100 text-gray-400 cursor-not-allowed'
                                    }`}
                                    style={{
                                        backgroundColor: !isViewing && isAuthenticated ? primaryColor : undefined
                                    }}
                                >
                                    {isViewing ? (
                                        <>
                                            <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-3" />
                                            Consultation en cours...
                                        </>
                                    ) : !isAuthenticated ? (
                                        <>
                                            <Eye className="w-5 h-5 mr-3" />
                                            Connectez-vous pour Reserver
                                        </>
                                    ) : (
                                        <>
                                            <Eye className="w-5 h-5 mr-3" />
                                            Reserver ce mémoire
                                        </>
                                    )}
                                </button>

                                {thesis.pdfUrl && (
                                    <button
                                        onClick={() => window.open(thesis.pdfUrl, '_blank')}
                                        className="sm:w-auto px-6 py-4 cursor-pointer rounded-xl font-semibold text-lg border-2 transition-all duration-200 hover:shadow-lg flex items-center justify-center"
                                        style={{
                                            borderColor: primaryColor,
                                            color: primaryColor,
                                            backgroundColor: `${primaryColor}08`
                                        }}
                                        onMouseEnter={(e) => {
                                            e.currentTarget.style.backgroundColor = primaryColor;
                                            e.currentTarget.style.color = 'white';
                                        }}
                                        onMouseLeave={(e) => {
                                            e.currentTarget.style.backgroundColor = `${primaryColor}08`;
                                            e.currentTarget.style.color = primaryColor;
                                        }}
                                        title="Télécharger le PDF"
                                    >
                                        <Download className="w-5 h-5 mr-2" />
                                        PDF
                                    </button>
                                )}

                                <button
                                    onClick={onOpenCommentModal}
                                    disabled={!isAuthenticated}
                                    className={`sm:w-auto px-6 py-4 cursor-pointer rounded-xl font-semibold text-lg border-2 transition-all duration-200 hover:shadow-lg ${
                                        !isAuthenticated ? 'opacity-50 cursor-not-allowed' : ''
                                    }`}
                                    style={{
                                        borderColor: primaryColor,
                                        color: isAuthenticated ? primaryColor : '#9ca3af',
                                        backgroundColor: `${primaryColor}08`
                                    }}
                                    onMouseEnter={(e) => {
                                        if (isAuthenticated) {
                                            e.currentTarget.style.backgroundColor = primaryColor;
                                            e.currentTarget.style.color = 'white';
                                        }
                                    }}
                                    onMouseLeave={(e) => {
                                        if (isAuthenticated) {
                                            e.currentTarget.style.backgroundColor = `${primaryColor}08`;
                                            e.currentTarget.style.color = primaryColor;
                                        }
                                    }}
                                    title={!isAuthenticated ? 'Connectez-vous pour donner votre avis' : 'Donner votre avis sur ce mémoire'}
                                >
                                    <MessageSquare className="w-5 h-5 mr-2 inline" />
                                    {!isAuthenticated ? 'Se connecter pour commenter' : 'Donner mon avis'}
                                </button>
                            </div>

                            {!isAuthenticated && (
                                <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                    <p className="text-sm text-blue-700 text-center flex items-center justify-center">
                                        <FileText className="w-4 h-4 mr-2" />
                                        <span>
                                            <button
                                                onClick={() => window.location.href = '/auth'}
                                                className="font-medium underline hover:no-underline"
                                            >
                                                Connectez-vous
                                            </button>
                                            {' '}pour consulter ce mémoire et laisser un avis
                                        </span>
                                    </p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ThesisHeader;
// END OF FILE: src/components/thesis/ThesisHeader.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisList.tsx

import React, { useState, useEffect } from 'react';
import { collection, query, orderBy, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';
import LoadingSpinner from '../common/LoadingSpinner';
import ThesisCard from './ThesisCard';
import { ThesisSortOption, ViewMode } from './ThesisSortOptions';
import { BiblioThesis, ThesisSearchFilters } from '../../types/thesis';
import {
    ChevronLeft,
    ChevronRight,
    GraduationCap,
    RefreshCw,
    AlertCircle,
    Search
} from 'lucide-react';

interface ThesisListProps {
    searchFilters: ThesisSearchFilters;
    selectedDepartments: string[];
    sortOption: ThesisSortOption;
    viewMode: ViewMode;
    onThesisView?: (thesisId: string) => void;
    onToggleFavorite?: (thesisId: string) => void;
    favoriteTheses?: string[];
    className?: string;
}

const ThesisList: React.FC<ThesisListProps> = ({
                                                   searchFilters,
                                                   selectedDepartments,
                                                   sortOption,
                                                   viewMode,
                                                   onThesisView,
                                                   onToggleFavorite,
                                                   favoriteTheses = [],
                                                   className = ""
                                               }) => {
    const { orgSettings } = useConfig();
    const [allTheses, setAllTheses] = useState<BiblioThesis[]>([]);
    const [filteredTheses, setFilteredTheses] = useState<BiblioThesis[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string>('');
    const [currentPage, setCurrentPage] = useState(1);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const THESES_PER_PAGE = 12;

    const loadAllTheses = async () => {
        try {
            setLoading(true);
            setError('');

            // Requête pour récupérer tous les mémoires
            const thesesQuery = query(
                collection(db, 'BiblioThesis'),
                orderBy('name', 'asc')
            );

            const querySnapshot = await getDocs(thesesQuery);
            const theses: BiblioThesis[] = [];

            querySnapshot.forEach((doc) => {
                const thesisData = { id: doc.id, ...doc.data() } as BiblioThesis;
                theses.push(thesisData);
            });

            setAllTheses(theses);

        } catch {
            setError('Erreur lors du chargement des mémoires. Veuillez réessayer.');
        } finally {
            setLoading(false);
        }
    };

    // Charger les mémoires au montage
    useEffect(() => {
        loadAllTheses();
    }, []);

    // Appliquer les filtres et le tri côté client
    useEffect(() => {
        let filtered = [...allTheses];

        // 1. Filtrer par départements
        if (selectedDepartments.length > 0) {
            filtered = filtered.filter(thesis =>
                selectedDepartments.includes(thesis.département)
            );
        }

        // 2. Filtrer par recherche textuelle
        if (searchFilters.query.trim()) {
            const searchTerm = searchFilters.query.toLowerCase();
            filtered = filtered.filter(thesis =>
                thesis.name.toLowerCase().includes(searchTerm) ||
                thesis.département.toLowerCase().includes(searchTerm) ||
                thesis.matricule.toLowerCase().includes(searchTerm) ||
                (thesis.theme && thesis.theme.toLowerCase().includes(searchTerm)) ||
                (thesis.abstract && thesis.abstract.toLowerCase().includes(searchTerm)) ||
                (thesis.keywords && thesis.keywords.toLowerCase().includes(searchTerm))
            );
        }

        // 3. Filtres avancés
        if (searchFilters.author.trim()) {
            filtered = filtered.filter(thesis =>
                thesis.name.toLowerCase().includes(searchFilters.author.toLowerCase())
            );
        }

        if (searchFilters.department.trim()) {
            filtered = filtered.filter(thesis =>
                thesis.département.toLowerCase().includes(searchFilters.department.toLowerCase())
            );
        }

        if (searchFilters.supervisor.trim()) {
            filtered = filtered.filter(thesis =>
                thesis.superviseur && thesis.superviseur.toLowerCase().includes(searchFilters.supervisor.toLowerCase())
            );
        }

        if (searchFilters.year.trim()) {
            const year = parseInt(searchFilters.year);
            if (!isNaN(year)) {
                filtered = filtered.filter(thesis => thesis.annee === year);
            }
        }

        if (searchFilters.keywords.trim()) {
            filtered = filtered.filter(thesis =>
                thesis.keywords && thesis.keywords.toLowerCase().includes(searchFilters.keywords.toLowerCase())
            );
        }

        // 4. Appliquer le tri
        filtered.sort((a, b) => {
            switch (sortOption) {
                case 'name-asc':
                    return a.name.localeCompare(b.name);
                case 'name-desc':
                    return b.name.localeCompare(a.name);
                case 'year-desc':
                    return b.annee - a.annee;
                case 'year-asc':
                    return a.annee - b.annee;
                case 'department-asc':
                    return a.département.localeCompare(b.département);
                case 'rating-desc':
                    { const avgRatingA = a.commentaire.length > 0
                        ? a.commentaire.reduce((sum, c) => sum + c.note, 0) / a.commentaire.length
                        : 0;
                    const avgRatingB = b.commentaire.length > 0
                        ? b.commentaire.reduce((sum, c) => sum + c.note, 0) / b.commentaire.length
                        : 0;
                    return avgRatingB - avgRatingA; }
                default:
                    return 0;
            }
        });

        setFilteredTheses(filtered);
        setCurrentPage(1);

    }, [allTheses, searchFilters, selectedDepartments, sortOption]);

    // Calculer les statistiques
    const totalPages = Math.ceil(filteredTheses.length / THESES_PER_PAGE);
    const startIndex = (currentPage - 1) * THESES_PER_PAGE;
    const endIndex = startIndex + THESES_PER_PAGE;
    const currentTheses = filteredTheses.slice(startIndex, endIndex);

    // Navigation des pages
    const handlePreviousPage = () => {
        setCurrentPage(prev => Math.max(1, prev - 1));
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    const handleNextPage = () => {
        setCurrentPage(prev => Math.min(totalPages, prev + 1));
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    // Recharger les données
    const handleRefresh = () => {
        loadAllTheses();
    };

    // Gestion de la consultation
    const handleThesisView = async (thesisId: string) => {
        if (onThesisView) {
            await onThesisView(thesisId);
            handleRefresh();
        }
    };

    if (loading) {
        return (
            <div className={`flex items-center justify-center py-12 ${className}`}>
                <LoadingSpinner size="lg" text="Chargement des mémoires..." />
            </div>
        );
    }

    if (error) {
        return (
            <div className={`bg-white rounded-xl border border-red-200 p-8 text-center ${className}`}>
                <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-red-800 mb-2">Erreur de chargement</h3>
                <p className="text-red-600 mb-4">{error}</p>
                <button
                    onClick={handleRefresh}
                    className="inline-flex cursor-pointer items-center px-4 py-2 rounded-lg text-white font-medium transition-colors"
                    style={{ backgroundColor: primaryColor }}
                >
                    <RefreshCw className="w-4 h-4 mr-2 cursor-pointer" />
                    Réessayer
                </button>
            </div>
        );
    }

    if (filteredTheses.length === 0) {
        return (
            <div className={`bg-white rounded-xl border border-gray-200 p-12 text-center ${className}`}>
                <div
                    className="w-20 h-20 rounded-full flex items-center justify-center mx-auto mb-6"
                    style={{ backgroundColor: `${primaryColor}10` }}
                >
                    <Search className="w-10 h-10" style={{ color: primaryColor }} />
                </div>
                <h3 className="text-xl font-semibold text-gray-800 mb-2">Aucun mémoire trouvé</h3>
                <p className="text-gray-600 mb-6">
                    Aucun mémoire ne correspond à vos critères de recherche.
                </p>
                <div className="space-y-2 text-sm text-gray-500">
                    <p>• Vérifiez l'orthographe de vos mots-clés</p>
                    <p>• Utilisez des termes plus généraux</p>
                    <p>• Réduisez le nombre de filtres</p>
                </div>
            </div>
        );
    }

    return (
        <div className={className}>
            {/* En-tête avec statistiques */}
            <div className="mb-6 flex items-center justify-between">
                <div className="flex items-center">
                    <GraduationCap className="w-5 h-5 mr-2 text-gray-400" />
                    <span className="text-gray-600">
                        {filteredTheses.length} mémoire{filteredTheses.length !== 1 ? 's' : ''}
                        {totalPages > 1 && ` • Page ${currentPage} sur ${totalPages}`}
                    </span>
                </div>

                <button
                    onClick={handleRefresh}
                    className="p-2 text-gray-500 cursor-pointer hover:text-gray-700 transition-colors"
                    title="Actualiser"
                >
                    <RefreshCw className="w-4 h-4" />
                </button>
            </div>

            {/* Grille/Liste des mémoires */}
            <div className={`${
                viewMode === 'grid'
                    ? 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6'
                    : 'space-y-4'
            }`}>
                {currentTheses.map((thesis) => (
                    <ThesisCard
                        key={thesis.id}
                        thesis={thesis}
                        viewMode={viewMode}
                        onView={handleThesisView}
                        onToggleFavorite={onToggleFavorite}
                        isFavorite={favoriteTheses.includes(thesis.id)}
                    />
                ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
                <div className="mt-8 flex items-center justify-center">
                    <div className="flex items-center bg-white rounded-xl border border-gray-200 shadow-sm overflow-hidden">
                        <button
                            onClick={handlePreviousPage}
                            disabled={currentPage === 1}
                            className={`p-3 cursor-pointer transition-colors ${
                                currentPage === 1
                                    ? 'text-gray-300 cursor-not-allowed'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                        >
                            <ChevronLeft className="w-5 h-5" />
                        </button>

                        {/* Pages */}
                        <div className="flex items-center px-4 py-3 text-sm text-gray-600">
                            {currentPage} / {totalPages}
                        </div>

                        <button
                            onClick={handleNextPage}
                            disabled={currentPage === totalPages}
                            className={`p-3 cursor-pointer transition-colors ${
                                currentPage === totalPages
                                    ? 'text-gray-300 cursor-not-allowed'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                        >
                            <ChevronRight className="w-5 h-5" />
                        </button>
                    </div>
                </div>
            )}

            {/* Informations sur la pagination */}
            {filteredTheses.length > THESES_PER_PAGE && (
                <div className="mt-4 text-center text-sm text-gray-500">
                    Affichage de {startIndex + 1} à {Math.min(endIndex, filteredTheses.length)} sur {filteredTheses.length} mémoire{filteredTheses.length > 1 ? 's' : ''}
                </div>
            )}
        </div>
    );
};

export default ThesisList;
// END OF FILE: src/components/thesis/ThesisList.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisSortOptions.tsx

import React, { useState } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import {
    SortAsc,
    SortDesc,
    Grid3X3,
    List,
    Calendar,
    Star,
    User,
    ChevronDown
} from 'lucide-react';

export type ThesisSortOption =
    | 'name-asc'
    | 'name-desc'
    | 'year-asc'
    | 'year-desc'
    | 'rating-asc'
    | 'rating-desc'
    | 'author-asc'
    | 'author-desc'
    | 'department-asc';

export type ViewMode = 'grid' | 'list';

interface ThesisSortOptionsProps {
    currentSort: ThesisSortOption;
    onSortChange: (sort: ThesisSortOption) => void;
    viewMode: ViewMode;
    onViewModeChange: (mode: ViewMode) => void;
    className?: string;
}

const ThesisSortOptions: React.FC<ThesisSortOptionsProps> = ({
                                                                 currentSort,
                                                                 onSortChange,
                                                                 viewMode,
                                                                 onViewModeChange,
                                                                 className = ""
                                                             }) => {
    const { orgSettings } = useConfig();
    const [isSortOpen, setIsSortOpen] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';

    const sortOptions = [
        {
            value: 'name-asc' as ThesisSortOption,
            label: 'Auteur (A-Z)',
            icon: SortAsc
        },
        {
            value: 'name-desc' as ThesisSortOption,
            label: 'Auteur (Z-A)',
            icon: SortDesc
        },
        {
            value: 'year-desc' as ThesisSortOption,
            label: 'Plus récents',
            icon: Calendar
        },
        {
            value: 'year-asc' as ThesisSortOption,
            label: 'Plus anciens',
            icon: Calendar
        },
        {
            value: 'rating-desc' as ThesisSortOption,
            label: 'Mieux notés',
            icon: Star
        },
        {
            value: 'department-asc' as ThesisSortOption,
            label: 'Département (A-Z)',
            icon: User
        }
    ];

    const getCurrentSortLabel = () => {
        const option = sortOptions.find(opt => opt.value === currentSort);
        return option?.label || 'Trier par';
    };

    return (
        <div className={`bg-white rounded-xl border border-gray-200 p-4 ${className}`}>
            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
                {/* Contrôles */}
                <div className="flex items-center gap-4 w-full sm:w-auto">
                    {/* Sélecteur de tri */}
                    <div className="relative">
                        <button
                            onClick={() => setIsSortOpen(!isSortOpen)}
                            className="flex cursor-pointer items-center justify-between px-4 py-2 border border-gray-200 rounded-lg hover:border-gray-300 transition-colors min-w-[140px]"
                        >
                            <span className="text-sm font-medium text-gray-700">
                                {getCurrentSortLabel()}
                            </span>
                            <ChevronDown
                                className={`w-4 h-4 text-gray-400 ml-2 transition-transform ${
                                    isSortOpen ? 'rotate-180' : ''
                                }`}
                            />
                        </button>

                        {/* Menu déroulant de tri */}
                        {isSortOpen && (
                            <div className="absolute top-full right-0 mt-2 w-48 bg-white border border-gray-200 rounded-lg shadow-xl z-50">
                                <div className="p-2">
                                    {sortOptions.map((option) => {
                                        const IconComponent = option.icon;
                                        return (
                                            <button
                                                key={option.value}
                                                onClick={() => {
                                                    onSortChange(option.value);
                                                    setIsSortOpen(false);
                                                }}
                                                className={`w-full cursor-pointer flex items-center px-3 py-2 text-sm rounded-lg transition-colors text-left ${
                                                    currentSort === option.value
                                                        ? 'font-medium'
                                                        : 'hover:bg-gray-50'
                                                }`}
                                                style={{
                                                    backgroundColor: currentSort === option.value ? `${primaryColor}10` : 'transparent',
                                                    color: currentSort === option.value ? primaryColor : '#374151'
                                                }}
                                            >
                                                <IconComponent className="w-4 h-4 mr-3" />
                                                {option.label}
                                            </button>
                                        );
                                    })}
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Sélecteur de vue */}
                    <div className="flex items-center border border-gray-200 rounded-lg overflow-hidden">
                        <button
                            onClick={() => onViewModeChange('grid')}
                            className={`p-2 cursor-pointer transition-colors ${
                                viewMode === 'grid'
                                    ? 'text-white'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                            style={{
                                backgroundColor: viewMode === 'grid' ? primaryColor : 'transparent'
                            }}
                            title="Vue grille"
                        >
                            <Grid3X3 className="w-4 h-4" />
                        </button>

                        <button
                            onClick={() => onViewModeChange('list')}
                            className={`p-2 cursor-pointer transition-colors border-l border-gray-200 ${
                                viewMode === 'list'
                                    ? 'text-white'
                                    : 'text-gray-600 hover:bg-gray-50'
                            }`}
                            style={{
                                backgroundColor: viewMode === 'list' ? primaryColor : 'transparent'
                            }}
                            title="Vue liste"
                        >
                            <List className="w-4 h-4" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ThesisSortOptions;
// END OF FILE: src/components/thesis/ThesisSortOptions.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/thesis/ThesisStatistics.tsx

import React, { useState, useEffect } from 'react';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../configs/firebase';
import { useConfig } from '../../contexts/ConfigContext';
import LoadingSpinner from '../common/LoadingSpinner';
import { RefreshCw, TrendingUp, TrendingDown } from 'lucide-react';
import { BiblioThesis } from '../../types/thesis';

interface ThesisStats {
    totalTheses: number;
    totalDepartments: number;
    totalAuthors: number;
    totalSupervisors: number;
    totalComments: number;
    averageCommentsPerThesis: number;
    mostPopularDepartment: string;
    mostActiveDepartment: string;
    latestYear: number;
    oldestYear: number;
    thesesWithoutImages: number;
    averageRating: number;
    thesesByYear: { [key: number]: number };
    topKeywords: string[];
}

interface StatCardProps {
    title: string;
    value: string | number;
    subtitle?: string;
    color: string;
    backgroundColor: string;
    trend?: {
        value: number;
        isPositive: boolean;
    };
}

const StatCard: React.FC<StatCardProps> = ({
                                               title,
                                               value,
                                               subtitle,
                                               color,
                                               backgroundColor,
                                               trend
                                           }) => {
    return (
        <div
            className="text-center p-4 rounded-lg transition-all duration-300 hover:shadow-md transform hover:scale-105"
            style={{ backgroundColor }}
        >
            <div className="flex items-center justify-between mb-2">
                <div
                    className="text-2xl font-bold"
                    style={{ color }}
                >
                    {typeof value === 'number' ? value.toLocaleString() : value}
                </div>
                {trend && (
                    <div className={`flex items-center text-xs ${
                        trend.isPositive ? 'text-green-600' : 'text-red-600'
                    }`}>
                        {trend.isPositive ? (
                            <TrendingUp className="w-3 h-3 mr-1" />
                        ) : (
                            <TrendingDown className="w-3 h-3 mr-1" />
                        )}
                        {Math.abs(trend.value)}%
                    </div>
                )}
            </div>
            <div className="text-xs text-gray-600 font-medium">
                {title}
            </div>
            {subtitle && (
                <div className="text-xs text-gray-500 mt-1">
                    {subtitle}
                </div>
            )}
        </div>
    );
};

interface ThesisStatisticsProps {
    className?: string;
    showRefreshButton?: boolean;
    compact?: boolean;
}

const ThesisStatistics: React.FC<ThesisStatisticsProps> = ({
                                                               className = "",
                                                               showRefreshButton = true,
                                                               compact = false
                                                           }) => {
    const { orgSettings } = useConfig();
    const [stats, setStats] = useState<ThesisStats | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string>('');
    const [lastUpdated, setLastUpdated] = useState<Date>(new Date());

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    const fetchThesisStatistics = async () => {
        try {
            setLoading(true);
            setError('');

            // Récupérer tous les mémoires de la collection BiblioThesis
            const thesesSnapshot = await getDocs(collection(db, 'BiblioThesis'));
            const theses: BiblioThesis[] = [];

            thesesSnapshot.forEach((doc) => {
                theses.push({ id: doc.id, ...doc.data() } as BiblioThesis);
            });

            if (theses.length === 0) {
                throw new Error('Aucun mémoire trouvé dans la base de données');
            }

            // 1. Statistiques de base des mémoires
            const totalTheses = theses.length;

            // 2. Analyse des départements
            const departmentsMap = new Map<string, number>();
            theses.forEach(thesis => {
                if (thesis.département && thesis.département.trim()) {
                    const department = thesis.département.trim();
                    departmentsMap.set(department, (departmentsMap.get(department) || 0) + 1);
                }
            });
            const totalDepartments = departmentsMap.size;
            const mostPopularDepartment = Array.from(departmentsMap.entries())
                .sort(([,a], [,b]) => b - a)[0]?.[0] || 'Non défini';

            // 3. Analyse des auteurs
            const authorsSet = new Set<string>();
            theses.forEach(thesis => {
                if (thesis.name && thesis.name.trim()) {
                    authorsSet.add(thesis.name.trim());
                }
            });
            const totalAuthors = authorsSet.size;

            // 4. Analyse des superviseurs
            const supervisorsSet = new Set<string>();
            theses.forEach(thesis => {
                if (thesis.superviseur && thesis.superviseur.trim()) {
                    supervisorsSet.add(thesis.superviseur.trim());
                }
            });
            const totalSupervisors = supervisorsSet.size;

            // 5. Analyse des années
            const years = theses.map(thesis => thesis.annee).filter(year => year);
            const latestYear = years.length > 0 ? Math.max(...years) : new Date().getFullYear();
            const oldestYear = years.length > 0 ? Math.min(...years) : new Date().getFullYear();

            // Répartition par année
            const thesesByYear: { [key: number]: number } = {};
            years.forEach(year => {
                thesesByYear[year] = (thesesByYear[year] || 0) + 1;
            });

            // 6. Analyse des commentaires et notes
            const totalComments = theses.reduce((sum, thesis) => {
                return sum + (thesis.commentaire ? thesis.commentaire.length : 0);
            }, 0);
            const averageCommentsPerThesis = totalTheses > 0 ? Math.round((totalComments / totalTheses) * 10) / 10 : 0;

            // Calcul de la note moyenne globale
            let totalRatings = 0;
            let ratingCount = 0;
            theses.forEach(thesis => {
                if (thesis.commentaire && thesis.commentaire.length > 0) {
                    thesis.commentaire.forEach(comment => {
                        if (comment.note && comment.note > 0) {
                            totalRatings += comment.note;
                            ratingCount++;
                        }
                    });
                }
            });
            const averageRating = ratingCount > 0 ? Math.round((totalRatings / ratingCount) * 10) / 10 : 0;

            // 7. Mémoires sans images
            const thesesWithoutImages = theses.filter(thesis => !thesis.image || thesis.image.trim() === '').length;

            // 8. Analyse des mots-clés les plus populaires
            const keywordsMap = new Map<string, number>();
            theses.forEach(thesis => {
                if (thesis.keywords && thesis.keywords.trim()) {
                    const keywords = thesis.keywords.split(',').map(k => k.trim()).filter(k => k.length > 0);
                    keywords.forEach(keyword => {
                        keywordsMap.set(keyword.toLowerCase(), (keywordsMap.get(keyword.toLowerCase()) || 0) + 1);
                    });
                }
            });
            const topKeywords = Array.from(keywordsMap.entries())
                .sort(([,a], [,b]) => b - a)
                .slice(0, 5)
                .map(([keyword]) => keyword);

            // Département le plus actif (le plus de mémoires récents)
            const recentTheses = theses.filter(thesis => thesis.annee >= latestYear - 1);
            const recentDepartmentsMap = new Map<string, number>();
            recentTheses.forEach(thesis => {
                if (thesis.département && thesis.département.trim()) {
                    const department = thesis.département.trim();
                    recentDepartmentsMap.set(department, (recentDepartmentsMap.get(department) || 0) + 1);
                }
            });
            const mostActiveDepartment = Array.from(recentDepartmentsMap.entries())
                .sort(([,a], [,b]) => b - a)[0]?.[0] || mostPopularDepartment;

            const calculatedStats: ThesisStats = {
                totalTheses,
                totalDepartments,
                totalAuthors,
                totalSupervisors,
                totalComments,
                averageCommentsPerThesis,
                mostPopularDepartment,
                mostActiveDepartment,
                latestYear,
                oldestYear,
                thesesWithoutImages,
                averageRating,
                thesesByYear,
                topKeywords
            };

            setStats(calculatedStats);
            setLastUpdated(new Date());

        } catch (err) {
            setError(err instanceof Error ? err.message : 'Erreur lors du calcul des statistiques');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchThesisStatistics();
    }, []);

    const handleRefresh = () => {
        fetchThesisStatistics();
    };

    if (loading) {
        return (
            <div className={`bg-white rounded-xl border border-gray-200 shadow-sm p-6 ${className}`}>
                <div className="flex items-center justify-center py-8">
                    <LoadingSpinner size="md" text="Calcul des statistiques des mémoires..." />
                </div>
            </div>
        );
    }

    if (error || !stats) {
        return (
            <div className={`bg-white rounded-xl border border-red-200 shadow-sm p-6 ${className}`}>
                <div className="text-center py-4">
                    <p className="text-red-600 mb-4">{error || 'Erreur inconnue'}</p>
                    <button
                        onClick={handleRefresh}
                        className="inline-flex items-center px-4 py-2 rounded-lg text-white font-medium"
                        style={{ backgroundColor: primaryColor }}
                    >
                        <RefreshCw className="w-4 h-4 mr-2" />
                        Réessayer
                    </button>
                </div>
            </div>
        );
    }

    // Calcul des tendances
    const currentYearCount = stats.thesesByYear[stats.latestYear] || 0;
    const previousYearCount = stats.thesesByYear[stats.latestYear - 1] || 0;
    const yearTrend = previousYearCount > 0
        ? Math.round(((currentYearCount - previousYearCount) / previousYearCount) * 100)
        : 0;

    return (
        <div className={`bg-white rounded-xl border border-gray-200 shadow-sm p-6 ${className}`}>
            {/* En-tête */}
            <div className="flex items-center justify-between mb-4">
                <div>
                    <h3 className="font-semibold text-gray-800">
                        Statistiques des mémoires
                    </h3>
                    <p className="text-xs text-gray-500">
                        Dernière mise à jour: {lastUpdated.toLocaleTimeString()}
                    </p>
                </div>
                {showRefreshButton && (
                    <button
                        onClick={handleRefresh}
                        className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                        title="Actualiser les statistiques"
                    >
                        <RefreshCw className="w-4 h-4" />
                    </button>
                )}
            </div>

            {/* Grille des statistiques principales */}
            <div className={`grid gap-4 ${compact ? 'grid-cols-2' : 'grid-cols-2 lg:grid-cols-4'}`}>
                <StatCard
                    title="Total mémoires"
                    value={stats.totalTheses}
                    subtitle={`Span: ${stats.oldestYear}-${stats.latestYear}`}
                    color={primaryColor}
                    backgroundColor={`${primaryColor}08`}
                    trend={{
                        value: yearTrend,
                        isPositive: yearTrend > 0
                    }}
                />

                <StatCard
                    title="Départements"
                    value={stats.totalDepartments}
                    subtitle={`Pop.: ${stats.mostPopularDepartment.length > 12 ? stats.mostPopularDepartment.substring(0, 12) + '...' : stats.mostPopularDepartment}`}
                    color={secondaryColor}
                    backgroundColor={`${secondaryColor}08`}
                />

                <StatCard
                    title="Auteurs"
                    value={stats.totalAuthors}
                    subtitle={`${stats.totalSupervisors} superviseurs`}
                    color={primaryColor}
                    backgroundColor={`${primaryColor}08`}
                />

                <StatCard
                    title="Note moyenne"
                    value={stats.averageRating > 0 ? `${stats.averageRating}/5` : 'N/A'}
                    subtitle={`${stats.totalComments} avis total`}
                    color={stats.averageRating >= 4 ? '#10b981' : stats.averageRating >= 3 ? '#f59e0b' : '#ef4444'}
                    backgroundColor={stats.averageRating >= 4 ? '#10b98108' : stats.averageRating >= 3 ? '#f59e0b08' : '#ef444408'}
                />
            </div>

            {/* Statistiques secondaires en mode étendu */}
            {!compact && (
                <>
                    <div className="mt-6 grid grid-cols-2 lg:grid-cols-4 gap-4">
                        <StatCard
                            title="Dernière année"
                            value={stats.latestYear}
                            subtitle={`${currentYearCount} mémoires`}
                            color={primaryColor}
                            backgroundColor={`${primaryColor}05`}
                        />

                        <StatCard
                            title="Commentaires"
                            value={stats.totalComments}
                            subtitle={`${stats.averageCommentsPerThesis} moy./mémoire`}
                            color={secondaryColor}
                            backgroundColor={`${secondaryColor}05`}
                        />

                        <StatCard
                            title="Dept. actif"
                            value={stats.mostActiveDepartment.length > 10 ? stats.mostActiveDepartment.substring(0, 10) + '...' : stats.mostActiveDepartment}
                            subtitle="Plus récents travaux"
                            color={primaryColor}
                            backgroundColor={`${primaryColor}05`}
                        />

                        <StatCard
                            title="Sans image"
                            value={stats.thesesWithoutImages}
                            subtitle={`${Math.round((stats.thesesWithoutImages / stats.totalTheses) * 100)}% du total`}
                            color={stats.thesesWithoutImages > 0 ? '#ef4444' : '#10b981'}
                            backgroundColor={stats.thesesWithoutImages > 0 ? '#ef444408' : '#10b98108'}
                        />
                    </div>

                    {/* Informations détaillées */}
                    <div className="mt-6 pt-4 border-t border-gray-200">
                        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                            <div className="bg-gray-50 rounded-lg p-4">
                                <h4 className="font-medium text-gray-800 mb-2">Département populaire</h4>
                                <p className="text-lg font-bold" style={{ color: primaryColor }}>
                                    {stats.mostPopularDepartment}
                                </p>
                                <p className="text-xs text-gray-600">
                                    Sur {stats.totalDepartments} départements
                                </p>
                            </div>

                            <div className="bg-gray-50 rounded-lg p-4">
                                <h4 className="font-medium text-gray-800 mb-2">Répartition temporelle</h4>
                                <p className="text-lg font-bold" style={{ color: secondaryColor }}>
                                    {stats.latestYear - stats.oldestYear + 1} années
                                </p>
                                <p className="text-xs text-gray-600">
                                    De {stats.oldestYear} à {stats.latestYear}
                                </p>
                            </div>

                            <div className="bg-gray-50 rounded-lg p-4">
                                <h4 className="font-medium text-gray-800 mb-2">Mots-clés populaires</h4>
                                <div className="flex flex-wrap gap-1">
                                    {stats.topKeywords.slice(0, 3).map((keyword, index) => (
                                        <span
                                            key={index}
                                            className="text-xs px-2 py-1 rounded-full"
                                            style={{
                                                backgroundColor: `${primaryColor}15`,
                                                color: primaryColor
                                            }}
                                        >
                                            {keyword}
                                        </span>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </>
            )}

            {/* Barre de progression de qualité */}
            <div className="mt-4 pt-4 border-t border-gray-200">
                <div className="flex justify-between text-sm text-gray-600 mb-2">
                    <span>Qualité moyenne des mémoires</span>
                    <span>{stats.averageRating > 0 ? `${stats.averageRating}/5` : 'Non évalué'}</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                        className="h-2 rounded-full transition-all duration-500"
                        style={{
                            width: `${stats.averageRating > 0 ? (stats.averageRating / 5) * 100 : 0}%`,
                            backgroundColor: stats.averageRating >= 4 ? '#10b981' :
                                stats.averageRating >= 3 ? '#f59e0b' : '#ef4444'
                        }}
                    />
                </div>
            </div>
        </div>
    );
};

export default ThesisStatistics;
// END OF FILE: src/components/thesis/ThesisStatistics.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/ui/Button.tsx

import React, { forwardRef } from 'react';
import { useConfig } from '../../contexts/ConfigContext';

export interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
    variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger';
    size?: 'sm' | 'md' | 'lg' | 'xl';
    loading?: boolean;
    leftIcon?: React.ReactNode;
    rightIcon?: React.ReactNode;
    fullWidth?: boolean;
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
    ({
         children,
         variant = 'primary',
         size = 'md',
         loading = false,
         leftIcon,
         rightIcon,
         fullWidth = false,
         disabled,
         className = '',
         ...props
     }, ref) => {
        const { orgSettings } = useConfig();
        const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
        const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

        const sizeClasses = {
            sm: 'py-2 px-4 text-sm',
            md: 'py-3 px-6 text-base',
            lg: 'py-4 px-8 text-lg',
            xl: 'py-5 px-10 text-xl'
        };

        const getVariantClasses = () => {
            switch (variant) {
                case 'primary':
                    return 'text-white shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95';
                case 'secondary':
                    return 'text-white shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95';
                case 'outline':
                    return 'border-2 bg-transparent hover:text-white shadow-md hover:shadow-lg transform hover:scale-105 active:scale-95';
                case 'ghost':
                    return 'bg-transparent hover:bg-opacity-10 transform hover:scale-105 active:scale-95';
                case 'danger':
                    return 'bg-red-500 text-white shadow-lg hover:bg-red-600 hover:shadow-xl transform hover:scale-105 active:scale-95';
                default:
                    return 'text-white shadow-lg hover:shadow-xl transform hover:scale-105 active:scale-95';
            }
        };

        const getVariantStyles = () => {
            switch (variant) {
                case 'primary':
                    return {
                        backgroundColor: primaryColor,
                        '--hover-bg': `${primaryColor}dd`
                    };
                case 'secondary':
                    return {
                        backgroundColor: secondaryColor,
                        '--hover-bg': `${secondaryColor}dd`
                    };
                case 'outline':
                    return {
                        borderColor: primaryColor,
                        color: primaryColor,
                        '--hover-bg': primaryColor
                    };
                case 'ghost':
                    return {
                        color: primaryColor,
                        '--hover-bg': `${primaryColor}10`
                    };
                default:
                    return {
                        backgroundColor: primaryColor
                    };
            }
        };

        const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-opacity-30 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none';
        const sizeClass = sizeClasses[size];
        const variantClasses = getVariantClasses();
        const widthClass = fullWidth ? 'w-full' : '';

        const buttonClasses = `${baseClasses} ${sizeClass} ${variantClasses} ${widthClass} ${className}`;
        const buttonStyles = {
            ...getVariantStyles(),
            '--focus-ring-color': `${primaryColor}30`
        } as unknown as React.CSSProperties;

        const handleMouseEnter = (e: React.MouseEvent<HTMLButtonElement>) => {
            if (!disabled && !loading) {
                const target = e.currentTarget;
                if (variant === 'primary') {
                    target.style.backgroundColor = `${primaryColor}dd`;
                } else if (variant === 'secondary') {
                    target.style.backgroundColor = `${secondaryColor}dd`;
                } else if (variant === 'outline') {
                    target.style.backgroundColor = primaryColor;
                    target.style.color = 'white';
                } else if (variant === 'ghost') {
                    target.style.backgroundColor = `${primaryColor}10`;
                }
            }
            props.onMouseEnter?.(e);
        };

        const handleMouseLeave = (e: React.MouseEvent<HTMLButtonElement>) => {
            if (!disabled && !loading) {
                const target = e.currentTarget;
                if (variant === 'primary') {
                    target.style.backgroundColor = primaryColor;
                } else if (variant === 'secondary') {
                    target.style.backgroundColor = secondaryColor;
                } else if (variant === 'outline') {
                    target.style.backgroundColor = 'transparent';
                    target.style.color = primaryColor;
                } else if (variant === 'ghost') {
                    target.style.backgroundColor = 'transparent';
                }
            }
            props.onMouseLeave?.(e);
        };

        const handleFocus = (e: React.FocusEvent<HTMLButtonElement>) => {
            e.target.style.boxShadow = `0 0 0 4px ${primaryColor}30`;
            props.onFocus?.(e);
        };

        const handleBlur = (e: React.FocusEvent<HTMLButtonElement>) => {
            e.target.style.boxShadow = 'none';
            props.onBlur?.(e);
        };

        return (
            <button
                ref={ref}
                className={buttonClasses}
                style={buttonStyles}
                disabled={disabled || loading}
                onMouseEnter={handleMouseEnter}
                onMouseLeave={handleMouseLeave}
                onFocus={handleFocus}
                onBlur={handleBlur}
                {...props}
            >
                {loading && (
                    <svg
                        className="animate-spin -ml-1 mr-3 h-5 w-5 text-current"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                    >
                        <circle
                            className="opacity-25"
                            cx="12"
                            cy="12"
                            r="10"
                            stroke="currentColor"
                            strokeWidth="4"
                        />
                        <path
                            className="opacity-75"
                            fill="currentColor"
                            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        />
                    </svg>
                )}

                {leftIcon && !loading && (
                    <span className="mr-2">{leftIcon}</span>
                )}

                {children}

                {rightIcon && !loading && (
                    <span className="ml-2">{rightIcon}</span>
                )}
            </button>
        );
    }
);

Button.displayName = 'Button';

export default Button;
// END OF FILE: src/components/ui/Button.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/ui/Input.tsx

import React, { forwardRef } from 'react';
import { useConfig } from '../../contexts/ConfigContext';

export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    label?: string;
    error?: string;
    helperText?: string;
    leftIcon?: React.ReactNode;
    rightIcon?: React.ReactNode;
    variant?: 'default' | 'filled' | 'outlined';
    inputSize?: 'sm' | 'md' | 'lg';
}

const Input = forwardRef<HTMLInputElement, InputProps>(
    ({
         label,
         error,
         helperText,
         leftIcon,
         rightIcon,
         variant = 'default',
         inputSize = 'md',
         className = '',
         id,
         ...props
     }, ref) => {
        const { orgSettings } = useConfig();
        const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
        const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

        const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;

        const sizeClasses = {
            sm: 'py-2 px-3 text-sm',
            md: 'py-3 px-4 text-base',
            lg: 'py-4 px-5 text-lg'
        };

        const variantClasses = {
            default: 'border border-gray-300 bg-white',
            filled: 'border-0 bg-gray-100',
            outlined: 'border-2 border-gray-300 bg-transparent'
        };

        const getInputClasses = () => {
            const baseClasses = 'w-full rounded-lg transition-all duration-200 focus:outline-none';
            const sizeClass = sizeClasses[inputSize];
            const variantClass = variantClasses[variant];
            const errorClass = error ? 'border-red-500' : '';
            const iconLeftClass = leftIcon ? 'pl-12' : '';
            const iconRightClass = rightIcon ? 'pr-12' : '';

            return `${baseClasses} ${sizeClass} ${variantClass} ${errorClass} ${iconLeftClass} ${iconRightClass} ${className}`;
        };

        const focusStyle = {
            '--focus-color': primaryColor
        } as React.CSSProperties;

        return (
            <div className="relative">
                {label && (
                    <label
                        htmlFor={inputId}
                        className="block text-sm font-medium mb-2"
                        style={{ color: secondaryColor }}
                    >
                        {label}
                        {props.required && <span className="text-red-500 ml-1">*</span>}
                    </label>
                )}

                <div className="relative">
                    {leftIcon && (
                        <div className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                            {leftIcon}
                        </div>
                    )}

                    <input
                        ref={ref}
                        id={inputId}
                        className={getInputClasses()}
                        style={{
                            ...focusStyle,
                            ...(props.style || {})
                        }}
                        onFocus={(e) => {
                            e.target.style.borderColor = primaryColor;
                            e.target.style.boxShadow = `0 0 0 3px ${primaryColor}20`;
                            props.onFocus?.(e);
                        }}
                        onBlur={(e) => {
                            e.target.style.borderColor = error ? '#ef4444' : '#d1d5db';
                            e.target.style.boxShadow = 'none';
                            props.onBlur?.(e);
                        }}
                        {...props}
                    />

                    {rightIcon && (
                        <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400">
                            {rightIcon}
                        </div>
                    )}
                </div>

                {error && (
                    <p className="mt-1 text-sm text-red-500 flex items-center">
                        <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        {error}
                    </p>
                )}

                {helperText && !error && (
                    <p className="mt-1 text-sm text-gray-500">{helperText}</p>
                )}
            </div>
        );
    }
);

Input.displayName = 'Input';

export default Input;
// END OF FILE: src/components/ui/Input.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/components/ui/Select.tsx

import React, { forwardRef } from 'react';
import { useConfig } from '../../contexts/ConfigContext';
import { ChevronDown } from 'lucide-react';

export interface SelectOption {
    value: string;
    label: string;
    disabled?: boolean;
}

export interface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {
    label?: string;
    error?: string;
    helperText?: string;
    options: SelectOption[];
    placeholder?: string;
    variant?: 'default' | 'filled' | 'outlined';
    selectSize?: 'sm' | 'md' | 'lg';
}

const Select = forwardRef<HTMLSelectElement, SelectProps>(
    ({
         label,
         error,
         helperText,
         options,
         placeholder,
         variant = 'default',
         selectSize = 'md',
         className = '',
         id,
         ...props
     }, ref) => {
        const { orgSettings } = useConfig();
        const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
        const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

        const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;

        const sizeClasses = {
            sm: 'py-2 px-3 pr-8 text-sm',
            md: 'py-3 px-4 pr-10 text-base',
            lg: 'py-4 px-5 pr-12 text-lg'
        };

        const variantClasses = {
            default: 'border border-gray-300 bg-white',
            filled: 'border-0 bg-gray-100',
            outlined: 'border-2 border-gray-300 bg-transparent'
        };

        const getSelectClasses = () => {
            const baseClasses = 'w-full rounded-lg transition-all duration-200 focus:outline-none appearance-none cursor-pointer';
            const sizeClass = sizeClasses[selectSize];
            const variantClass = variantClasses[variant];
            const errorClass = error ? 'border-red-500' : '';

            return `${baseClasses} ${sizeClass} ${variantClass} ${errorClass} ${className}`;
        };

        const iconSize = {
            sm: 16,
            md: 20,
            lg: 24
        };

        const iconPosition = {
            sm: 'right-2',
            md: 'right-3',
            lg: 'right-4'
        };

        return (
            <div className="relative">
                {label && (
                    <label
                        htmlFor={selectId}
                        className="block text-sm font-medium mb-2"
                        style={{ color: secondaryColor }}
                    >
                        {label}
                        {props.required && <span className="text-red-500 ml-1">*</span>}
                    </label>
                )}

                <div className="relative">
                    <select
                        ref={ref}
                        id={selectId}
                        className={getSelectClasses()}
                        onFocus={(e) => {
                            e.target.style.borderColor = primaryColor;
                            e.target.style.boxShadow = `0 0 0 3px ${primaryColor}20`;
                            props.onFocus?.(e);
                        }}
                        onBlur={(e) => {
                            e.target.style.borderColor = error ? '#ef4444' : '#d1d5db';
                            e.target.style.boxShadow = 'none';
                            props.onBlur?.(e);
                        }}
                        {...props}
                    >
                        {placeholder && (
                            <option value="" disabled>
                                {placeholder}
                            </option>
                        )}
                        {options.map((option) => (
                            <option
                                key={option.value}
                                value={option.value}
                                disabled={option.disabled}
                            >
                                {option.label}
                            </option>
                        ))}
                    </select>

                    {/* Icône chevron personnalisée */}
                    <div
                        className={`absolute top-1/2 transform -translate-y-1/2 pointer-events-none ${iconPosition[selectSize]}`}
                        style={{ color: primaryColor }}
                    >
                        <ChevronDown size={iconSize[selectSize]} />
                    </div>
                </div>

                {error && (
                    <p className="mt-1 text-sm text-red-500 flex items-center">
                        <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        {error}
                    </p>
                )}

                {helperText && !error && (
                    <p className="mt-1 text-sm text-gray-500">{helperText}</p>
                )}
            </div>
        );
    }
);

Select.displayName = 'Select';

export default Select;
// END OF FILE: src/components/ui/Select.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/configs/firebase.ts

// src/config/firebase.ts
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';

const firebaseConfig = {
    apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
    authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
    projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
    storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
    appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
export const auth = getAuth(app);
export default app;
// END OF FILE: src/configs/firebase.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/contexts/ConfigContext.tsx

import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { configService } from '../services/configService';
import { OrgSettings, AppSettings } from '../types/config';

interface ConfigContextType {
    orgSettings: OrgSettings | null;
    appSettings: AppSettings | null;
    isLoading: boolean;
    error: string | null;
    refetch: () => Promise<void>;
    testConnection: () => Promise<boolean>;
}

const ConfigContext = createContext<ConfigContextType | undefined>(undefined);

interface ConfigProviderProps {
    children: ReactNode;
}

export const ConfigProvider: React.FC<ConfigProviderProps> = ({ children }) => {
    const [orgSettings, setOrgSettings] = useState<OrgSettings | null>(null);
    const [appSettings, setAppSettings] = useState<AppSettings | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchSettings = async () => {
        try {
            setIsLoading(true);
            setError(null);

            // Test de connexion Firebase d'abord
            const isConnected = await configService.testFirebaseConnection();
            if (!isConnected) {
                throw new Error('Impossible de se connecter à Firebase');
            }

            const [orgData, appData] = await Promise.all([
                configService.getOrgSettings(),
                configService.getAppSettings()
            ]);

            setOrgSettings(orgData);
            setAppSettings(appData);

            // Vérifier si les données viennent vraiment de Firebase
            if (orgData.Name === 'BiblioENSPY' && !orgData.Logo) {
                setError('Utilisation des paramètres par défaut. Vérifiez votre base de données Firebase.');
            }

        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
            setError(`Erreur de configuration: ${errorMessage}`);

            // Charger les paramètres par défaut en cas d'erreur
            try {
                const [orgData, appData] = await Promise.all([
                    configService.getOrgSettings(),
                    configService.getAppSettings()
                ]);
                setOrgSettings(orgData);
                setAppSettings(appData);
            } catch (fallbackError) {
                console.error('❌ Even fallback failed:', fallbackError);
            }
        } finally {
            setIsLoading(false);
        }
    };

    const testConnection = async (): Promise<boolean> => {
        return await configService.testFirebaseConnection();
    };

    const refetch = async () => {
        configService.invalidateCache();
        await fetchSettings();
    };

    useEffect(() => {
        fetchSettings();
    }, []);

    // Debug: Log des changements d'état
    useEffect(() => {
    }, [orgSettings, appSettings, isLoading, error]);

    return (
        <ConfigContext.Provider value={{
            orgSettings,
            appSettings,
            isLoading,
            error,
            refetch,
            testConnection
        }}>
            {children}
        </ConfigContext.Provider>
    );
};

export const useConfig = (): ConfigContextType => {
    const context = useContext(ConfigContext);
    if (context === undefined) {
        throw new Error('useConfig must be used within a ConfigProvider');
    }
    return context;
};
// END OF FILE: src/contexts/ConfigContext.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/contexts/readme.md

#### dans ce dossier nous allons definir les context 
├── contexts/            # Contextes React
│   │   ├── AuthContext.jsx  # Contexte pour l'authentification
│   │   └── ThemeContext.jsx # Contexte pour le thème dark/light// END OF FILE: src/contexts/readme.md

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/hooks/readme.md

// END OF FILE: src/hooks/readme.md

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/index.css

@import "tailwindcss";// END OF FILE: src/index.css

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/layouts/DashboardLayout.tsx

// src/layouts/DashboardLayout.tsx
import { useState, useEffect } from 'react';
import { NavLink, Outlet, useLocation } from 'react-router-dom';
import { 
  User, 
  Calendar, 
  ShoppingCart, 
  MessageCircle, 
  Clock, 
  Bell, 
  LogOut,
  ChevronLeft,
  ChevronRight,
  BookOpen,
  PieChart,
  BarChart4,
  Settings
} from 'lucide-react';

// Définition des variables de couleur
const COLORS = {
  primary: '#ff8c00',    // Orange
  secondary: '#1b263b',  // Dark Blue
  lightText: '#ffffff',
  hoverBg: 'rgba(255, 255, 255, 0.1)',
  activeBg: 'rgba(255, 140, 0, 0.2)'
};

// Interface pour les menus
interface MenuItem {
  path: string;
  name: string;
  icon: JSX.Element;
}

const DashboardLayout = () => {
  const [collapsed, setCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const location = useLocation();

  // Détection du mode mobile
  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
      if (window.innerWidth < 768) {
        setCollapsed(true);
      }
    };

    handleResize(); // Initialisation
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const toggleSidebar = () => {
    setCollapsed(!collapsed);
  };

  const menuItems: MenuItem[] = [
    
    { 
      path: '/dashboard/profile', 
      name: ' Profil', 
      icon: <User size={20} /> 
    },
    { 
      path: '/dashboard/reservations', 
      name: ' Réservations', 
      icon: <Calendar size={20} /> 
    },
    { 
      path: '/dashboard/cart', 
      name: ' Panier', 
      icon: <ShoppingCart size={20} /> 
    },
    { 
      path: '/dashboard/chat', 
      name: 'Chat', 
      icon: <MessageCircle size={20} /> 
    },
    { 
        path: '/dashboard/statistics', 
        name: 'Statistics', 
        icon: <PieChart size={20} /> 
    },
    { 
      path: '/dashboard/history', 
      name: 'Historique', 
      icon: <Clock size={20} /> 
    },
    { 
      path: '/dashboard/notifications', 
      name: 'Notifications', 
      icon: <Bell size={20} /> 
    }
  ];

  return (
    <div className="flex h-screen overflow-hidden bg-gray-100">
      {/* Sidebar */}
      <aside 
        className={`fixed md:relative h-full transition-all duration-300 z-20 shadow-xl ${
          isMobile && !collapsed ? 'translate-x-0' : isMobile && collapsed ? '-translate-x-full' : 'translate-x-0'
        }`}
        style={{ 
          width: collapsed ? '80px' : '260px',
          backgroundColor: COLORS.secondary,
        }}
      >
        {/* Logo et bouton de toggle */}
        <div className="relative h-20 flex items-center px-4">
          {!collapsed && (
            <div className="flex items-center space-x-2">
              <BookOpen size={28} color={COLORS.primary} />
              <span className="text-xl font-bold text-white">BiblioENSPY</span>
            </div>
          )}
          {collapsed && (
            <BookOpen size={28} color={COLORS.primary} className="mx-auto" />
          )}
          <button 
            onClick={toggleSidebar}
            className={`absolute ${collapsed ? 'right-0 top-1/2 -translate-y-1/2 -mr-3' : 'right-4 top-1/2 -translate-y-1/2'} 
                      p-1 rounded-full bg-white hover:bg-gray-100 focus:outline-none 
                      shadow-md transition-transform duration-300 z-30`}
            style={{ 
              color: COLORS.primary,
              transform: collapsed ? 'rotate(0deg)' : 'rotate(180deg)'
            }}
          >
            <ChevronLeft size={16} />
          </button>
        </div>

        {/* Profil utilisateur */}
        <div 
          className={`relative px-4 py-5 border-b border-opacity-20`}
          style={{ borderColor: 'rgba(255, 255, 255, 0.2)' }}
        >
          <div className="flex items-center">
            <div className="relative">
              <div className="w-12 h-12 rounded-full overflow-hidden bg-gray-300 border-2 border-white">
                <img 
                  src="https://randomuser.me/api/portraits/women/44.jpg" 
                  alt="Profile" 
                  className="w-full h-full object-cover"
                />
              </div>
              <span 
                className="absolute -top-1 -right-1 w-4 h-4 rounded-full bg-green-500 border-2 border-white"
                style={{ display: collapsed ? 'none' : 'block' }}
              ></span>
            </div>
            
            {!collapsed && (
              <div className="ml-3 overflow-hidden">
                <h3 className="text-white font-semibold truncate">BornBeforeDesign</h3>
                <p className="text-gray-300 text-sm truncate">bornbeforedesign@gmail.com</p>
              </div>
            )}
          </div>
        </div>

        {/* Navigation menu */}
        <nav className="mt-4 px-2">
          <ul className="space-y-1">
            {menuItems.map((item) => {
              const isActive = location.pathname === item.path || 
                              (item.path === '/dashboard' && location.pathname === '/dashboard');
              
              return (
                <li key={item.path}>
                  <NavLink
                    to={item.path}
                    className={`flex items-center px-4 py-3 rounded-lg transition-all duration-200 ${
                      isActive 
                        ? 'bg-opacity-20 font-medium' 
                        : 'hover:bg-opacity-10'
                    }`}
                    style={{
                      backgroundColor: isActive ? COLORS.activeBg : 'transparent',
                      color: isActive ? COLORS.primary : COLORS.lightText,
                    }}
                  >
                    <div className="flex items-center justify-center">
                      {item.icon}
                    </div>
                    
                    {!collapsed && (
                      <div className="relative ml-3 whitespace-nowrap">
                        {item.name}
                        {isActive && (
                          <span 
                            className="absolute bottom-0 left-0 w-full h-0.5 transform scale-x-100 transition-transform duration-300 origin-left"
                            style={{ backgroundColor: COLORS.primary }}
                          ></span>
                        )}
                      </div>
                    )}
                  </NavLink>
                </li>
              );
            })}
          </ul>
        </nav>

        {/* Footer / Logout */}
        <div className="absolute bottom-0 w-full border-t border-opacity-20 p-4" style={{ borderColor: 'rgba(255, 255, 255, 0.2)' }}>
          <NavLink
            to="/auth"
            className="flex items-center px-4 py-3 rounded-lg transition-all duration-200 hover:bg-opacity-10"
            style={{
              color: COLORS.lightText,
              backgroundColor: 'transparent',
            }}
          >
            <div className="flex items-center justify-center">
              <LogOut size={20} />
            </div>
            
            {!collapsed && (
              <span className="ml-3 whitespace-nowrap">Se déconnecter</span>
            )}
          </NavLink>
        </div>
      </aside>

      {/* Mobile overlay */}
      {isMobile && !collapsed && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-10"
          onClick={toggleSidebar}
        ></div>
      )}

      {/* Toggle button for mobile */}
      {isMobile && collapsed && (
        <button
          onClick={toggleSidebar}
          className="fixed top-4 left-4 z-30 p-2 rounded-full bg-white shadow-lg"
          style={{ color: COLORS.primary }}
        >
          <ChevronRight size={20} />
        </button>
      )}

      {/* Main content */}
      <main 
        className="flex-1 overflow-auto transition-all duration-300 relative"
      >
        <div className="px-6 py-8 max-w-7xl mx-auto">
          <Outlet />
        </div>
      </main>
    </div>
  );
};

export default DashboardLayout;// END OF FILE: src/layouts/DashboardLayout.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/layouts/RootLayout.tsx

import { Outlet } from 'react-router-dom';
import Header from '../components/layout/Header.tsx';
import Footer from '../components/layout/Footer.tsx';

const RootLayout = () => {
  return (
    <div className="">
      <Header />
      <main className="flex-grow  mx-auto ">
        <Outlet />
      </main>
      <Footer />
    </div>
  );
};

export default RootLayout;
// END OF FILE: src/layouts/RootLayout.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/main.tsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
// END OF FILE: src/main.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/AuthPage.tsx

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import LoginForm from '../components/auth/LoginForm';
import RegisterForm from '../components/auth/RegisterForm';
import EmailVerification from '../components/auth/EmailVerification';
import { authService } from '../services/auth/authService';

type AuthMode = 'login' | 'register' | 'verify-email' | 'reset-password';

const AuthPage: React.FC = () => {
    const navigate = useNavigate();
    const [mode, setMode] = useState<AuthMode>('login');
    const [emailToVerify, setEmailToVerify] = useState<string>('');

    // Gestion du succès de connexion
    const handleLoginSuccess = () => {
        console.log('✅ Connexion réussie, redirection...');
        navigate('/dashboard', { replace: true });
    };

    // Gestion du succès d'inscription
    const handleRegisterSuccess = (email: string) => {
        console.log('✅ Inscription réussie pour:', email);
        setEmailToVerify(email);
        setMode('verify-email');
    };

    // Gestion du renvoi d'email de vérification
    const handleResendVerificationEmail = async () => {
        try {
            await authService.sendEmailVerification();
            console.log('✅ Email de vérification renvoyé');
        } catch (error) {
            console.error('❌ Erreur renvoi email:', error);
            throw error;
        }
    };

    // Gestion du retour à la connexion
    const handleBackToLogin = () => {
        setMode('login');
        setEmailToVerify('');
    };

    // Gestion du mot de passe oublié
    const handleForgotPassword = async (email: string) => {
        try {
            await authService.resetPassword(email);
            console.log('✅ Email de réinitialisation envoyé');
            // Vous pouvez ajouter une notification ici
        } catch (error) {
            console.error('❌ Erreur reset password:', error);
        }
    };

    return (
        <div className="min-h-screen">
            {mode === 'login' && (
                <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center p-4">
                    <LoginForm
                        onSuccess={handleLoginSuccess}
                        onSwitchToRegister={() => setMode('register')}
                        onForgotPassword={handleForgotPassword}
                    />
                </div>
            )}

            {mode === 'register' && (
                <RegisterForm
                    onSuccess={handleRegisterSuccess}
                    onSwitchToLogin={() => setMode('login')}
                />
            )}

            {mode === 'verify-email' && (
                <EmailVerification
                    email={emailToVerify}
                    onResendEmail={handleResendVerificationEmail}
                    onBackToLogin={handleBackToLogin}
                />
            )}
        </div>
    );
};

export default AuthPage;
// END OF FILE: src/pages/AuthPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/BookDetailsPage.tsx

import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useConfig } from '../contexts/ConfigContext';
import { authService } from '../services/auth/authService';
import { BiblioUser } from '../types/auth';
import { Timestamp, doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';
import { db } from '../configs/firebase';

// Import des composants
import BookHeader from '../components/books/BookHeader';
import BookDescription from '../components/books/BookDescription';
import CommentsSection from '../components/common/CommentsSection.tsx';
import CommentModal from '../components/common/CommentModal.tsx';
import LoadingSpinner from '../components/common/LoadingSpinner';

// Import des interfaces depuis BookCard
import { BiblioBook, Comment, CommentWithUserData } from '../components/books/BookCard';

const BookDetailsPage: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const { orgSettings } = useConfig();

    // États principaux
    const [book, setBook] = useState<BiblioBook | null>(null);
    const [commentsWithUserData, setCommentsWithUserData] = useState<CommentWithUserData[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentUser, setCurrentUser] = useState<BiblioUser | null>(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);

    // États pour les interactions
    const [isFavorite, setIsFavorite] = useState(false);
    const [isReserving, setIsReserving] = useState(false);
    const [isCommentModalOpen, setIsCommentModalOpen] = useState(false);
    const [loadingComments, setLoadingComments] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    // Charger les données utilisateur
    useEffect(() => {
        const loadUserData = async () => {
            try {
                const user = await authService.getCurrentUser();
                if (user) {
                    setCurrentUser(user);
                    setIsAuthenticated(true);
                }
            } catch (error) {
                console.error('Erreur chargement utilisateur:', error);
            }
        };

        loadUserData();
    }, [id]);

    // Fonction pour récupérer les données utilisateur d'un commentaire
    const getUserDataForComment = async (nomUser: string): Promise<{ userName: string; userAvatar?: string }> => {
        try {
            // Si nomUser correspond à un nom d'utilisateur, essayez de récupérer l'avatar
            // Ici vous pourriez faire une requête pour chercher l'utilisateur par nom
            // Pour l'instant, on retourne juste le nomUser
            return {
                userName: nomUser || 'Utilisateur anonyme',
                userAvatar: undefined // Vous pouvez implémenter la logique pour récupérer l'avatar
            };
        } catch (error) {
            console.error('Erreur récupération données utilisateur:', error);
            return { userName: nomUser || 'Utilisateur anonyme' };
        }
    };

    // Charger les commentaires avec les données utilisateur
    const loadCommentsWithUserData = async (comments: Comment[]) => {
        setLoadingComments(true);

        try {
            const commentsWithData = await Promise.all(
                comments.map(async (comment, index) => {
                    const userData = await getUserDataForComment(comment.nomUser);
                    return {
                        ...comment,
                        id: `comment_${index}_${comment.heure.toMillis()}`, // ID unique pour React
                        userId: comment.nomUser, // Utilise nomUser comme userId temporaire
                        userName: userData.userName,
                        userAvatar: userData.userAvatar,
                        helpful: 0 // Valeur par défaut pour le système de votes
                    } as CommentWithUserData;
                })
            );

            setCommentsWithUserData(commentsWithData);
        } catch (error) {
            console.error('Erreur chargement commentaires:', error);
            setCommentsWithUserData([]);
        } finally {
            setLoadingComments(false);
        }
    };

    // Charger les données du livre depuis Firebase
    useEffect(() => {
        const fetchBookData = async () => {
            if (!id) {
                setError('ID du livre manquant');
                setLoading(false);
                return;
            }

            try {
                setLoading(true);
                setError(null);

                // Récupérer le livre depuis Firestore
                const bookDoc = await getDoc(doc(db, 'BiblioBooks', id));

                if (!bookDoc.exists()) {
                    setError('Livre introuvable dans la base de données');
                    setLoading(false);
                    return;
                }

                const bookData = { id: bookDoc.id, ...bookDoc.data() } as BiblioBook;
                setBook(bookData);

                // Charger les commentaires avec les données utilisateur
                if (bookData.commentaire && bookData.commentaire.length > 0) {
                    await loadCommentsWithUserData(bookData.commentaire);
                } else {
                    console.log('📝 Aucun commentaire pour ce livre');
                    setCommentsWithUserData([]);
                }

            } catch {
                setError('Impossible de charger les détails du livre. Veuillez réessayer plus tard.');
            } finally {
                setLoading(false);
            }
        };

        fetchBookData();
    }, [id]);

    // Gestion de la réservation
    const handleReserve = async () => {
        if (!isAuthenticated) {
            navigate('/auth');
            return;
        }

        if (!book || book.exemplaire <= 0) {
            return;
        }

        setIsReserving(true);

        try {
            // Mettre à jour le nombre d'exemplaires dans Firestore
            const bookRef = doc(db, 'BiblioBook', book.id);
            await updateDoc(bookRef, {
                exemplaire: book.exemplaire - 1
            });

            // Mettre à jour l'état local
            setBook(prev => prev ? {
                ...prev,
                exemplaire: prev.exemplaire - 1
            } : null);

            // TODO: Ajouter la réservation à l'utilisateur

        } catch (error) {
            console.error('❌ Erreur réservation:', error);
            alert('Erreur lors de la réservation. Veuillez réessayer.');
        } finally {
            setIsReserving(false);
        }
    };

    // Gestion des favoris
    const handleToggleFavorite = async () => {
        if (!isAuthenticated) {
            navigate('/auth');
            return;
        }

        try {
            setIsFavorite(!isFavorite);

            const message = isFavorite
                ? 'Livre retiré des favoris'
                : 'Livre ajouté aux favoris';
            console.log(message);

        } catch (error) {
            console.error('❌ Erreur favoris:', error);
        }
    };

    // Gestion des commentaires
    const handleSubmitComment = async (commentData: { texte: string; note: number; nomUser: string }) => {
        if (!isAuthenticated || !currentUser || !book) {
            throw new Error('Non authentifié');
        }

        try {
            const newComment: Comment = {
                heure: Timestamp.now(),
                nomUser: commentData.nomUser,
                note: commentData.note,
                texte: commentData.texte
            };

            // Ajouter le commentaire au livre dans Firestore
            const bookRef = doc(db, 'BiblioBooks', book.id);
            await updateDoc(bookRef, {
                commentaire: arrayUnion(newComment)
            });

            // Mettre à jour l'état local du livre
            setBook(prev => prev ? {
                ...prev,
                commentaire: [newComment, ...prev.commentaire]
            } : null);

            // Créer le commentaire avec données utilisateur pour l'affichage
            const newCommentWithUserData: CommentWithUserData = {
                ...newComment,
                id: `comment_new_${Date.now()}`,
                userId: currentUser.id || '',
                userName: currentUser.name,
                userAvatar: currentUser.profilePicture,
                helpful: 0
            };

            // Mettre à jour l'état local des commentaires avec données utilisateur
            setCommentsWithUserData(prev => [newCommentWithUserData, ...prev]);

        } catch (error) {
            console.error('❌ Erreur ajout commentaire:', error);
            throw error;
        }
    };

    // Gestion des votes "utile"
    const handleHelpfulClick = async (commentId: string) => {
        if (!isAuthenticated) {
            navigate('/auth');
            return;
        }

        try {
            setCommentsWithUserData(prev =>
                prev.map(comment =>
                    comment.id === commentId
                        ? { ...comment, helpful: (comment.helpful || 0) + 1 }
                        : comment
                )
            );

        } catch (error) {
            console.error('❌ Erreur vote utile:', error);
        }
    };

    const handleLoginRequired = () => {
        navigate('/auth');
    };

    // États de chargement
    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <LoadingSpinner
                    size="xl"
                    text="Chargement des détails du livre..."
                    fullScreen
                />
            </div>
        );
    }

    // Gestion des erreurs
    if (error || !book) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
                <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full text-center">
                    <div
                        className="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center"
                        style={{ backgroundColor: `${primaryColor}15` }}
                    >
                        <svg
                            className="w-8 h-8"
                            style={{ color: primaryColor }}
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <h2 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                        Livre introuvable
                    </h2>
                    <p className="text-gray-600 mb-6">
                        {error || 'Le livre que vous recherchez n\'existe pas ou a été supprimé.'}
                    </p>
                    <div className="flex flex-col sm:flex-row gap-3">
                        <button
                            onClick={() => window.location.reload()}
                            className="flex-1 px-6 py-3 cursor-pointer rounded-lg font-medium text-white transition-colors"
                            style={{ backgroundColor: primaryColor }}
                        >
                            Réessayer
                        </button>
                        <button
                            onClick={() => navigate('/books')}
                            className="flex-1 px-6 py-3 cursor-pointer rounded-lg font-medium border-2 transition-colors"
                            style={{
                                borderColor: primaryColor,
                                color: primaryColor
                            }}
                        >
                            Retour au catalogue
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Navigation breadcrumb */}
            <div className="bg-white border-b border-gray-200">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                    <nav className="flex items-center space-x-2 text-sm">
                        <button
                            onClick={() => navigate('/')}
                            className="text-gray-500 cursor-pointer hover:text-gray-700 transition-colors"
                        >
                            Accueil
                        </button>
                        <span className="text-gray-400">/</span>
                        <button
                            onClick={() => navigate('/books')}
                            className="text-gray-500 cursor-pointer hover:text-gray-700 transition-colors"
                        >
                            Catalogue
                        </button>
                        <span className="text-gray-400">/</span>
                        <span style={{ color: primaryColor }} className="font-medium">
                            {book.name}
                        </span>
                    </nav>
                </div>
            </div>

            {/* Contenu principal */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="space-y-8">
                    {/* En-tête du livre */}
                    <BookHeader
                        book={book}
                        onReserve={handleReserve}
                        onToggleFavorite={handleToggleFavorite}
                        onOpenCommentModal={() => setIsCommentModalOpen(true)}
                        isFavorite={isFavorite}
                        isAuthenticated={isAuthenticated}
                        isReserving={isReserving}
                        commentsWithUserData={commentsWithUserData}
                    />

                    {/* Description du livre */}
                    <BookDescription book={book} />

                    {/* Section des commentaires */}
                    <div className="relative">
                        {loadingComments && (
                            <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10 rounded-2xl">
                                <LoadingSpinner size="md" text="Chargement des commentaires..." />
                            </div>
                        )}

                        <CommentsSection
                            comments={commentsWithUserData}
                            onOpenCommentModal={() => setIsCommentModalOpen(true)}
                            onHelpfulClick={handleHelpfulClick}
                            isAuthenticated={isAuthenticated}
                        />
                    </div>
                </div>
            </div>

            {/* Modal de commentaire */}
            <CommentModal
                isOpen={isCommentModalOpen}
                onClose={() => setIsCommentModalOpen(false)}
                onSubmit={handleSubmitComment}
                bookTitle={book.name}
                isAuthenticated={isAuthenticated}
                onLoginRequired={handleLoginRequired}
                currentUserName={currentUser?.name || ''}
            />

            {/* Bouton flottant de retour */}
            <button
                onClick={() => navigate('/books')}
                className="fixed bottom-6 left-6 w-14 h-14 rounded-full shadow-xl text-white flex items-center justify-center transition-all duration-200 hover:shadow-2xl hover:scale-110 z-50"
                style={{ backgroundColor: secondaryColor }}
                title="Retour au catalogue"
            >
                <svg
                    className="w-6 h-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
            </button>
        </div>
    );
};

export default BookDetailsPage;
// END OF FILE: src/pages/BookDetailsPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/BooksPage.tsx

import React, { useState, useCallback } from 'react';
import { useConfig } from '../contexts/ConfigContext';

// Import de VOS composants existants
import DepartmentFilter from '../components/common/DepartmentFilter.tsx';
import AdvancedSearchBar from '../components/books/AdvancedSearchBar';
import BooksSortOptions, { SortOption, ViewMode } from '../components/books/BooksSortOptions';

import BooksList from '../components/books/BooksList';
import Header from "../components/layout/Header.tsx";
import Footer from "../components/layout/Footer.tsx";
import {MessageCircle} from "lucide-react";
import LibraryStatistics from "../components/books/LibraryStatistics.tsx";

interface SearchFilters {
    query: string;
    author: string;
    publisher: string;
    category: string;
    yearFrom: string;
    yearTo: string;
}

const BooksPage: React.FC = () => {
    const { orgSettings } = useConfig();

    const [searchFilters, setSearchFilters] = useState<SearchFilters>({
        query: '',
        author: '',
        publisher: '',
        category: '',
        yearFrom: '',
        yearTo: ''
    });

    const [selectedDepartments, setSelectedDepartments] = useState<string[]>([]);
    const [sortOption, setSortOption] = useState<SortOption>('title-asc');
    const [viewMode, setViewMode] = useState<ViewMode>('grid');
    const [favoriteBooks, setFavoriteBooks] = useState<string[]>([]);

    // Configuration des couleurs
    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    // Handlers pour les composants existants
    const handleSearchChange = useCallback((filters: SearchFilters) => {
        setSearchFilters(filters);
    }, []);

    const handleDepartmentChange = useCallback((departments: string[]) => {
        setSelectedDepartments(departments);
    }, []);

    const handleSortChange = useCallback((sort: SortOption) => {
        setSortOption(sort);
    }, []);

    const handleViewModeChange = useCallback((mode: ViewMode) => {
        setViewMode(mode);
    }, []);

    const handleBookReserve = useCallback(async (bookId: string) => {
        try {
            console.log('📚 Réservation du livre:', bookId);
            // TODO: Implémenter la logique de réservation avec votre service
            // await reservationService.reserveBook(bookId);

            // Simuler un délai
            await new Promise(resolve => setTimeout(resolve, 1000));

            alert('Livre réservé avec succès !');
        } catch {
            alert('Erreur lors de la réservation. Veuillez réessayer.');
        }
    }, []);

    // Gestion des favoris
    const handleToggleFavorite = useCallback((bookId: string) => {
        setFavoriteBooks(prev => {
            const newFavorites = prev.includes(bookId)
                ? prev.filter(id => id !== bookId)
                : [...prev, bookId];

            return newFavorites;
        });
    }, []);

    return (
        <div className="min-h-screen bg-gray-50">
            <Header />

            {/* En-tête avec hero section */}
            <div className="border bg-[#1b263b] border-gray-200 shadow-sm"
            >
                <div className="container mx-auto px-4 py-12">
                    {/* Titre principal */}
                    <div className="text-center mb-8">
                        <div className="flex justify-center mb-4 mt-12">
                            <div
                                className="w-16 h-1 rounded-full"
                                style={{
                                    background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                                }}
                            />
                        </div>
                        <h1
                            className="text-4xl md:text-5xl font-bold mb-4"
                            style={{ color: primaryColor }}
                        >
                            Livres {organizationName}
                        </h1>
                        <p className="text-lg text-white max-w-3xl mx-auto leading-relaxed">
                            Explorez notre collection complète de livres, mémoires et ressources académiques.
                            Recherchez, filtrez et découvrez les ouvrages qui enrichiront vos connaissances.
                        </p>
                    </div>

                    {/* Barre de recherche avancée - VOTRE COMPOSANT */}
                    <div className="max-w-4xl mx-auto">
                        <AdvancedSearchBar
                            onSearchChange={handleSearchChange}
                            placeholder="Rechercher par titre, auteur, éditeur ou mot-clé..."
                        />
                    </div>
                </div>
            </div>

            {/* Contenu principal */}
            <div className="container mx-auto px-4 py-8">
                <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
                    {/* Sidebar avec filtres */}
                    <aside className="xl:col-span-1 space-y-6">
                        {/* Filtre par département - VOTRE COMPOSANT CORRIGÉ */}
                        <DepartmentFilter
                            selectedDepartments={selectedDepartments}
                            onDepartmentChange={handleDepartmentChange}
                        />

                        {/* Informations utiles */}
                        <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6">
                            <div className="flex items-center mb-4">
                                <div
                                    className="w-8 h-8 rounded-lg flex items-center justify-center mr-3"
                                    style={{ backgroundColor: `${primaryColor}15` }}
                                >
                                    <svg
                                        className="w-4 h-4"
                                        style={{ color: primaryColor }}
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                                    </svg>
                                </div>
                                <h3 className="font-semibold text-gray-800">Conseils de recherche</h3>
                            </div>
                            <ul className="text-sm text-gray-600 space-y-3">
                                <li className="flex items-start">
                                    <div className="w-2 h-2 rounded-full bg-green-400 mt-1.5 mr-3 flex-shrink-0" />
                                    <span>Utilisez des <strong>mots-clés précis</strong> pour des résultats pertinents</span>
                                </li>
                                <li className="flex items-start">
                                    <div className="w-2 h-2 rounded-full bg-blue-400 mt-1.5 mr-3 flex-shrink-0" />
                                    <span>Combinez <strong>plusieurs filtres</strong> pour affiner votre recherche</span>
                                </li>
                                <li className="flex items-start">
                                    <div className="w-2 h-2 rounded-full bg-purple-400 mt-1.5 mr-3 flex-shrink-0" />
                                    <span>Explorez les <strong>départements</strong> pour découvrir de nouveaux domaines</span>
                                </li>
                            </ul>
                        </div>

                        <LibraryStatistics
                            className="mb-8"
                            showRefreshButton={true}
                            compact={true}
                        />
                    </aside>

                    {/* Contenu principal */}
                    <main className="xl:col-span-3 space-y-6">
                        {/* Options de tri et d'affichage - VOTRE COMPOSANT */}
                        <BooksSortOptions
                            currentSort={sortOption}
                            onSortChange={handleSortChange}
                            viewMode={viewMode}
                            onViewModeChange={handleViewModeChange}
                        />

                        {/* Liste des livres - NOUVEAU COMPOSANT avec son propre loading */}
                        <BooksList
                            searchFilters={searchFilters}
                            selectedDepartments={selectedDepartments}
                            sortOption={sortOption}
                            viewMode={viewMode}
                            onBookReserve={handleBookReserve}
                            onToggleFavorite={handleToggleFavorite}
                            favoriteBooks={favoriteBooks}
                        />
                    </main>
                </div>
            </div>

            {/* Section d'aide */}
            <div className="bg-white border-t border-gray-200 mt-16">
                <div className="container mx-auto px-4 py-12">
                    <div className="text-center">
                        <h3 className="text-2xl font-bold text-gray-800 mb-4">
                            Besoin d'aide pour votre recherche ?
                        </h3>
                        <p className="text-gray-600 mb-8 max-w-2xl mx-auto">
                            Notre équipe de bibliothécaires est là pour vous accompagner dans vos recherches
                            et vous aider à trouver les ressources les plus adaptées à vos besoins.
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <button
                                className="inline-flex cursor-pointer items-center px-8 py-3 rounded-lg text-white font-medium transition-all duration-200 hover:shadow-lg transform hover:scale-[1.02]"
                                style={{ backgroundColor: primaryColor }}
                            >
                                <MessageCircle className='w-5 h-5 mx-2'/>
                                Contacter un bibliothécaire
                            </button>
                            <button
                                className="inline-flex cursor-pointer items-center px-8 py-3 rounded-lg font-medium border-2 transition-all duration-200 hover:shadow-lg transform hover:scale-[1.02]"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                            >
                                <svg className="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                Guide d'utilisation
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <Footer />
        </div>
    );
};

export default BooksPage;
// END OF FILE: src/pages/BooksPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/dashboard/CartPage.tsx

// src/pages/dashboard/CartPage.tsx
import { useState } from 'react';
import { ShoppingCart, Trash2, Plus, Minus, CreditCard, Book, ArrowRight, ChevronLeft } from 'lucide-react';

// Définition des variables de couleur
const COLORS = {
  primary: '#ff8c00',    // Orange
  secondary: '#1b263b',  // Dark Blue
  success: '#10b981',    // Green
  warning: '#f59e0b',    // Amber
  danger: '#ef4444',     // Red
};

// Type pour les items du panier
interface CartItem {
  id: number;
  title: string;
  author: string;
  coverImage: string;
  price: number;
  quantity: number;
  inStock: boolean;
  type: 'physical' | 'digital';
}

// Données des items du panier
const cartItemsData: CartItem[] = [
  {
    id: 1,
    title: 'Le Petit Prince',
    author: 'Antoine de Saint-Exupéry',
    coverImage: '/api/placeholder/200/300',
    price: 15.99,
    quantity: 1,
    inStock: true,
    type: 'physical'
  },
  {
    id: 2,
    title: 'Candide',
    author: 'Voltaire',
    coverImage: '/api/placeholder/200/300',
    price: 12.50,
    quantity: 1,
    inStock: true,
    type: 'physical'
  },
  {
    id: 3,
    title: 'Voyage au centre de la Terre (Édition numérique)',
    author: 'Jules Verne',
    coverImage: '/api/placeholder/200/300',
    price: 8.99,
    quantity: 1,
    inStock: true,
    type: 'digital'
  }
];

// Animation pour les transitions
const fadeTransition = "transition-all duration-300 ease-in-out";

// Composant CartItem pour afficher un livre dans le panier
const CartItemCard = ({ 
  item, 
  onQuantityChange, 
  onRemove 
}: { 
  item: CartItem; 
  onQuantityChange: (id: number, newQuantity: number) => void;
  onRemove: (id: number) => void;
}) => {
  const decreaseQuantity = () => {
    if (item.quantity > 1) {
      onQuantityChange(item.id, item.quantity - 1);
    }
  };

  const increaseQuantity = () => {
    onQuantityChange(item.id, item.quantity + 1);
  };

  return (
    <div className={`bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100 ${fadeTransition} hover:shadow-md`}>
      <div className="flex flex-col md:flex-row">
        {/* Image du livre */}
        <div className="md:w-1/6 p-4 flex items-center justify-center bg-gray-50">
          <div className="w-24 h-36 rounded-md overflow-hidden shadow-sm transform transition-transform duration-300 hover:scale-105">
            <img 
              src={item.coverImage}
              alt={item.title}
              className="w-full h-full object-cover"
            />
          </div>
        </div>
        
        {/* Détails du livre */}
        <div className="md:w-5/6 p-6 flex flex-col md:flex-row md:items-center md:justify-between">
          <div className="flex-1">
            <div className="flex items-start justify-between">
              <div>
                <h3 className="text-lg font-semibold" style={{ color: COLORS.secondary }}>{item.title}</h3>
                <p className="text-gray-600">{item.author}</p>
              </div>
              <div 
                className={`px-2 py-1 rounded-full text-xs font-medium ${
                  item.type === 'digital' 
                    ? 'bg-blue-100 text-blue-600' 
                    : 'bg-orange-100 text-orange-600'
                } ${fadeTransition}`}
              >
                {item.type === 'digital' ? 'Numérique' : 'Physique'}
              </div>
            </div>
            
            <div className="flex items-center mt-2">
              <Book size={16} className="text-gray-400 mr-1" />
              <span className={`text-sm ${item.inStock ? 'text-green-500' : 'text-red-500'}`}>
                {item.inStock ? 'En stock' : 'Rupture de stock'}
              </span>
            </div>
          </div>
          
          {/* Quantité et prix */}
          <div className="flex flex-col md:flex-row md:items-center mt-4 md:mt-0 space-y-4 md:space-y-0 md:space-x-6">
            {/* Contrôles de quantité - seulement pour les livres physiques */}
            {item.type === 'physical' && (
              <div className="flex items-center">
                <button 
                  onClick={decreaseQuantity}
                  disabled={item.quantity <= 1}
                  className={`w-8 h-8 flex items-center justify-center rounded-l-md ${fadeTransition} ${
                    item.quantity <= 1 
                      ? 'bg-gray-100 text-gray-400 cursor-not-allowed' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  <Minus size={16} />
                </button>
                <div className="w-10 h-8 flex items-center justify-center border-t border-b border-gray-200">
                  {item.quantity}
                </div>
                <button 
                  onClick={increaseQuantity}
                  className={`w-8 h-8 flex items-center justify-center rounded-r-md bg-gray-100 text-gray-700 ${fadeTransition} hover:bg-gray-200`}
                >
                  <Plus size={16} />
                </button>
              </div>
            )}
            
            {/* Prix */}
            <div className="text-right md:w-24">
              <p className="text-lg font-bold" style={{ color: COLORS.primary }}>
                {(item.price * item.quantity).toFixed(2)} €
              </p>
              {item.quantity > 1 && (
                <p className="text-xs text-gray-500">
                  {item.price.toFixed(2)} € chacun
                </p>
              )}
            </div>
            
            {/* Bouton supprimer */}
            <button 
              onClick={() => onRemove(item.id)}
              className={`p-2 rounded-full ${fadeTransition} hover:bg-red-50`}
              style={{ color: COLORS.danger }}
            >
              <Trash2 size={18} />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Composant récapitulatif du panier
const CartSummary = ({ 
  items, 
  onCheckout 
}: { 
  items: CartItem[];
  onCheckout: () => void;
}) => {
  // Calculs pour le récapitulatif
  const subtotal = items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const shipping = items.some(item => item.type === 'physical') ? 3.99 : 0;
  const tax = subtotal * 0.2; // TVA 20%
  const total = subtotal + shipping + tax;
  
  const physicalCount = items.filter(item => item.type === 'physical')
    .reduce((sum, item) => sum + item.quantity, 0);
  const digitalCount = items.filter(item => item.type === 'digital').length;

  return (
    <div className={`bg-white rounded-xl shadow-md p-6 sticky top-6 ${fadeTransition}`}>
      <h3 className="text-lg font-bold mb-4" style={{ color: COLORS.secondary }}>Récapitulatif</h3>
      
      <div className="space-y-3">
        <div className="flex justify-between">
          <span className="text-gray-600">Sous-total ({items.length} articles)</span>
          <span className="font-medium">{subtotal.toFixed(2)} €</span>
        </div>
        
        <div className="flex justify-between">
          <span className="text-gray-600">TVA (20%)</span>
          <span className="font-medium">{tax.toFixed(2)} €</span>
        </div>
        
        <div className="flex justify-between">
          <span className="text-gray-600">Frais de livraison</span>
          <span className="font-medium">{shipping.toFixed(2)} €</span>
        </div>
        
        <div className="border-t border-gray-200 pt-3 mt-3">
          <div className="flex justify-between font-bold text-lg">
            <span>Total</span>
            <span style={{ color: COLORS.primary }}>{total.toFixed(2)} €</span>
          </div>
        </div>
      </div>
      
      <button 
        onClick={onCheckout}
        className={`w-full mt-6 px-4 py-3 rounded-lg text-white font-medium flex items-center justify-center ${fadeTransition} transform hover:scale-[1.02] active:scale-[0.98]`}
        style={{ 
          backgroundColor: COLORS.primary,
          boxShadow: `0 4px 14px 0 ${COLORS.primary}30`
        }}
      >
        <CreditCard size={18} className="mr-2" />
        Procéder au paiement
      </button>
      
      <div className="mt-6 space-y-2 text-sm text-gray-500">
        <div className="flex items-start">
          <div className="bg-orange-100 rounded-full p-1 mr-2 mt-0.5">
            <Book size={12} className="text-orange-500" />
          </div>
          <p>
            {physicalCount > 0 
              ? `${physicalCount} livre${physicalCount > 1 ? 's' : ''} physique${physicalCount > 1 ? 's' : ''} à livrer`
              : 'Aucun livre physique'
            }
          </p>
        </div>
        <div className="flex items-start">
          <div className="bg-blue-100 rounded-full p-1 mr-2 mt-0.5">
            <Book size={12} className="text-blue-500" />
          </div>
          <p>
            {digitalCount > 0 
              ? `${digitalCount} livre${digitalCount > 1 ? 's' : ''} numérique${digitalCount > 1 ? 's' : ''} à télécharger`
              : 'Aucun livre numérique'
            }
          </p>
        </div>
      </div>
      
      {/* Badge de sécurité */}
      <div className="mt-8 pt-4 border-t border-gray-100">
        <div className="flex items-center justify-center">
          <div className="bg-green-50 text-green-600 text-xs px-3 py-1 rounded-full flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
            Paiement sécurisé
          </div>
        </div>
      </div>
    </div>
  );
};

// Bouton de suggestion de produit
const SuggestedProductButton = ({ title, price }: { title: string, price: number }) => {
  return (
    <div className={`p-4 border border-gray-100 rounded-lg shadow-sm bg-white flex items-center justify-between ${fadeTransition} hover:shadow-md cursor-pointer`}>
      <div>
        <h4 className="font-medium" style={{ color: COLORS.secondary }}>{title}</h4>
        <p className="text-sm" style={{ color: COLORS.primary }}>{price.toFixed(2)} €</p>
      </div>
      <button 
        className="p-2 rounded-full bg-orange-50 hover:bg-orange-100 transition-colors"
        style={{ color: COLORS.primary }}
      >
        <Plus size={16} />
      </button>
    </div>
  );
};

// Section d'articles suggérés
const SuggestedProducts = () => {
  return (
    <div className="bg-white rounded-xl shadow-md p-6">
      <h3 className="text-lg font-bold mb-4" style={{ color: COLORS.secondary }}>Vous pourriez aimer</h3>
      <div className="space-y-3">
        <SuggestedProductButton title="Les Misérables" price={18.99} />
        <SuggestedProductButton title="Notre-Dame de Paris" price={14.50} />
        <SuggestedProductButton title="L'Étranger (Numérique)" price={7.99} />
      </div>
    </div>
  );
};

// Composant principal de la page du panier
const CartPage = () => {
  const [cartItems, setCartItems] = useState<CartItem[]>(cartItemsData);

  // Gestionnaire de changement de quantité
  const handleQuantityChange = (id: number, newQuantity: number) => {
    setCartItems(items => 
      items.map(item => 
        item.id === id ? { ...item, quantity: newQuantity } : item
      )
    );
  };

  // Gestionnaire de suppression d'un article
  const handleRemoveItem = (id: number) => {
    setCartItems(items => items.filter(item => item.id !== id));
  };

  // Gestionnaire de paiement
  const handleCheckout = () => {
    alert('Redirection vers la page de paiement...');
    // Logique de redirection vers la page de paiement
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="container mx-auto px-4">
        <div className="space-y-8">
          {/* Navigation secondaire */}
          <nav className="flex items-center text-sm mb-8">
            <a 
              href="/" 
              className="text-gray-500 hover:text-gray-700 flex items-center"
            >
              Accueil
            </a>
            <span className="mx-2 text-gray-400">/</span>
            <a 
              href="/catalogue" 
              className="text-gray-500 hover:text-gray-700"
            >
              Catalogue
            </a>
            <span className="mx-2 text-gray-400">/</span>
            <span style={{ color: COLORS.primary }}>Panier</span>
          </nav>
          
          {/* En-tête */}
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold" style={{ color: COLORS.secondary }}>Mon Panier</h1>
              <p className="text-gray-500">
                {cartItems.length > 0 
                  ? `${cartItems.length} article${cartItems.length > 1 ? 's' : ''} dans votre panier`
                  : 'Votre panier est vide'
                }
              </p>
            </div>
            
            <a 
              href="/catalogue" 
              className={`flex items-center px-4 py-2 rounded-lg border border-blue-100 bg-blue-50 ${fadeTransition} hover:bg-blue-100`}
              style={{ color: COLORS.secondary }}
            >
              <ChevronLeft size={16} className="mr-1" />
              Continuer mes achats
            </a>
          </div>
          
          {/* Contenu principal */}
          {cartItems.length > 0 ? (
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Liste des articles */}
              <div className="lg:col-span-2 space-y-4">
                {cartItems.map(item => (
                  <CartItemCard 
                    key={item.id} 
                    item={item} 
                    onQuantityChange={handleQuantityChange}
                    onRemove={handleRemoveItem}
                  />
                ))}
                
                {/* Section suggestions */}
                <div className="mt-8">
                  <h3 className="text-xl font-bold mb-4" style={{ color: COLORS.secondary }}>Recommandations</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <SuggestedProductButton title="Les Misérables" price={18.99} />
                    <SuggestedProductButton title="Notre-Dame de Paris" price={14.50} />
                  </div>
                </div>
              </div>
              
              {/* Bloc latéral */}
              <div className="lg:col-span-1 space-y-6">
                {/* Résumé du panier */}
                <CartSummary items={cartItems} onCheckout={handleCheckout} />
                
                {/* Code promo */}
                <div className="bg-white rounded-xl shadow-md p-6">
                  <h3 className="text-lg font-bold mb-3" style={{ color: COLORS.secondary }}>Code promo</h3>
                  <div className="flex">
                    <input 
                      type="text" 
                      placeholder="Entrez votre code"
                      className="flex-1 p-2 border border-gray-200 rounded-l-md focus:outline-none focus:border-orange-300"
                    />
                    <button 
                      className="px-4 py-2 rounded-r-md text-white"
                      style={{ backgroundColor: COLORS.secondary }}
                    >
                      Appliquer
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ) : (
            <div className={`bg-white rounded-xl shadow-md p-10 text-center ${fadeTransition}`}>
              <div className="mx-auto w-24 h-24 bg-orange-100 rounded-full flex items-center justify-center mb-6">
                <ShoppingCart size={36} style={{ color: COLORS.primary }} />
              </div>
              <h2 className="text-2xl font-bold mb-3" style={{ color: COLORS.secondary }}>Votre panier est vide</h2>
              <p className="text-gray-600 mb-6">
                Explorez notre catalogue pour découvrir nos livres et ajouter des articles à votre panier.
              </p>
              <a 
                href="/catalogue"
                className={`inline-flex items-center px-6 py-3 rounded-lg text-white font-medium ${fadeTransition} hover:shadow-lg`}
                style={{ backgroundColor: COLORS.primary }}
              >
                <Book size={18} className="mr-2" />
                Découvrir notre catalogue
              </a>
            </div>
          )}
          
          {/* Section d'aide */}
          <div className="mt-12 p-6 bg-gray-50 border border-gray-100 rounded-xl">
            <h3 className="text-lg font-semibold mb-4" style={{ color: COLORS.secondary }}>Besoin d'aide ?</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="flex items-start">
                <div className="mr-3 p-2 rounded-full" style={{ backgroundColor: COLORS.primary + '20' }}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" style={{ color: COLORS.primary }} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                  </svg>
                </div>
                <div>
                  <h4 className="font-semibold" style={{ color: COLORS.secondary }}>Diversité et disponibilité</h4>
                  <p className="text-sm text-gray-600">Une panoplie de livres et de memeores disponibles</p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="mr-3 p-2 rounded-full" style={{ backgroundColor: COLORS.primary + '20' }}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" style={{ color: COLORS.primary }} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                </div>
                <div>
                  <h4 className="font-semibold" style={{ color: COLORS.secondary }}>Recommandations</h4>
                  <p className="text-sm text-gray-600">Basées sur la popularité, sur vos lectures et votre entourage</p>
                </div>
              </div>
              <div className="flex items-start">
                <div className="mr-3 p-2 rounded-full" style={{ backgroundColor: COLORS.primary + '20' }}>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" style={{ color: COLORS.primary }} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div>
                  <h4 className="font-semibold" style={{ color: COLORS.secondary }}>Support</h4>
                  <p className="text-sm text-gray-600">Assistance client disponible 7j/7</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CartPage;// END OF FILE: src/pages/dashboard/CartPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/dashboard/Profile.tsx

import React, { useState } from 'react';

const Profile = () => {
  // État pour gérer les différents onglets
  const [activeTab, setActiveTab] = useState('personal');
  
  // Couleurs du thème
  const primaryColor = "#ff8c00";
  const secondaryColor = "#1b263b";
  
  return (
    <div className="bg-gray-50 min-h-screen py-8 px-4">
      <div className="max-w-6xl mx-auto bg-white rounded-xl shadow-lg overflow-hidden">
        {/* En-tête du profil avec photo */}
        <div style={{ backgroundColor: secondaryColor }} className="px-8 py-12 text-white">
          <div className="flex flex-col md:flex-row items-center">
            <div className="relative mb-6 md:mb-0">
              <div className="w-36 h-36 rounded-full bg-white p-1 shadow-lg">
                <div 
                  className="w-full h-full rounded-full flex items-center justify-center"
                  style={{ backgroundColor: primaryColor }}
                >
                  <span className="text-5xl font-bold text-white">BBD</span>
                </div>
              </div>
              <button 
                className="absolute bottom-0 right-0 rounded-full p-2"
                style={{ backgroundColor: primaryColor }}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </button>
            </div>
            <div className="md:ml-8 text-center md:text-left">
              <h1 className="text-3xl font-bold">BornBeforeDesign</h1>
              <p className="text-gray-300 mt-1">Membre depuis 2023</p>
              <div className="mt-4 inline-flex items-center px-4 py-1 rounded-full bg-opacity-20 bg-white">
                <div className="w-2 h-2 rounded-full bg-green-400 mr-2"></div>
                <span className='text-black'>En ligne</span>
              </div>
            </div>
          </div>
        </div>
        
        {/* Navigation entre les sections */}
        <div className="px-6 border-b">
          <div className="flex overflow-x-auto">
            <button 
              onClick={() => setActiveTab('personal')}
              className={`py-4 px-6 font-medium transition-colors duration-200 whitespace-nowrap ${
                activeTab === 'personal' 
                  ? 'border-b-2 text-gray-800' 
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              style={activeTab === 'personal' ? { borderColor: primaryColor } : {}}
            >
              Informations personnelles
            </button>
            <button 
              onClick={() => setActiveTab('preferences')}
              className={`py-4 px-6 font-medium transition-colors duration-200 whitespace-nowrap ${
                activeTab === 'preferences' 
                  ? 'border-b-2 text-gray-800' 
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              style={activeTab === 'preferences' ? { borderColor: primaryColor } : {}}
            >
              Préférences
            </button>
            <button 
              onClick={() => setActiveTab('security')}
              className={`py-4 px-6 font-medium transition-colors duration-200 whitespace-nowrap ${
                activeTab === 'security' 
                  ? 'border-b-2 text-gray-800' 
                  : 'text-gray-500 hover:text-gray-700'
              }`}
              style={activeTab === 'security' ? { borderColor: primaryColor } : {}}
            >
              Confidentialité et sécurité
            </button>
          </div>
        </div>
        
        {/* Contenu des onglets */}
        <div className="p-8">
          {/* Informations personnelles */}
          {activeTab === 'personal' && (
            <div className="animate-fadeIn">
              <h2 className="text-xl font-semibold mb-6" style={{ color: secondaryColor }}>
                Informations personnelles
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Prénom
                  </label>
                  <input 
                    type="text" 
                    value="Jean" 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                    style={{ focusRing: primaryColor }}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Nom
                  </label>
                  <input 
                    type="text" 
                    value="Dupont" 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Email
                  </label>
                  <input 
                    type="email" 
                    value="jean.dupont@example.com" 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Téléphone
                  </label>
                  <input 
                    type="tel" 
                    value="06 12 34 56 78" 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                  />
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Adresse
                  </label>
                  <input 
                    type="text" 
                    value="123 Rue de la Bibliothèque" 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                  />
                </div>
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Bio
                  </label>
                  <textarea 
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition h-32"
                    placeholder="Parlez-nous de vous..."
                  ></textarea>
                </div>
              </div>
              
              <div className="mt-8 flex justify-end">
                <button 
                  className="px-6 py-3 rounded-lg text-white font-medium shadow-lg hover:shadow-xl transition-all"
                  style={{ backgroundColor: primaryColor }}
                >
                  Enregistrer les modifications
                </button>
              </div>
            </div>
          )}
          
          {/* Préférences */}
          {activeTab === 'preferences' && (
            <div className="animate-fadeIn">
              <h2 className="text-xl font-semibold mb-6" style={{ color: secondaryColor }}>
                Préférences
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <h3 className="text-lg font-medium mb-4" style={{ color: secondaryColor }}>Langue et région</h3>
                  
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Langue
                    </label>
                    <select className="w-full p-3 border border-gray-300 rounded-lg bg-white">
                      <option>Français</option>
                      <option>English</option>
                      <option>Español</option>
                      <option>Deutsch</option>
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Format de date
                    </label>
                    <select className="w-full p-3 border border-gray-300 rounded-lg bg-white">
                      <option>JJ/MM/AAAA</option>
                      <option>MM/JJ/AAAA</option>
                      <option>AAAA-MM-JJ</option>
                    </select>
                  </div>
                </div>
                
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <h3 className="text-lg font-medium mb-4" style={{ color: secondaryColor }}>Thème</h3>
                  
                  <div className="space-y-4">
                    <div className="flex items-center">
                      <input type="radio" id="theme-light" name="theme" className="h-4 w-4" checked />
                      <label htmlFor="theme-light" className="ml-2">Clair</label>
                    </div>
                    <div className="flex items-center">
                      <input type="radio" id="theme-dark" name="theme" className="h-4 w-4" />
                      <label htmlFor="theme-dark" className="ml-2">Sombre</label>
                    </div>
                    <div className="flex items-center">
                      <input type="radio" id="theme-system" name="theme" className="h-4 w-4" />
                      <label htmlFor="theme-system" className="ml-2">Système</label>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200 md:col-span-2">
                  <h3 className="text-lg font-medium mb-4" style={{ color: secondaryColor }}>Notifications</h3>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">Notifications par email</h4>
                        <p className="text-sm text-gray-500">Recevoir des mises à jour par email</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" checked className="sr-only peer" />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-500"></div>
                      </label>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">Notifications par SMS</h4>
                        <p className="text-sm text-gray-500">Recevoir des alertes par SMS</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" className="sr-only peer" />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-500"></div>
                      </label>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">Newsletter</h4>
                        <p className="text-sm text-gray-500">S'abonner à notre newsletter mensuelle</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" checked className="sr-only peer" />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-500"></div>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-8 flex justify-end">
                <button 
                  className="px-6 py-3 rounded-lg text-white font-medium shadow-lg hover:shadow-xl transition-all"
                  style={{ backgroundColor: primaryColor }}
                >
                  Enregistrer les préférences
                </button>
              </div>
            </div>
          )}
          
          {/* Confidentialité et sécurité */}
          {activeTab === 'security' && (
            <div className="animate-fadeIn">
              <h2 className="text-xl font-semibold mb-6" style={{ color: secondaryColor }}>
                Confidentialité et sécurité
              </h2>
              
              <div className="space-y-8">
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <h3 className="text-lg font-medium mb-4" style={{ color: secondaryColor }}>Mot de passe</h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Mot de passe actuel
                      </label>
                      <input 
                        type="password" 
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                        placeholder="••••••••"
                      />
                    </div>
                    <div></div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Nouveau mot de passe
                      </label>
                      <input 
                        type="password" 
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                        placeholder="••••••••"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Confirmer le mot de passe
                      </label>
                      <input 
                        type="password" 
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:outline-none transition"
                        placeholder="••••••••"
                      />
                    </div>
                  </div>
                  
                  <div className="mt-4">
                    <button 
                      className="px-4 py-2 rounded-lg text-white font-medium"
                      style={{ backgroundColor: primaryColor }}
                    >
                      Mettre à jour le mot de passe
                    </button>
                  </div>
                </div>
                
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <h3 className="text-lg font-medium mb-4" style={{ color: secondaryColor }}>Authentification à deux facteurs</h3>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="mb-1">Statut: <span className="text-red-500 font-medium">Désactivé</span></p>
                      <p className="text-sm text-gray-500">Protégez votre compte avec une couche de sécurité supplémentaire</p>
                    </div>
                    <button 
                      className="px-4 py-2 rounded-lg text-white font-medium"
                      style={{ backgroundColor: secondaryColor }}
                    >
                      Activer
                    </button>
                  </div>
                </div>
                
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <h3 className="text-lg font-medium mb-4" style={{ color: secondaryColor }}>Confidentialité du profil</h3>
                  
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">Profil public</h4>
                        <p className="text-sm text-gray-500">Permettre aux autres utilisateurs de voir votre profil</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" checked className="sr-only peer" />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-500"></div>
                      </label>
                    </div>
                    
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium">Afficher l'activité</h4>
                        <p className="text-sm text-gray-500">Montrer votre activité aux autres utilisateurs</p>
                      </div>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input type="checkbox" className="sr-only peer" />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 rounded-full peer peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-500"></div>
                      </label>
                    </div>
                  </div>
                </div>
                
                <div className="bg-gray-50 p-6 rounded-xl border border-gray-200">
                  <h3 className="text-lg font-medium mb-4 text-red-500">Zone de danger</h3>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="font-medium">Supprimer mon compte</h4>
                      <p className="text-sm text-gray-500">Cette action est irréversible et supprimera toutes vos données</p>
                    </div>
                    <button className="px-4 py-2 rounded-lg text-white font-medium bg-red-500">
                      Supprimer
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Profile;// END OF FILE: src/pages/dashboard/Profile.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/dashboard/ReservationsPage.tsx

// src/pages/dashboard/ReservationsPage.tsx
import { useState } from 'react';
import { Search, Filter, Calendar, Clock, Check, X, ChevronLeft, ChevronRight } from 'lucide-react';

// Définition des variables de couleur
const COLORS = {
  primary: '#ff8c00',    // Orange
  secondary: '#1b263b',  // Dark Blue
  success: '#10b981',    // Green
  warning: '#f59e0b',    // Amber
  danger: '#ef4444',     // Red
  pending: '#3b82f6',    // Blue
};

// Types pour les réservations
type ReservationStatus = 'en_cours' | 'terminée' | 'annulée' | 'en_attente';

interface Reservation {
  id: number;
  title: string;
  author: string;
  coverImage: string;
  status: ReservationStatus;
  startDate: string;
  endDate: string;
  location: string;
}

// Données des réservations
const reservationsData: Reservation[] = [
  {
    id: 1,
    title: 'Les Misérables',
    author: 'Victor Hugo',
    coverImage: '/api/placeholder/200/300',
    status: 'en_cours',
    startDate: '2025-04-01',
    endDate: '2025-04-15',
    location: 'Bibliothèque centrale - Étage 2'
  },
  {
    id: 2,
    title: 'Le Comte de Monte-Cristo',
    author: 'Alexandre Dumas',
    coverImage: '/api/placeholder/200/300',
    status: 'en_attente',
    startDate: '2025-04-10',
    endDate: '2025-04-24',
    location: 'Bibliothèque annexe - Section Romans'
  },
  {
    id: 3,
    title: 'Le Petit Prince',
    author: 'Antoine de Saint-Exupéry',
    coverImage: '/api/placeholder/200/300',
    status: 'terminée',
    startDate: '2025-03-15',
    endDate: '2025-03-29',
    location: 'Bibliothèque centrale - Section Jeunesse'
  },
  {
    id: 4,
    title: 'L\'Étranger',
    author: 'Albert Camus',
    coverImage: '/api/placeholder/200/300',
    status: 'annulée',
    startDate: '2025-03-20',
    endDate: '2025-04-03',
    location: 'Bibliothèque centrale - Étage 1'
  },
  {
    id: 5,
    title: 'Germinal',
    author: 'Émile Zola',
    coverImage: '/api/placeholder/200/300',
    status: 'en_cours',
    startDate: '2025-04-05',
    endDate: '2025-04-19',
    location: 'Bibliothèque annexe - Section Classiques'
  },
];

// Composant de carte de réservation
const ReservationCard = ({ reservation }: { reservation: Reservation }) => {
  // Fonction pour obtenir la couleur du statut
  const getStatusColor = (status: ReservationStatus) => {
    switch (status) {
      case 'en_cours': return COLORS.primary;
      case 'terminée': return COLORS.success;
      case 'annulée': return COLORS.danger;
      case 'en_attente': return COLORS.pending;
      default: return COLORS.warning;
    }
  };

  // Fonction pour obtenir le libellé du statut
  const getStatusLabel = (status: ReservationStatus) => {
    switch (status) {
      case 'en_cours': return 'En cours';
      case 'terminée': return 'Terminée';
      case 'annulée': return 'Annulée';
      case 'en_attente': return 'En attente';
      default: return status;
    }
  };

  // Calcul du temps restant
  const calculateTimeLeft = (endDate: string) => {
    const end = new Date(endDate);
    const now = new Date();
    const diff = end.getTime() - now.getTime();
    const days = Math.ceil(diff / (1000 * 60 * 60 * 24));
    
    if (days < 0) return 'Dépassé';
    if (days === 0) return 'Dernier jour';
    return `${days} jour${days > 1 ? 's' : ''} restant${days > 1 ? 's' : ''}`;
  };

  return (
    <div className="bg-white rounded-xl shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1">
      <div className="flex flex-col md:flex-row">
        {/* Couverture du livre */}
        <div className="md:w-1/4 p-4 flex items-center justify-center bg-gray-50">
          <div className="w-32 h-48 rounded-md overflow-hidden shadow-md">
            <img 
              src={reservation.coverImage}
              alt={reservation.title}
              className="w-full h-full object-cover"
            />
          </div>
        </div>
        
        {/* Informations de la réservation */}
        <div className="md:w-3/4 p-6">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-xl font-bold text-gray-800">{reservation.title}</h3>
              <p className="text-gray-600">{reservation.author}</p>
            </div>
            <div 
              className="px-3 py-1 rounded-full text-sm font-medium"
              style={{
                backgroundColor: `${getStatusColor(reservation.status)}15`,
                color: getStatusColor(reservation.status)
              }}
            >
              {getStatusLabel(reservation.status)}
            </div>
          </div>
          
          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center">
              <Calendar size={18} className="mr-2 text-gray-500" />
              <div>
                <p className="text-xs text-gray-500">Période de réservation</p>
                <p className="text-sm">
                  {new Date(reservation.startDate).toLocaleDateString('fr-FR')} - {new Date(reservation.endDate).toLocaleDateString('fr-FR')}
                </p>
              </div>
            </div>
            
            <div className="flex items-center">
              <Clock size={18} className="mr-2 text-gray-500" />
              <div>
                <p className="text-xs text-gray-500">Statut</p>
                <p className="text-sm font-medium" style={{ color: getStatusColor(reservation.status) }}>
                  {reservation.status === 'en_cours' && calculateTimeLeft(reservation.endDate)}
                  {reservation.status === 'en_attente' && 'En attente de confirmation'}
                  {reservation.status === 'terminée' && 'Livre retourné'}
                  {reservation.status === 'annulée' && 'Réservation annulée'}
                </p>
              </div>
            </div>
          </div>
          
          <div className="mt-4">
            <p className="text-xs text-gray-500">Emplacement</p>
            <p className="text-sm">{reservation.location}</p>
          </div>
          
          <div className="mt-6 flex space-x-3">
            {reservation.status === 'en_cours' && (
              <button 
                className="px-4 py-2 rounded-lg flex items-center transition-colors"
                style={{ 
                  backgroundColor: `${COLORS.success}15`,
                  color: COLORS.success
                }}
              >
                <Check size={16} className="mr-2" />
                Prolonger
              </button>
            )}
            
            {reservation.status === 'en_attente' && (
              <button 
                className="px-4 py-2 rounded-lg flex items-center transition-colors"
                style={{ 
                  backgroundColor: `${COLORS.danger}15`,
                  color: COLORS.danger
                }}
              >
                <X size={16} className="mr-2" />
                Annuler
              </button>
            )}
            
            <button 
              className="px-4 py-2 rounded-lg flex items-center transition-colors"
              style={{ 
                backgroundColor: `${COLORS.secondary}15`,
                color: COLORS.secondary
              }}
            >
              Détails
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Composant principal de la page des réservations
const ReservationsPage = () => {
  const [activeFilter, setActiveFilter] = useState<ReservationStatus | 'toutes'>('toutes');
  const [searchQuery, setSearchQuery] = useState('');
  
  // Filtrage des réservations
  const filteredReservations = reservationsData.filter(reservation => {
    const matchesFilter = activeFilter === 'toutes' || reservation.status === activeFilter;
    const matchesSearch = reservation.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          reservation.author.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesFilter && matchesSearch;
  });

  return (
    <div className="space-y-8">
      {/* En-tête */}
      <div>
        <h1 className="text-2xl font-bold text-gray-800">Mes Réservations</h1>
        <p className="text-gray-500">Gérez vos emprunts et réservations de livres</p>
      </div>
      
      {/* Barre de recherche et filtres */}
      <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
        <div className="relative flex-1 max-w-md">
          <Search size={18} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
          <input 
            type="text" 
            placeholder="Rechercher un livre..." 
            className="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
          />
        </div>
        
        <div className="flex items-center overflow-x-auto space-x-2 py-1">
          <span className="flex items-center text-gray-500 mr-2">
            <Filter size={16} className="mr-1" /> Filtrer:
          </span>
          
          <button 
            className={`px-3 py-1 rounded-lg text-sm whitespace-nowrap transition-colors ${
              activeFilter === 'toutes' 
                ? 'bg-gray-800 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            onClick={() => setActiveFilter('toutes')}
          >
            Toutes
          </button>
          
          <button 
            className={`px-3 py-1 rounded-lg text-sm whitespace-nowrap transition-colors ${
              activeFilter === 'en_cours' 
                ? `bg-${COLORS.primary} text-white` 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={activeFilter === 'en_cours' ? { backgroundColor: COLORS.primary } : {}}
            onClick={() => setActiveFilter('en_cours')}
          >
            En cours
          </button>
          
          <button 
            className={`px-3 py-1 rounded-lg text-sm whitespace-nowrap transition-colors ${
              activeFilter === 'en_attente' 
                ? 'bg-blue-500 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={activeFilter === 'en_attente' ? { backgroundColor: COLORS.pending } : {}}
            onClick={() => setActiveFilter('en_attente')}
          >
            En attente
          </button>
          
          <button 
            className={`px-3 py-1 rounded-lg text-sm whitespace-nowrap transition-colors ${
              activeFilter === 'terminée' 
                ? 'bg-green-500 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={activeFilter === 'terminée' ? { backgroundColor: COLORS.success } : {}}
            onClick={() => setActiveFilter('terminée')}
          >
            Terminées
          </button>
          
          <button 
            className={`px-3 py-1 rounded-lg text-sm whitespace-nowrap transition-colors ${
              activeFilter === 'annulée' 
                ? 'bg-red-500 text-white' 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
            style={activeFilter === 'annulée' ? { backgroundColor: COLORS.danger } : {}}
            onClick={() => setActiveFilter('annulée')}
          >
            Annulées
          </button>
        </div>
      </div>
      
      {/* Liste des réservations */}
      <div className="space-y-6">
        {filteredReservations.length > 0 ? (
          filteredReservations.map(reservation => (
            <ReservationCard key={reservation.id} reservation={reservation} />
          ))
        ) : (
          <div className="text-center py-12 bg-white rounded-xl shadow-sm">
            <div className="mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
              <Calendar size={24} className="text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-800">Aucune réservation trouvée</h3>
            <p className="text-gray-500 mt-2">
              {searchQuery 
                ? "Aucun résultat ne correspond à votre recherche." 
                : activeFilter !== 'toutes' 
                  ? `Vous n'avez pas de réservation ${getFilterLabel(activeFilter)}.`
                  : "Vous n'avez pas encore réservé de livre."
              }
            </p>
          </div>
        )}
      </div>
      
      {/* Pagination */}
      {filteredReservations.length > 0 && (
        <div className="flex justify-center mt-8">
          <div className="flex items-center space-x-2">
            <button className="p-2 rounded-lg border border-gray-200 text-gray-500 hover:bg-gray-100">
              <ChevronLeft size={18} />
            </button>
            <button className="w-10 h-10 flex items-center justify-center rounded-lg bg-orange-100 text-orange-600 font-medium">
              1
            </button>
            <button className="w-10 h-10 flex items-center justify-center rounded-lg hover:bg-gray-100 text-gray-700">
              2
            </button>
            <button className="w-10 h-10 flex items-center justify-center rounded-lg hover:bg-gray-100 text-gray-700">
              3
            </button>
            <span className="px-2 text-gray-500">...</span>
            <button className="w-10 h-10 flex items-center justify-center rounded-lg hover:bg-gray-100 text-gray-700">
              8
            </button>
            <button className="p-2 rounded-lg border border-gray-200 text-gray-500 hover:bg-gray-100">
              <ChevronRight size={18} />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Fonction utilitaire pour les libellés des filtres
const getFilterLabel = (filter: ReservationStatus | 'toutes') => {
  switch (filter) {
    case 'en_cours': return 'en cours';
    case 'terminée': return 'terminée';
    case 'annulée': return 'annulée';
    case 'en_attente': return 'en attente';
    case 'toutes': return 'toutes';
    default: return filter;
  }
};

export default ReservationsPage;// END OF FILE: src/pages/dashboard/ReservationsPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/dashboard/StatisticsPage.tsx

import { useState } from 'react';
import { BarChart4, DollarSign, TrendingUp, TrendingDown, Users, Percent, ArrowRight } from 'lucide-react';

// Définition des variables de couleur
const COLORS = {
  primary: '#ff8c00',    // Orange
  secondary: '#1b263b',  // Dark Blue
  lightGray: '#f8f9fa',
  accent: '#4ade80',     // Green
  danger: '#ef4444',     // Red
};

// Données pour le graphique
const chartData = [
  { day: '01', value: 120 },
  { day: '02', value: 150 },
  { day: '03', value: 180 },
  { day: '04', value: 135 },
  { day: '05', value: 160 },
  { day: '06', value: 190 },
  { day: '07', value: 210 },
  { day: '08', value: 180 },
  { day: '09', value: 150 },
  { day: '10', value: 170 },
  { day: '11', value: 140 },
  { day: '12', value: 120 },
  { day: '13', value: 110 },
  { day: '14', value: 130 },
  { day: '15', value: 145 },
  { day: '16', value: 135 },
  { day: '17', value: 155 },
  { day: '18', value: 175 },
  { day: '19', value: 165 },
  { day: '20', value: 185 },
  { day: '21', value: 200 },
  { day: '22', value: 220 },
  { day: '23', value: 240 },
  { day: '24', value: 255 },
  { day: '25', value: 270 },
];

// Données pour la section des transactions
const transactions = [
  { 
    id: 1, 
    title: 'Roman historique',
    category: 'Livre',
    time: '15:30',
    date: 'Aujourd\'hui',
    amount: '-25.00',
    color: '#3b82f6', // Blue
    icon: '📚'
  },
  { 
    id: 2, 
    title: 'Abonnement Premium',
    category: 'Service',
    time: '12:45',
    date: 'Aujourd\'hui',
    amount: '-15.99',
    color: '#8b5cf6', // Purple
    icon: '⭐'
  },
  { 
    id: 3, 
    title: 'Manga - Tome 5',
    category: 'BD/Manga',
    time: '10:15',
    date: 'Aujourd\'hui',
    amount: '-12.50',
    color: '#ec4899', // Pink
    icon: '🗯️'
  },
  { 
    id: 4, 
    title: 'Remboursement',
    category: 'Retour',
    time: '09:30',
    date: 'Hier',
    amount: '+35.00',
    color: '#10b981', // Green
    icon: '💰'
  },
];

// Données pour les statistiques d'utilisation
const usageStats = [
  { 
    title: 'Romans',
    percentage: 65,
    value: '652.400',
    color: '#3b82f6', // Blue
  },
  { 
    title: 'Sciences',
    percentage: 45,
    value: '478.200',
    color: '#8b5cf6', // Purple
  },
  { 
    title: 'BD/Manga',
    percentage: 80,
    value: '892.500',
    color: '#ec4899', // Pink
  },
  { 
    title: 'Revues',
    percentage: 30,
    value: '324.700',
    color: '#10b981', // Green
  },
  { 
    title: 'Numérique',
    percentage: 55,
    value: '556.000',
    color: '#f59e0b', // Amber
  },
];

// Section de carte statistique
interface StatCardProps {
  title: string;
  value: string;
  percentChange: number;
  icon: React.ReactNode;
  color: string;
}

const StatCard = ({ title, value, percentChange, icon, color }: StatCardProps) => {
  const isPositive = percentChange >= 0;

  return (
    <div className="bg-white rounded-xl shadow-md p-6 flex flex-col transition-transform duration-300 hover:shadow-lg hover:-translate-y-1">
      <div className="flex items-center justify-between mb-4">
        <div 
          className="w-12 h-12 rounded-lg flex items-center justify-center" 
          style={{ backgroundColor: `${color}20` }}
        >
          <div style={{ color }}>{icon}</div>
        </div>
        <span 
          className={`flex items-center text-sm font-medium ${
            isPositive ? 'text-green-500' : 'text-red-500'
          }`}
        >
          {isPositive ? <TrendingUp size={16} className="mr-1" /> : <TrendingDown size={16} className="mr-1" />}
          {isPositive ? '+' : ''}{percentChange}%
        </span>
      </div>
      <div className="mt-2">
        <h3 className="text-sm text-gray-500 font-medium">{title}</h3>
        <p className="text-2xl font-bold mt-1">{value}</p>
      </div>
    </div>
  );
};

const StatisticsPage = () => {
  // États pour les filtres de période
  const [period, setPeriod] = useState<'day' | 'week' | 'month' | 'year'>('month');

  // Maximun du graphique
  const maxValue = Math.max(...chartData.map(item => item.value));

  return (
    <div className="space-y-8">
      {/* En-tête */}
      <div className="flex flex-col md:flex-row md:items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-800">Tableau de bord</h1>
          <p className="text-gray-500">01 - 25 Avril, 2025</p>
        </div>
        <div className="flex space-x-2 mt-4 md:mt-0">
          <button 
            className={`px-4 py-2 rounded-lg transition-all ${
              period === 'day' 
                ? 'bg-orange-100 text-orange-600' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setPeriod('day')}
          >
            Jour
          </button>
          <button 
            className={`px-4 py-2 rounded-lg transition-all ${
              period === 'week' 
                ? 'bg-orange-100 text-orange-600' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setPeriod('week')}
          >
            Semaine
          </button>
          <button 
            className={`px-4 py-2 rounded-lg transition-all ${
              period === 'month' 
                ? 'bg-orange-100 text-orange-600' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setPeriod('month')}
          >
            Mois
          </button>
          <button 
            className={`px-4 py-2 rounded-lg transition-all ${
              period === 'year' 
                ? 'bg-orange-100 text-orange-600' 
                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
            }`}
            onClick={() => setPeriod('year')}
          >
            Année
          </button>
        </div>
      </div>

      {/* Cartes statistiques */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard 
          title="Livres empruntés"
          value="256"
          percentChange={12.8}
          icon={<BarChart4 size={24} />}
          color={COLORS.primary}
        />
        <StatCard 
          title="Total dépensé"
          value="185,20 €"
          percentChange={-4.3}
          icon={<DollarSign size={24} />}
          color="#8b5cf6"
        />
        <StatCard 
          title="Livres en retard"
          value="3"
          percentChange={0}
          icon={<Percent size={24} />}
          color="#ef4444"
        />
        <StatCard 
          title="Recommandations"
          value="28"
          percentChange={32.5}
          icon={<Users size={24} />}
          color="#10b981"
        />
      </div>

      {/* Section principale avec graphique et transactions */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Graphique d'activité */}
        <div className="lg:col-span-2 bg-white rounded-xl shadow-md p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold text-gray-800">Activité</h2>
            <div className="flex items-center text-sm text-gray-500">
              <span className="inline-block w-3 h-3 rounded-full bg-blue-400 mr-2"></span>
              Emprunts
            </div>
          </div>
          
          {/* Graphique en barres */}
          <div className="h-64 flex items-end space-x-2">
            {chartData.map((data, index) => (
              <div 
                key={data.day} 
                className="flex-1 flex flex-col items-center justify-end"
              >
                <div 
                  className="w-full max-w-full rounded-t-md transition-all duration-300 hover:opacity-80"
                  style={{ 
                    height: `${(data.value / maxValue) * 100}%`, 
                    backgroundColor: index === chartData.length - 1 ? COLORS.primary : '#e2e8f0',
                    minHeight: '4px'
                  }}
                ></div>
                <span className="text-xs text-gray-500 mt-1">{data.day}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Transactions récentes */}
        <div className="bg-white rounded-xl shadow-md p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold text-gray-800">Transactions récentes</h2>
            <button className="text-sm text-blue-500 flex items-center">
              Voir tout <ArrowRight size={16} className="ml-1" />
            </button>
          </div>

          <div className="space-y-4">
            {transactions.map((transaction) => (
              <div key={transaction.id} className="flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg transition-colors">
                <div className="flex items-center">
                  <div 
                    className="w-10 h-10 rounded-full flex items-center justify-center mr-3"
                    style={{ backgroundColor: `${transaction.color}15` }}
                  >
                    <span className="text-lg">{transaction.icon}</span>
                  </div>
                  <div>
                    <h4 className="font-medium">{transaction.title}</h4>
                    <p className="text-sm text-gray-500">{transaction.category}</p>
                  </div>
                </div>
                <div className="text-right">
                  <p className={transaction.amount.startsWith('-') ? 'text-gray-800' : 'text-green-500'}>
                    {transaction.amount} €
                  </p>
                  <p className="text-xs text-gray-500">{transaction.time} • {transaction.date}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Section statistiques d'utilisation */}
      <div className="bg-white rounded-xl shadow-md p-6">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold text-gray-800">Catégories populaires</h2>
          <div className="text-sm text-gray-500">Ce mois-ci</div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8">
          {usageStats.map((stat, index) => (
            <div key={index} className="flex flex-col">
              <div className="flex justify-between mb-2">
                <span className="font-medium">{stat.title}</span>
                <span className="text-gray-500">{stat.percentage}%</span>
              </div>
              <div className="h-2 bg-gray-200 rounded-full mb-2">
                <div 
                  className="h-full rounded-full"
                  style={{ 
                    width: `${stat.percentage}%`,
                    backgroundColor: stat.color
                  }}
                ></div>
              </div>
              <span className="text-sm text-gray-500">{stat.value}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default StatisticsPage;// END OF FILE: src/pages/dashboard/StatisticsPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/HomePage.tsx

import React from 'react';
import { useConfig } from '../contexts/ConfigContext';
import LoadingSpinner from '../components/common/LoadingSpinner';

import ResourcesSection from '../components/home/ResourcesSection.tsx';
import Statistics from '../components/home/Statistics.tsx';
import OnlineLearningSection from '../components/home/OnlineLearningSection.tsx';
import Hero from "../components/home/Hero.tsx";
import LibrarySchedule from "../components/home/LibrarySchedule.tsx";

const HomePage: React.FC = () => {
    const { isLoading } = useConfig();

    // Affichage du loader global pendant le chargement des configurations
    if (isLoading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <LoadingSpinner
                    size="xl"
                    text="Chargement de la bibliothèque..."
                    fullScreen
                />
            </div>
        );
    }

    return (
        <>
            <div className="flex flex-col min-h-screen">
                <main className="flex-grow">
                    <Hero/>

                    <ResourcesSection />

                    <LibrarySchedule/>

                    <OnlineLearningSection />

                    <Statistics />
                </main>
            </div>

            {/* Styles globaux pour les animations et patterns */}
            <style type="text/css">{`
                @keyframes float {
                    0% { transform: translateY(0px); }
                    50% { transform: translateY(-10px); }
                    100% { transform: translateY(0px); }
                }

                .animate-float {
                    animation: float 6s ease-in-out infinite;
                }

                .scrollbar-hide {
                    -ms-overflow-style: none;
                    scrollbar-width: none;
                }

                .scrollbar-hide::-webkit-scrollbar {
                    display: none;
                }

                .bg-pattern {
                    background-image: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23000000' fill-opacity='0.05'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
                }

                .bg-grid-pattern {
                    background-image: url("data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23000000' fill-opacity='0.05' fill-rule='evenodd'%3E%3Cpath d='M0 38.59l2.83-2.83 1.41 1.41L1.41 40H0v-1.41zM0 1.4l2.83 2.83 1.41-1.41L1.41 0H0v1.41zM38.59 40l-2.83-2.83 1.41-1.41L40 38.59V40h-1.41zM40 1.41l-2.83 2.83-1.41-1.41L38.59 0H40v1.41zM20 18.6l2.83-2.83 1.41 1.41L21.41 20l2.83 2.83-1.41 1.41L20 21.41l-2.83 2.83-1.41-1.41L18.59 20l-2.83-2.83 1.41-1.41L20 18.59z'/%3E%3C/g%3E%3C/svg%3E");
                }

                /* Amélioration des performances d'animation */
                .transform {
                    transform-style: preserve-3d;
                    backface-visibility: hidden;
                }

                /* Responsive optimizations */
                @media (max-width: 640px) {
                    .animate-float {
                        animation-duration: 4s;
                    }
                }

                /* Accessibility improvements */
                @media (prefers-reduced-motion: reduce) {
                    *,
                    *::before,
                    *::after {
                        animation-duration: 0.01ms !important;
                        animation-iteration-count: 1 !important;
                        transition-duration: 0.01ms !important;
                    }
                }
            `}</style>
        </>
    );
};

export default HomePage;
// END OF FILE: src/pages/HomePage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/NotFoundPage.tsx

import { Link } from 'react-router-dom';

const NotFoundPage = () => {
  return (
    <div className="space-y-12">
      {/* Hero Section */}
      <section className="bg-orange-50 rounded-xl shadow-md overflow-hidden">
        <div className="container mx-auto px-6 py-16">
          <div className="flex flex-col md:flex-row items-center">
            <div className="md:w-1/2 md:pr-8">
              <h1 className="text-4xl md:text-5xl font-bold text-orange-600 mb-6">
                ERREUR 404
              </h1>
              <p className="text-lg mb-8 text-gray-700">Page Not Found              </p>
              <div className="flex flex-col sm:flex-row gap-4">
                <Link 
                  to="/" 
                  className="bg-[#ff8c00] hover:bg-orange-600 text-white py-3 px-6 rounded-md font-medium text-center"
                >
                  Home
                </Link>
                
              </div>
            </div>  
        </div>
        </div>

      </section>
    </div>
  );
};

export default NotFoundPage;// END OF FILE: src/pages/NotFoundPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/readme.md

#### dans ce dossier nous allons definir les differentes pages du projet 
et chaque page devra etre dans un dossier portant le nom de la page// END OF FILE: src/pages/readme.md

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/ThesisDetailsPage.tsx

import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useConfig } from '../contexts/ConfigContext';
import { authService } from '../services/auth/authService';
import { BiblioUser } from '../types/auth';
import { Timestamp, doc, updateDoc, arrayUnion, getDoc } from 'firebase/firestore';
import { db } from '../configs/firebase';

// Import des composants pour les mémoires
import ThesisHeader from '../components/thesis/ThesisHeader';
import ThesisDescription from '../components/thesis/ThesisDescription';
import CommentsSection from '../components/common/CommentsSection.tsx';
import CommentModal from '../components/common/CommentModal.tsx';
import LoadingSpinner from '../components/common/LoadingSpinner';

// Import des interfaces
import { BiblioThesis, ThesisComment, ThesisCommentWithUserData } from '../types/thesis';

const ThesisDetailsPage: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const { orgSettings } = useConfig();

    // États principaux
    const [thesis, setThesis] = useState<BiblioThesis | null>(null);
    const [commentsWithUserData, setCommentsWithUserData] = useState<ThesisCommentWithUserData[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [currentUser, setCurrentUser] = useState<BiblioUser | null>(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);

    // États pour les interactions
    const [isFavorite, setIsFavorite] = useState(false);
    const [isViewing, setIsViewing] = useState(false);
    const [isCommentModalOpen, setIsCommentModalOpen] = useState(false);
    const [loadingComments, setLoadingComments] = useState(false);

    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';

    // Charger les données utilisateur
    useEffect(() => {
        const loadUserData = async () => {
            try {
                const user = await authService.getCurrentUser();
                if (user) {
                    setCurrentUser(user);
                    setIsAuthenticated(true);
                }
            } catch (error) {
                console.error('Erreur chargement utilisateur:', error);
            }
        };

        loadUserData();
    }, [id]);

    // Fonction pour récupérer les données utilisateur d'un commentaire
    const getUserDataForComment = async (nomUser: string): Promise<{ userName: string; userAvatar?: string }> => {
        try {
            return {
                userName: nomUser || 'Utilisateur anonyme',
                userAvatar: undefined
            };
        } catch (error) {
            console.error('Erreur récupération données utilisateur:', error);
            return { userName: nomUser || 'Utilisateur anonyme' };
        }
    };

    // Charger les commentaires avec les données utilisateur
    const loadCommentsWithUserData = async (comments: ThesisComment[]) => {
        setLoadingComments(true);

        try {
            const commentsWithData = await Promise.all(
                comments.map(async (comment, index) => {
                    const userData = await getUserDataForComment(comment.nomUser);
                    return {
                        ...comment,
                        id: `comment_${index}_${comment.heure.toMillis()}`,
                        userId: comment.nomUser,
                        userName: userData.userName,
                        userAvatar: userData.userAvatar,
                        helpful: 0
                    } as ThesisCommentWithUserData;
                })
            );

            setCommentsWithUserData(commentsWithData);
        } catch (error) {
            console.error('Erreur chargement commentaires:', error);
            setCommentsWithUserData([]);
        } finally {
            setLoadingComments(false);
        }
    };

    // Charger les données du mémoire depuis Firebase
    useEffect(() => {
        const fetchThesisData = async () => {
            if (!id) {
                setError('ID du mémoire manquant');
                setLoading(false);
                return;
            }

            try {
                setLoading(true);
                setError(null);

                // Récupérer le mémoire depuis Firestore
                const thesisDoc = await getDoc(doc(db, 'BiblioThesis', id));

                if (!thesisDoc.exists()) {
                    setError('Mémoire introuvable dans la base de données');
                    setLoading(false);
                    return;
                }

                const thesisData = { id: thesisDoc.id, ...thesisDoc.data() } as BiblioThesis;
                setThesis(thesisData);

                // Charger les commentaires avec les données utilisateur
                if (thesisData.commentaire && thesisData.commentaire.length > 0) {
                    await loadCommentsWithUserData(thesisData.commentaire);
                } else {
                    console.log('📝 Aucun commentaire pour ce mémoire');
                    setCommentsWithUserData([]);
                }

            } catch (error) {
                console.error('❌ Erreur chargement mémoire:', error);
                setError('Impossible de charger les détails du mémoire. Veuillez réessayer plus tard.');
            } finally {
                setLoading(false);
            }
        };

        fetchThesisData();
    }, [id]);

    // Gestion de la consultation
    const handleView = async () => {
        if (!isAuthenticated) {
            navigate('/auth');
            return;
        }

        if (!thesis) {
            return;
        }

        setIsViewing(true);

        try {
            // TODO: Implémenter la logique de consultation
            console.log('📖 Consultation du mémoire:', thesis.id);

            // Simuler un délai
            await new Promise(resolve => setTimeout(resolve, 2000));

            console.log('✅ Mémoire consulté avec succès');

        } catch (error) {
            console.error('❌ Erreur consultation:', error);
            alert('Erreur lors de la consultation. Veuillez réessayer.');
        } finally {
            setIsViewing(false);
        }
    };

    // Gestion des favoris
    const handleToggleFavorite = async () => {
        if (!isAuthenticated) {
            navigate('/auth');
            return;
        }

        try {
            setIsFavorite(!isFavorite);

            const message = isFavorite
                ? 'Mémoire retiré des favoris'
                : 'Mémoire ajouté aux favoris';
            console.log(message);

        } catch (error) {
            console.error('❌ Erreur favoris:', error);
        }
    };

    // Gestion des commentaires
    const handleSubmitComment = async (commentData: { texte: string; note: number; nomUser: string }) => {
        if (!isAuthenticated || !currentUser || !thesis) {
            throw new Error('Non authentifié');
        }

        try {
            const newComment: ThesisComment = {
                heure: Timestamp.now(),
                nomUser: commentData.nomUser,
                note: commentData.note,
                texte: commentData.texte
            };

            // Ajouter le commentaire au mémoire dans Firestore
            const thesisRef = doc(db, 'BiblioThesis', thesis.id);
            await updateDoc(thesisRef, {
                commentaire: arrayUnion(newComment)
            });

            // Mettre à jour l'état local du mémoire
            setThesis(prev => prev ? {
                ...prev,
                commentaire: [newComment, ...prev.commentaire]
            } : null);

            // Créer le commentaire avec données utilisateur pour l'affichage
            const newCommentWithUserData: ThesisCommentWithUserData = {
                ...newComment,
                id: `comment_new_${Date.now()}`,
                userId: currentUser.id || '',
                userName: currentUser.name,
                userAvatar: currentUser.profilePicture,
                helpful: 0
            };

            // Mettre à jour l'état local des commentaires avec données utilisateur
            setCommentsWithUserData(prev => [newCommentWithUserData, ...prev]);

        } catch (error) {
            console.error('❌ Erreur ajout commentaire:', error);
            throw error;
        }
    };

    // Gestion des votes "utile"
    const handleHelpfulClick = async (commentId: string) => {
        if (!isAuthenticated) {
            navigate('/auth');
            return;
        }

        try {
            setCommentsWithUserData(prev =>
                prev.map(comment =>
                    comment.id === commentId
                        ? { ...comment, helpful: (comment.helpful || 0) + 1 }
                        : comment
                )
            );

        } catch (error) {
            console.error('❌ Erreur vote utile:', error);
        }
    };

    const handleLoginRequired = () => {
        navigate('/auth');
    };

    // États de chargement
    if (loading) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center">
                <LoadingSpinner
                    size="xl"
                    text="Chargement des détails du mémoire..."
                    fullScreen
                />
            </div>
        );
    }

    // Gestion des erreurs
    if (error || !thesis) {
        return (
            <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
                <div className="bg-white rounded-2xl shadow-xl p-8 max-w-md w-full text-center">
                    <div
                        className="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center"
                        style={{ backgroundColor: `${primaryColor}15` }}
                    >
                        <svg
                            className="w-8 h-8"
                            style={{ color: primaryColor }}
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <h2 className="text-2xl font-bold mb-4" style={{ color: secondaryColor }}>
                        Mémoire introuvable
                    </h2>
                    <p className="text-gray-600 mb-6">
                        {error || 'Le mémoire que vous recherchez n\'existe pas ou a été supprimé.'}
                    </p>
                    <div className="flex flex-col sm:flex-row gap-3">
                        <button
                            onClick={() => window.location.reload()}
                            className="flex-1 px-6 py-3 cursor-pointer rounded-lg font-medium text-white transition-colors"
                            style={{ backgroundColor: primaryColor }}
                        >
                            Réessayer
                        </button>
                        <button
                            onClick={() => navigate('/thesis')}
                            className="flex-1 px-6 py-3 cursor-pointer rounded-lg font-medium border-2 transition-colors"
                            style={{
                                borderColor: primaryColor,
                                color: primaryColor
                            }}
                        >
                            Retour aux mémoires
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-50">
            {/* Navigation breadcrumb */}
            <div className="bg-white border-b border-gray-200">
                <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
                    <nav className="flex items-center space-x-2 text-sm">
                        <button
                            onClick={() => navigate('/')}
                            className="text-gray-500 cursor-pointer hover:text-gray-700 transition-colors"
                        >
                            Accueil
                        </button>
                        <span className="text-gray-400">/</span>
                        <button
                            onClick={() => navigate('/thesis')}
                            className="text-gray-500 cursor-pointer hover:text-gray-700 transition-colors"
                        >
                            Mémoires
                        </button>
                        <span className="text-gray-400">/</span>
                        <span style={{ color: primaryColor }} className="font-medium">
                            {thesis.theme || thesis.name}
                        </span>
                    </nav>
                </div>
            </div>

            {/* Contenu principal */}
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                <div className="space-y-8">
                    {/* En-tête du mémoire */}
                    <ThesisHeader
                        thesis={thesis}
                        onView={handleView}
                        onToggleFavorite={handleToggleFavorite}
                        onOpenCommentModal={() => setIsCommentModalOpen(true)}
                        isFavorite={isFavorite}
                        isAuthenticated={isAuthenticated}
                        isViewing={isViewing}
                        commentsWithUserData={commentsWithUserData}
                    />

                    {/* Description du mémoire */}
                    <ThesisDescription thesis={thesis} />

                    {/* Section des commentaires */}
                    <div className="relative">
                        {loadingComments && (
                            <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10 rounded-2xl">
                                <LoadingSpinner size="md" text="Chargement des commentaires..." />
                            </div>
                        )}

                        <CommentsSection
                            comments={commentsWithUserData}
                            onOpenCommentModal={() => setIsCommentModalOpen(true)}
                            onHelpfulClick={handleHelpfulClick}
                            isAuthenticated={isAuthenticated}
                        />
                    </div>
                </div>
            </div>

            {/* Modal de commentaire */}
            <CommentModal
                isOpen={isCommentModalOpen}
                onClose={() => setIsCommentModalOpen(false)}
                onSubmit={handleSubmitComment}
                bookTitle={thesis.theme || `Mémoire de ${thesis.name}`}
                isAuthenticated={isAuthenticated}
                onLoginRequired={handleLoginRequired}
                currentUserName={currentUser?.name || ''}
            />

            {/* Bouton flottant de retour */}
            <button
                onClick={() => navigate('/thesis')}
                className="fixed bottom-6 left-6 w-14 cursor-pointer h-14 rounded-full shadow-xl text-white flex items-center justify-center transition-all duration-200 hover:shadow-2xl hover:scale-110 z-50"
                style={{ backgroundColor: secondaryColor }}
                title="Retour aux mémoires"
            >
                <svg
                    className="w-6 h-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
            </button>
        </div>
    );
};

export default ThesisDetailsPage;
// END OF FILE: src/pages/ThesisDetailsPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/pages/ThesisPage.tsx

import React, { useState, useCallback } from 'react';
import { useConfig } from '../contexts/ConfigContext';

import DepartmentFilter from '../components/common/DepartmentFilter.tsx';
import ThesisAdvancedSearchBar from '../components/thesis/ThesisAdvancedSearchBar';
import ThesisSortOptions, { ThesisSortOption, ViewMode } from '../components/thesis/ThesisSortOptions';
import ThesisList from '../components/thesis/ThesisList';
import ThesisStatistics from '../components/thesis/ThesisStatistics';
import Header from '../components/layout/Header';
import Footer from '../components/layout/Footer';
import { MessageCircle, FileText, Award, TrendingUp } from 'lucide-react';
import { ThesisSearchFilters } from '../types/thesis';

const ThesisPage: React.FC = () => {
    const { orgSettings } = useConfig();

    const [searchFilters, setSearchFilters] = useState<ThesisSearchFilters>({
        query: '',
        author: '',
        department: '',
        year: '',
        keywords: '',
        supervisor: ''
    });

    const [selectedDepartments, setSelectedDepartments] = useState<string[]>([]);
    const [sortOption, setSortOption] = useState<ThesisSortOption>('year-desc');
    const [viewMode, setViewMode] = useState<ViewMode>('grid');
    const [favoriteTheses, setFavoriteTheses] = useState<string[]>([]);

    // Configuration des couleurs
    const primaryColor = orgSettings?.Theme?.Primary || '#ff8c00';
    const secondaryColor = orgSettings?.Theme?.Secondary || '#1b263b';
    const organizationName = orgSettings?.Name || 'BiblioENSPY';

    // Handlers pour les composants
    const handleSearchChange = useCallback((filters: ThesisSearchFilters) => {
        setSearchFilters(filters);
    }, []);

    const handleDepartmentChange = useCallback((departments: string[]) => {
        setSelectedDepartments(departments);
    }, []);

    const handleSortChange = useCallback((sort: ThesisSortOption) => {
        setSortOption(sort);
    }, []);

    const handleViewModeChange = useCallback((mode: ViewMode) => {
        setViewMode(mode);
    }, []);

    const handleThesisView = useCallback(async (thesisId: string) => {
        try {
            console.log('📖 Consultation du mémoire:', thesisId);
            // TODO: Implémenter la logique de consultation avec votre service
            // await thesisService.viewThesis(thesisId);

            // Simuler un délai
            await new Promise(resolve => setTimeout(resolve, 1000));

        } catch {
            alert('Erreur lors de la consultation. Veuillez réessayer.');
        }
    }, []);

    // Gestion des favoris
    const handleToggleFavorite = useCallback((thesisId: string) => {
        setFavoriteTheses(prev => {
            const newFavorites = prev.includes(thesisId)
                ? prev.filter(id => id !== thesisId)
                : [...prev, thesisId];

            return newFavorites;
        });
    }, []);

    return (
        <div className="min-h-screen bg-gray-50">
            <Header />

            {/* En-tête avec hero section */}
            <div className="bg-[#1b263b] border border-gray-200 shadow-sm">
                <div className="container mx-auto px-4 py-12">
                    {/* Titre principal */}
                    <div className="text-center mb-8">
                        <div className="flex justify-center mb-4 mt-12">
                            <div
                                className="w-16 h-1 rounded-full"
                                style={{
                                    background: `linear-gradient(to right, ${primaryColor}, ${secondaryColor})`
                                }}
                            />
                        </div>
                        <h1
                            className="text-4xl md:text-5xl font-bold mb-4"
                            style={{ color: primaryColor }}
                        >
                            Mémoires & Thèses {organizationName}
                        </h1>
                        <p className="text-lg text-white max-w-3xl mx-auto leading-relaxed">
                            Découvrez les travaux de recherche de nos étudiants et diplômés.
                            Explorez, consultez et trouvez l'inspiration pour vos propres projets académiques.
                        </p>
                    </div>

                    {/* Barre de recherche avancée */}
                    <div className="max-w-4xl mx-auto">
                        <ThesisAdvancedSearchBar
                            onSearchChange={handleSearchChange}
                            placeholder="Rechercher par auteur, département, mots-clés ou superviseur..."
                        />
                    </div>
                </div>
            </div>

            {/* Contenu principal */}
            <div className="container mx-auto px-4 py-8">
                <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
                    {/* Sidebar avec filtres */}
                    <aside className="xl:col-span-1 space-y-6">
                        {/* Filtre par département */}
                        <DepartmentFilter
                            selectedDepartments={selectedDepartments}
                            onDepartmentChange={handleDepartmentChange}
                        />

                        {/* Informations utiles */}
                        <div className="bg-white rounded-xl border border-gray-200 shadow-sm p-6">
                            <div className="flex items-center mb-4">
                                <div
                                    className="w-8 h-8 rounded-lg flex items-center justify-center mr-3"
                                    style={{ backgroundColor: `${primaryColor}15` }}
                                >
                                    <FileText className="w-4 h-4" style={{ color: primaryColor }} />
                                </div>
                                <h3 className="font-semibold text-gray-800">Guide de recherche</h3>
                            </div>
                            <ul className="text-sm text-gray-600 space-y-3">
                                <li className="flex items-start">
                                    <div className="w-2 h-2 rounded-full bg-green-400 mt-1.5 mr-3 flex-shrink-0" />
                                    <span>Utilisez des <strong>mots-clés spécialisés</strong> pour cibler votre domaine</span>
                                </li>
                                <li className="flex items-start">
                                    <div className="w-2 h-2 rounded-full bg-blue-400 mt-1.5 mr-3 flex-shrink-0" />
                                    <span>Filtrez par <strong>département</strong> pour explorer votre filière</span>
                                </li>
                                <li className="flex items-start">
                                    <div className="w-2 h-2 rounded-full bg-purple-400 mt-1.5 mr-3 flex-shrink-0" />
                                    <span>Consultez les <strong>travaux récents</strong> pour les dernières recherches</span>
                                </li>
                            </ul>
                        </div>

                        {/* Conseils académiques */}
                        <div className="bg-gradient-to-br from-blue-50 to-purple-50 rounded-xl border border-blue-200 p-6">
                            <div className="flex items-center mb-4">
                                <Award className="w-6 h-6 mr-3" style={{ color: primaryColor }} />
                                <h3 className="font-semibold text-gray-800">Conseils académiques</h3>
                            </div>
                            <div className="space-y-3 text-sm text-gray-700">
                                <div className="flex items-start">
                                    <TrendingUp className="w-4 h-4 mr-2 mt-0.5 text-green-600 flex-shrink-0" />
                                    <span>Explorez les mémoires de votre département pour comprendre les standards</span>
                                </div>
                                <div className="flex items-start">
                                    <TrendingUp className="w-4 h-4 mr-2 mt-0.5 text-blue-600 flex-shrink-0" />
                                    <span>Analysez les méthodologies utilisées dans les travaux similaires</span>
                                </div>
                                <div className="flex items-start">
                                    <TrendingUp className="w-4 h-4 mr-2 mt-0.5 text-purple-600 flex-shrink-0" />
                                    <span>Identifiez les gaps de recherche pour vos futurs projets</span>
                                </div>
                            </div>
                        </div>

                        <ThesisStatistics
                            className="mb-8"
                            showRefreshButton={false}
                            compact={true}
                        />

                    </aside>

                    {/* Contenu principal */}
                    <main className="xl:col-span-3 space-y-6">
                        {/* Options de tri et d'affichage */}
                        <ThesisSortOptions
                            currentSort={sortOption}
                            onSortChange={handleSortChange}
                            viewMode={viewMode}
                            onViewModeChange={handleViewModeChange}
                        />

                        {/* Liste des mémoires */}
                        <ThesisList
                            searchFilters={searchFilters}
                            selectedDepartments={selectedDepartments}
                            sortOption={sortOption}
                            viewMode={viewMode}
                            onThesisView={handleThesisView}
                            onToggleFavorite={handleToggleFavorite}
                            favoriteTheses={favoriteTheses}
                        />
                    </main>
                </div>
            </div>

            {/* Section d'aide */}
            <div className="bg-white border-t border-gray-200 mt-16">
                <div className="container mx-auto px-4 py-12">
                    <div className="text-center">
                        <h3 className="text-2xl font-bold text-gray-800 mb-4">
                            Besoin d'aide pour votre recherche académique ?
                        </h3>
                        <p className="text-gray-600 mb-8 max-w-2xl mx-auto">
                            Notre équipe académique est là pour vous accompagner dans vos recherches
                            et vous guider vers les ressources les plus pertinentes pour vos travaux.
                        </p>
                        <div className="flex flex-col sm:flex-row gap-4 justify-center">
                            <button
                                className="inline-flex items-center px-8 py-3 rounded-lg text-white font-medium transition-all duration-200 hover:shadow-lg transform hover:scale-[1.02]"
                                style={{ backgroundColor: primaryColor }}
                            >
                                <MessageCircle className="w-5 h-5 mr-2" />
                                Contacter un conseiller académique
                            </button>
                            <button
                                className="inline-flex items-center px-8 py-3 rounded-lg font-medium border-2 transition-all duration-200 hover:shadow-lg transform hover:scale-[1.02]"
                                style={{
                                    borderColor: secondaryColor,
                                    color: secondaryColor
                                }}
                            >
                                <FileText className="w-5 h-5 mr-2" />
                                Guide de rédaction
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <Footer />
        </div>
    );
};

export default ThesisPage;
// END OF FILE: src/pages/ThesisPage.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/router.tsx

// END OF FILE: src/router.tsx

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/services/auth/authService.ts

import {
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut as firebaseSignOut,
    sendEmailVerification as firebaseSendEmailVerification,
    sendPasswordResetEmail,
    updateProfile
} from 'firebase/auth';
import {
    doc,
    setDoc,
    getDoc,
    updateDoc,
    Timestamp,
    getDocs,
    collection
} from 'firebase/firestore';

import { auth, db } from '../../configs/firebase';
import { configService } from '../configService';
import { cloudinaryService } from '../cloudinaryService';
import {BiblioUser, RegisterFormData, LoginFormData, AuthResponse, EtatValue} from '../../types/auth';

class AuthService {

    /**
     * Inscription d'un nouvel utilisateur
     */
    async signUp(data: RegisterFormData): Promise<AuthResponse> {
        try {

            // Récupérer la configuration pour MaximumSimultaneousLoans
            const orgSettings = await configService.getOrgSettings();
            const maxLoans = orgSettings.MaximumSimultaneousLoans || 3;
            console.log('📊 Paramètres org:', { maxLoans });

            // Créer l'utilisateur Firebase Auth
            const userCredential = await createUserWithEmailAndPassword(
                auth,
                data.email,
                data.password
            );

            const firebaseUser = userCredential.user;

            // Upload de l'image de profil si fournie (via Cloudinary)
            let profilePictureUrl = '';
            if (data.profilePicture) {
                console.log('📸 Upload de l\'avatar en cours...');

                // Convertir l'URL en File si nécessaire
                let fileToUpload: File;
                if (typeof data.profilePicture === 'string') {
                    // Si c'est déjà une URL Cloudinary, on la garde
                    profilePictureUrl = data.profilePicture;
                } else {
                    // Si c'est un File, on l'upload
                    fileToUpload = data.profilePicture;
                    const uploadResponse = await cloudinaryService.uploadAvatar(
                        fileToUpload,
                        firebaseUser.uid
                    );

                    if (uploadResponse.success && uploadResponse.url) {
                        profilePictureUrl = uploadResponse.url;
                        console.log('✅ Avatar uploadé:', profilePictureUrl);
                    } else {
                        console.warn('⚠️ Échec upload avatar:', uploadResponse.error);
                    }
                }
            }

            // Créer les tableaux d'état dynamiquement selon MaximumSimultaneousLoans
            const userStateData = this.createUserStateData(maxLoans);
            console.log('📋 États utilisateur créés:', userStateData);

            // CORRECTION: S'assurer que niveau et departement ne sont jamais undefined
            const niveau = data.statut === 'etudiant' ? (data.niveau || '') : '';
            const departement = data.statut === 'etudiant' ? (data.departement || '') : '';

            // Créer le document utilisateur dans Firestore
            const biblioUser: BiblioUser = {
                id: firebaseUser.uid,
                name: data.name,
                matricule: data.matricule,
                email: data.email,
                niveau: niveau,
                departement: departement,
                tel: data.tel,
                createdAt: Timestamp.now(),
                lastLoginAt: Timestamp.now(),
                level: 'level1',
                ...userStateData,
                emailVerified: false,
                profilePicture: profilePictureUrl,
                statut: data.statut
            };

            console.log('👤 Données utilisateur finales à sauvegarder:', {
                id: biblioUser.id,
                email: biblioUser.email,
                statut: biblioUser.statut,
                niveau: biblioUser.niveau,
                departement: biblioUser.departement,
                hasProfilePicture: !!biblioUser.profilePicture
            });

            // Sauvegarder dans Firestore
            await setDoc(doc(db, 'BiblioUser', firebaseUser.uid), biblioUser);
            console.log('✅ Utilisateur sauvegardé dans Firestore');

            // Vérification de la sauvegarde
            const savedDoc = await getDoc(doc(db, 'BiblioUser', firebaseUser.uid));
            if (savedDoc.exists()) {
                console.log('✅ Vérification: Document bien sauvegardé:', savedDoc.data());
            } else {
                console.error('❌ Vérification: Document non trouvé après sauvegarde');
            }

            // Mettre à jour le profil Firebase Auth
            await updateProfile(firebaseUser, {
                displayName: data.name,
                photoURL: profilePictureUrl
            });

            // Envoyer l'email de vérification
            await firebaseSendEmailVerification(firebaseUser);

            return {
                success: true,
                message: 'Inscription réussie ! Vérifiez votre email pour activer votre compte.',
                user: biblioUser
            };

        } catch (error: unknown) {
            console.error('❌ Erreur inscription:', error);

            // Log détaillé de l'erreur
            if (error instanceof Error) {
                console.error('Message:', error.message);
                console.error('Stack:', error.stack);
            }

            return {
                success: false,
                message: this.getErrorMessage(error as string)
            };
        }
    }

    /**
     * Connexion d'un utilisateur
     */
    async signIn(data: LoginFormData): Promise<AuthResponse> {
        try {

            const userCredential = await signInWithEmailAndPassword(
                auth,
                data.email,
                data.password
            );

            const firebaseUser = userCredential.user;

            // Récupérer les données utilisateur depuis Firestore
            const userDoc = await getDoc(doc(db, 'BiblioUser', firebaseUser.uid));

            if (!userDoc.exists()) {
                console.error('❌ Utilisateur non trouvé dans Firestore');
                throw new Error('Utilisateur non trouvé dans la base de données');
            }

            const biblioUser = userDoc.data() as BiblioUser;
            console.log('✅ Données utilisateur récupérées:', {
                email: biblioUser.email,
                statut: biblioUser.statut,
                niveau: biblioUser.niveau,
                departement: biblioUser.departement
            });

            // Mettre à jour la dernière connexion
            await updateDoc(doc(db, 'BiblioUser', firebaseUser.uid), {
                lastLoginAt: Timestamp.now()
            });

            return {
                success: true,
                message: 'Connexion réussie !',
                user: { ...biblioUser, id: firebaseUser.uid }
            };

        } catch (error: unknown) {
            return {
                success: false,
                message: this.getErrorMessage(error as string)
            };
        }
    }

    /**
     * Déconnexion
     */
    async signOut(): Promise<void> {
        try {
            await firebaseSignOut(auth);
        } catch (error) {
            console.error('❌ Erreur déconnexion:', error);
            throw error;
        }
    }

    /**
     * Envoi d'email de vérification
     */
    async sendEmailVerification(): Promise<void> {
        try {
            const user = auth.currentUser;
            if (!user) {
                throw new Error('Aucun utilisateur connecté');
            }

            await firebaseSendEmailVerification(user);
        } catch (error) {
            console.error('❌ Erreur envoi email:', error);
            throw error;
        }
    }

    /**
     * Réinitialisation du mot de passe
     */
    async resetPassword(email: string): Promise<void> {
        try {
            await sendPasswordResetEmail(auth, email);
        } catch (error) {
            console.error('❌ Erreur reset password:', error);
            throw error;
        }
    }

    /**
     * Récupération des données utilisateur
     */
    async getCurrentUser(): Promise<BiblioUser | null> {
        try {
            const firebaseUser = auth.currentUser;
            if (!firebaseUser) return null;

            const userDoc = await getDoc(doc(db, 'BiblioUser', firebaseUser.uid));

            if (!userDoc.exists()) return null;

            const userData = userDoc.data() as BiblioUser;
            console.log('📤 Données utilisateur récupérées:', {
                email: userData.email,
                statut: userData.statut,
                niveau: userData.niveau,
                departement: userData.departement
            });

            return { ...userData, id: firebaseUser.uid };
        } catch (error) {
            console.error('❌ Erreur récupération utilisateur:', error);
            return null;
        }
    }

    /**
     * Mise à jour du profil utilisateur
     */
    async updateUserProfile(data: Partial<BiblioUser>): Promise<void> {
        try {
            const firebaseUser = auth.currentUser;
            if (!firebaseUser) {
                throw new Error('Aucun utilisateur connecté');
            }

            // S'assurer que niveau et departement ne sont jamais undefined
            const updateData = { ...data };
            if (updateData.niveau === undefined) updateData.niveau = '';
            if (updateData.departement === undefined) updateData.departement = '';

            // Mettre à jour dans Firestore
            await updateDoc(doc(db, 'BiblioUser', firebaseUser.uid), updateData);

            // Mettre à jour le profil Firebase Auth si nécessaire
            const authUpdateData: { displayName?: string; photoURL?: string } = {};
            if (data.name) authUpdateData.displayName = data.name;
            if (data.profilePicture) authUpdateData.photoURL = data.profilePicture;

            if (Object.keys(authUpdateData).length > 0) {
                await updateProfile(firebaseUser, authUpdateData);
            }

            console.log('✅ Profil utilisateur mis à jour');
        } catch (error) {
            console.error('❌ Erreur mise à jour profil:', error);
            throw error;
        }
    }

    /**
     * Création des données d'état utilisateur dynamiques
     */
    private createUserStateData(maxLoans: number): Record<string, string | string[]> {
        const stateData: Record<string, EtatValue | string[]> = {};

        for (let i = 1; i <= maxLoans; i++) {
            stateData[`tabEtat${i}`] = [];
            stateData[`etat${i}`] = 'ras' as EtatValue;
        }

        console.log('📊 États créés pour', maxLoans, 'emprunts max:', stateData);
        return stateData;
    }

    /**
     * Conversion des codes d'erreur Firebase en messages lisibles
     */
    private getErrorMessage(errorCode: string): string {
        const errorMessages: Record<string, string> = {
            'auth/email-already-in-use': 'Cette adresse email est déjà utilisée.',
            'auth/invalid-email': 'Adresse email invalide.',
            'auth/operation-not-allowed': 'Opération non autorisée.',
            'auth/weak-password': 'Le mot de passe est trop faible.',
            'auth/user-disabled': 'Ce compte a été désactivé.',
            'auth/user-not-found': 'Aucun utilisateur trouvé avec cette adresse email.',
            'auth/wrong-password': 'Mot de passe incorrect.',
            'auth/invalid-credential': 'Identifiants invalides.',
            'auth/too-many-requests': 'Trop de tentatives. Veuillez réessayer plus tard.',
            'auth/network-request-failed': 'Erreur de connexion réseau.',
            'auth/requires-recent-login': 'Cette opération nécessite une connexion récente.'
        };

        return errorMessages[errorCode] || 'Une erreur inattendue s\'est produite.';
    }

    /**
     * Vérification de la validité du matricule
     */
    async validateMatricule(matricule: string): Promise<boolean> {
        try {
            return matricule.length >= 6;
        } catch (error) {
            console.error('❌ Erreur validation matricule:', error);
            return false;
        }
    }

    /**
     * Vérification de la disponibilité de l'email
     */
    async checkEmailAvailability(email: string): Promise<boolean> {
        try {
            const querySnapshot = await getDocs(collection(db, 'BiblioUser'));
            const emailExists = querySnapshot.docs.some((doc) => doc.data().email === email);
            return !emailExists;
        } catch (error) {
            console.error('❌ Erreur vérification email:', error);
            return false;
        }
    }
}

export const authService = new AuthService();
// END OF FILE: src/services/auth/authService.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/services/cloudinaryService.ts

interface CloudinaryConfig {
    cloudName: string;
    uploadPreset: string;
    apiKey?: string;
}

interface UploadOptions {
    folder?: string;
    publicId?: string;
    quality?: 'auto' | 'auto:good' | 'auto:best' | number;
    format?: 'auto' | 'jpg' | 'png' | 'webp';
    maxFileSize?: number;
    allowedFormats?: string[];
    tags?: string[];
    context?: Record<string, string>;
}

interface UploadResponse {
    success: boolean;
    url?: string;
    publicId?: string;
    error?: string;
    width?: number;
    height?: number;
    format?: string;
    bytes?: number;
}

interface UploadProgress {
    loaded: number;
    total: number;
    percentage: number;
}

class CloudinaryService {
    private config: CloudinaryConfig;

    constructor(config: CloudinaryConfig) {
        this.config = config;
    }

    /**
     * Upload d'image pour avatar/profil
     * Les transformations seront appliquées via l'upload preset
     */
    async uploadAvatar(
        file: File,
        userId: string,
        onProgress?: (progress: UploadProgress) => void
    ): Promise<UploadResponse> {
        const options: UploadOptions = {
            folder: 'avatars',
            publicId: `avatar_${userId}_${Date.now()}`,
            // ✅ Les transformations sont définies dans l'upload preset
            quality: 'auto:good',
            maxFileSize: 5 * 1024 * 1024, // 5MB
            allowedFormats: ['jpg', 'jpeg', 'png', 'webp'],
            tags: ['avatar', 'profile']
        };

        return this.uploadImage(file, options, onProgress);
    }

    /**
     * Upload d'image pour couverture de livre
     */
    async uploadBookCover(
        file: File,
        bookId: string,
        onProgress?: (progress: UploadProgress) => void
    ): Promise<UploadResponse> {
        const options: UploadOptions = {
            folder: 'book-covers',
            publicId: `book_${bookId}_${Date.now()}`,
            // ✅ Les transformations sont définies dans l'upload preset
            quality: 'auto:best',
            maxFileSize: 10 * 1024 * 1024, // 10MB
            allowedFormats: ['jpg', 'jpeg', 'png', 'webp'],
            tags: ['book', 'cover']
        };

        return this.uploadImage(file, options, onProgress);
    }

    /**
     * Upload d'image générale
     */
    async uploadGeneral(
        file: File,
        folder: string = 'general',
        onProgress?: (progress: UploadProgress) => void
    ): Promise<UploadResponse> {
        const options: UploadOptions = {
            folder,
            publicId: `img_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            quality: 'auto',
            maxFileSize: 15 * 1024 * 1024, // 15MB
            allowedFormats: ['jpg', 'jpeg', 'png', 'webp', 'gif'],
            tags: ['general', 'upload']
        };

        return this.uploadImage(file, options, onProgress);
    }

    /**
     * Upload d'image avec drag & drop
     */
    async uploadDragDrop(
        file: File,
        folder: string = 'uploads',
        customOptions: Partial<UploadOptions> = {},
        onProgress?: (progress: UploadProgress) => void
    ): Promise<UploadResponse> {
        const options: UploadOptions = {
            folder,
            publicId: `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            quality: 'auto',
            maxFileSize: 20 * 1024 * 1024, // 20MB
            allowedFormats: ['jpg', 'jpeg', 'png', 'webp', 'gif'],
            tags: ['dragdrop', 'upload'],
            ...customOptions
        };

        return this.uploadImage(file, options, onProgress);
    }

    /**
     * Méthode générique d'upload (CORRIGÉE)
     */
    private async uploadImage(
        file: File,
        options: UploadOptions,
        onProgress?: (progress: UploadProgress) => void
    ): Promise<UploadResponse> {
        try {
            // Validation du fichier
            const validation = this.validateFile(file, options);
            if (!validation.isValid) {
                return {
                    success: false,
                    error: validation.error
                };
            }

            // Création du FormData
            const formData = new FormData();
            formData.append('file', file);
            formData.append('upload_preset', this.config.uploadPreset);

            // ✅ Paramètres autorisés pour unsigned upload
            if (options.folder) {
                formData.append('folder', options.folder);
            }

            if (options.publicId) {
                formData.append('public_id', options.publicId);
            }

            if (options.tags && options.tags.length > 0) {
                formData.append('tags', options.tags.join(','));
            }

            if (options.context) {
                formData.append('context', Object.entries(options.context)
                    .map(([key, value]) => `${key}=${value}`)
                    .join('|')
                );
            }

            // ❌ SUPPRIMÉ: transformation (cause de l'erreur)
            // ✅ Les transformations doivent être configurées dans l'upload preset

            console.log('📤 Upload vers Cloudinary...');
            console.log('📁 Folder:', options.folder);
            console.log('🆔 Public ID:', options.publicId);
            console.log('🏷️ Tags:', options.tags);

            // URL d'upload Cloudinary
            const uploadUrl = `https://api.cloudinary.com/v1_1/${this.config.cloudName}/image/upload`;

            // Upload avec XMLHttpRequest pour suivre le progrès
            return new Promise((resolve) => {
                const xhr = new XMLHttpRequest();

                // Suivi du progrès
                if (onProgress) {
                    xhr.upload.addEventListener('progress', (event) => {
                        if (event.lengthComputable) {
                            const progress: UploadProgress = {
                                loaded: event.loaded,
                                total: event.total,
                                percentage: Math.round((event.loaded / event.total) * 100)
                            };
                            onProgress(progress);
                        }
                    });
                }

                // Gestion de la réponse
                xhr.addEventListener('load', () => {
                    try {
                        const response = JSON.parse(xhr.responseText);

                        if (xhr.status === 200 && response.secure_url) {
                            console.log('✅ Upload réussi:', response.secure_url);
                            resolve({
                                success: true,
                                url: response.secure_url,
                                publicId: response.public_id,
                                width: response.width,
                                height: response.height,
                                format: response.format,
                                bytes: response.bytes
                            });
                        } else {
                            console.error('❌ Erreur Cloudinary:', response);
                            resolve({
                                success: false,
                                error: response.error?.message || 'Erreur lors de l\'upload'
                            });
                        }
                    } catch (error) {
                        console.error('❌ Erreur traitement Cloudinary:', error);
                        resolve({
                            success: false,
                            error: 'Erreur lors du traitement de la réponse'
                        });
                    }
                });

                // Gestion des erreurs
                xhr.addEventListener('error', () => {
                    console.error('❌ Erreur réseau Cloudinary');
                    resolve({
                        success: false,
                        error: 'Erreur de connexion lors de l\'upload'
                    });
                });

                // Timeout
                xhr.addEventListener('timeout', () => {
                    console.error('❌ Timeout Cloudinary');
                    resolve({
                        success: false,
                        error: 'Timeout lors de l\'upload'
                    });
                });

                // Configuration et envoi
                xhr.open('POST', uploadUrl);
                xhr.timeout = 60000; // 60 secondes
                xhr.send(formData);
            });

        } catch (error) {
            console.error('❌ Erreur upload Cloudinary:', error);
            return {
                success: false,
                error: 'Erreur inattendue lors de l\'upload'
            };
        }
    }

    /**
     * Validation du fichier
     */
    private validateFile(file: File, options: UploadOptions): { isValid: boolean; error?: string } {
        // Vérification de la taille
        if (options.maxFileSize && file.size > options.maxFileSize) {
            const maxSizeMB = Math.round(options.maxFileSize / (1024 * 1024));
            return {
                isValid: false,
                error: `La taille du fichier ne doit pas dépasser ${maxSizeMB}MB`
            };
        }

        // Vérification du format
        if (options.allowedFormats) {
            const fileExtension = file.name.split('.').pop()?.toLowerCase();
            const fileType = file.type.split('/')[1];

            const isValidFormat = options.allowedFormats.some(format =>
                format === fileExtension || format === fileType
            );

            if (!isValidFormat) {
                return {
                    isValid: false,
                    error: `Format non autorisé. Formats acceptés: ${options.allowedFormats.join(', ')}`
                };
            }
        }

        return { isValid: true };
    }

    /**
     * Génération d'URL avec transformations (à utiliser APRÈS l'upload)
     */
    generateUrl(publicId: string, transformations: string = ''): string {
        const baseUrl = `https://res.cloudinary.com/${this.config.cloudName}/image/upload`;

        if (transformations) {
            return `${baseUrl}/${transformations}/${publicId}`;
        }

        return `${baseUrl}/${publicId}`;
    }

    /**
     * Optimisation d'URL pour différentes tailles (à utiliser APRÈS l'upload)
     */
    getOptimizedUrl(publicId: string, size: 'thumbnail' | 'small' | 'medium' | 'large' | 'original' = 'medium'): string {
        const transformations: Record<string, string> = {
            thumbnail: 'c_fill,w_100,h_100,q_auto,f_auto',
            small: 'c_fill,w_300,h_300,q_auto,f_auto',
            medium: 'c_fill,w_600,h_600,q_auto,f_auto',
            large: 'c_fill,w_1200,h_1200,q_auto,f_auto',
            original: 'q_auto,f_auto'
        };

        return this.generateUrl(publicId, transformations[size]);
    }
}

// Configuration par défaut
const defaultConfig: CloudinaryConfig = {
    cloudName: import.meta.env.VITE_CLOUDINARY_CLOUD_NAME || 'your-cloud-name',
    uploadPreset: import.meta.env.VITE_CLOUDINARY_UPLOAD_PRESET || 'your-upload-preset'
};

export const cloudinaryService = new CloudinaryService(defaultConfig);
export { CloudinaryService, type UploadResponse, type UploadProgress, type UploadOptions };
// END OF FILE: src/services/cloudinaryService.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/services/configService.ts

import { doc, getDoc, collection, getDocs } from 'firebase/firestore';
import { db } from '../configs/firebase';
import { OrgSettings, AppSettings } from '../types/config';

class ConfigService {
    private orgSettingsCache: OrgSettings | null = null;
    private appSettingsCache: AppSettings | null = null;
    private cacheExpiry: number = 5 * 60 * 1000; // 5 minutes
    private lastFetch: number = 0;

    async getOrgSettings(): Promise<OrgSettings> {
        const now = Date.now();

        // Vérifier le cache seulement si on a des données récentes
        if (this.orgSettingsCache && (now - this.lastFetch) < this.cacheExpiry) {
            return this.orgSettingsCache;
        }

        try {
            console.log('🔍 Fetching org settings from Firebase...');

            // Vérifier d'abord si la collection Configuration existe
            const configCollection = collection(db, 'Configuration');
            const configSnapshot = await getDocs(configCollection);

            if (configSnapshot.empty) {
                return this.getDefaultOrgSettings();
            }

            const orgSettingsRef = doc(db, 'Configuration', 'OrgSettings');
            const docSnap = await getDoc(orgSettingsRef);

            if (docSnap.exists()) {
                const data = docSnap.data() as OrgSettings;

                // Vérifier que les données essentielles sont présentes
                if (!data.Name || !data.Theme) {
                    return this.getDefaultOrgSettings();
                }

                this.orgSettingsCache = data;
                this.lastFetch = now;

                // Appliquer le thème immédiatement
                this.applyThemeToDOM(data.Theme);

                return this.orgSettingsCache;
            } else {
                return this.getDefaultOrgSettings();
            }
        } catch (error) {
            console.error('❌ Error fetching organization settings:', error);

            // Vérifier si c'est un problème de permissions
            if (error instanceof Error && error.message.includes('permission')) {
                console.error('🔒 Firebase permissions error. Check Firestore rules.');
            }

            return this.getDefaultOrgSettings();
        }
    }

    async getAppSettings(): Promise<AppSettings> {
        try {

            const appSettingsRef = doc(db, 'Configuration', 'AppSettings');
            const docSnap = await getDoc(appSettingsRef);

            if (docSnap.exists()) {
                const data = docSnap.data() as AppSettings;
                this.appSettingsCache = data;
                return this.appSettingsCache;
            } else {
                return this.getDefaultAppSettings();
            }
        } catch (error) {
            console.error('❌ Error fetching app settings:', error);
            return this.getDefaultAppSettings();
        }
    }

    // Méthode pour invalider le cache et forcer le rechargement
    invalidateCache(): void {
        this.orgSettingsCache = null;
        this.appSettingsCache = null;
        this.lastFetch = 0;
    }

    // Force le rechargement depuis Firebase
    async forceRefresh(): Promise<void> {
        this.invalidateCache();
        await this.getOrgSettings();
        await this.getAppSettings();
    }

    // Méthode pour tester la connexion Firebase
    async testFirebaseConnection(): Promise<boolean> {
        try {;
            const testRef = doc(db, 'Configuration', 'test');
            await getDoc(testRef);
            return true;
        } catch (error) {
            console.error('❌ Firebase connection failed:', error);
            return false;
        }
    }

    private getDefaultOrgSettings(): OrgSettings {
        const defaults = {
            Address: "BP 8390, Melen, Yaoundé",
            Contact: {
                Email: "bornbeforedesign@gmail.com",
                Phone: "+237 677 77 77 77",
                WhatsApp: "+237 677 77 77 77",
                Facebook: "",
                Instagram: ""
            },
            LateReturnPenalties: ["100 FCFA par jour de retard"],
            Logo: "",
            MaximumSimultaneousLoans: 3,
            Name: "BiblioENSPY",
            OpeningHours: {
                Monday: '{"open": "08:00", "close": "18:00"}',
                Tuesday: '{"open": "08:00", "close": "18:00"}',
                Wednesday: '{"open": "08:00", "close": "18:00"}',
                Thursday: '{"open": "08:00", "close": "18:00"}',
                Friday: '{"open": "08:00", "close": "18:00"}',
                Saturday: '{"open": "10:00", "close": "16:00"}',
                Sunday: '{"open": "closed", "close": "closed"}'
            },
            SpecificBorrowingRules: ["Maximum 3 livres par étudiant"],
            Theme: {
                Primary: "#ff8c00",
                Secondary: "#1b263b"
            }
        };

        // Appliquer le thème par défaut
        this.applyThemeToDOM(defaults.Theme);
        return defaults;
    }

    private getDefaultAppSettings(): AppSettings {
        return {
            AppVersion: 1,
            DefaultLoanDuration: 21,
            GlobalLimits: 5,
            MaintenanceMode: false
        };
    }

    // Appliquer le thème au DOM
    private applyThemeToDOM(theme: { Primary: string; Secondary: string }): void {
        try {
            const root = document.documentElement;

            // Appliquer les couleurs principales
            root.style.setProperty('--color-primary', theme.Primary);
            root.style.setProperty('--color-secondary', theme.Secondary);
            root.style.setProperty('--tw-color-primary', theme.Primary);
            root.style.setProperty('--tw-color-secondary', theme.Secondary);

            // Convertir en RGB pour les variations d'opacité
            const primaryRgb = this.hexToRgb(theme.Primary);
            const secondaryRgb = this.hexToRgb(theme.Secondary);

            if (primaryRgb) {
                root.style.setProperty('--primary-rgb', `${primaryRgb.r}, ${primaryRgb.g}, ${primaryRgb.b}`);
            }

            if (secondaryRgb) {
                root.style.setProperty('--secondary-rgb', `${secondaryRgb.r}, ${secondaryRgb.g}, ${secondaryRgb.b}`);
            }
        } catch (error) {
            console.error('❌ Error applying theme:', error);
        }
    }

    // Utilitaire pour convertir hex en RGB
    private hexToRgb(hex: string): { r: number; g: number; b: number } | null {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    // Utilitaire pour parser les horaires
    parseOpeningHours(dayString: string): { open: string; close: string } {
        try {
            return JSON.parse(dayString);
        } catch {
            return { open: "closed", close: "closed" };
        }
    }

    // Utilitaire pour formater les horaires
    formatOpeningHours(dayString: string): string {
        const hours = this.parseOpeningHours(dayString);
        if (hours.open === "closed") {
            return "Fermé";
        }
        return `${hours.open} - ${hours.close}`;
    }
}

export const configService = new ConfigService();
// END OF FILE: src/services/configService.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/stores/readme.md

// END OF FILE: src/stores/readme.md

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/styles/globals.css

/* src/styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    --color-primary: #ff8c00;
    --color-secondary: #1b263b;
    --tw-color-primary: #ff8c00;
    --tw-color-secondary: #1b263b;
}

/* Animation pour les livres flottants */
@keyframes float {
    0% {
        transform: translateY(0) rotate(-12deg);
    }
    50% {
        transform: translateY(-10px) rotate(-8deg);
    }
    100% {
        transform: translateY(0) rotate(-12deg);
    }
}

.animate-float {
    animation: float 6s ease-in-out infinite;
}

/* Classes utilitaires pour les couleurs dynamiques */
.text-primary-dynamic {
    color: var(--color-primary);
}

.text-secondary-dynamic {
    color: var(--color-secondary);
}

.bg-primary-dynamic {
    background-color: var(--color-primary);
}

.bg-secondary-dynamic {
    background-color: var(--color-secondary);
}

.border-primary-dynamic {
    border-color: var(--color-primary);
}

.border-secondary-dynamic {
    border-color: var(--color-secondary);
}

/* Hover effects avec couleurs dynamiques */
.hover-primary-dynamic:hover {
    background-color: var(--color-primary);
    color: white;
}

.hover-secondary-dynamic:hover {
    background-color: var(--color-secondary);
    color: white;
}

/* Patterns de fond */
.bg-grid-pattern {
    background-image: linear-gradient(rgba(255, 255, 255, 0.05) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size: 20px 20px;
}

/* Animations pour les changements de thème */
.theme-transition {
    transition: background-color 0.3s ease,
    border-color 0.3s ease,
    color 0.3s ease,
    box-shadow 0.3s ease;
}

/* Animation pour les éléments qui apparaissent */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.animate-fadeIn {
    animation: fadeInUp 0.6s ease-out;
}

/* Animation pour les cartes */
@keyframes cardHover {
    from {
        transform: translateY(0) scale(1);
    }
    to {
        transform: translateY(-8px) scale(1.02);
    }
}

.card-hover {
    transition: all 0.3s ease;
}

.card-hover:hover {
    animation: cardHover 0.3s ease forwards;
}

/* Gradient animé pour les boutons */
.gradient-button {
    background: linear-gradient(45deg, var(--color-primary), var(--color-secondary));
    background-size: 200% 200%;
    animation: gradientShift 3s ease infinite;
}

@keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

/* Scrollbar personnalisée */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
}

::-webkit-scrollbar-thumb {
    background: var(--color-primary);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: var(--color-secondary);
}

/* Classes pour masquer la scrollbar */
.hide-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
}

.hide-scrollbar::-webkit-scrollbar {
    display: none;
}

/* Animation de pulsation pour les éléments importants */
@keyframes pulse-primary {
    0%, 100% {
        box-shadow: 0 0 0 0 var(--color-primary);
    }
    70% {
        box-shadow: 0 0 0 10px transparent;
    }
}

.pulse-primary {
    animation: pulse-primary 2s infinite;
}

/* Effet de survol pour les liens */
.link-hover {
    position: relative;
    overflow: hidden;
}

.link-hover::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 2px;
    background-color: var(--color-primary);
    transition: width 0.3s ease;
}

.link-hover:hover::before {
    width: 100%;
}

/* Animation pour les icônes */
@keyframes iconBounce {
    0%, 20%, 50%, 80%, 100% {
        transform: translateY(0);
    }
    40% {
        transform: translateY(-10px);
    }
    60% {
        transform: translateY(-5px);
    }
}

.icon-bounce:hover {
    animation: iconBounce 1s;
}

/* Styles pour les notifications toast */
.toast-enter {
    opacity: 0;
    transform: translateX(100%);
}

.toast-enter-active {
    opacity: 1;
    transform: translateX(0);
    transition: opacity 300ms, transform 300ms;
}

.toast-exit {
    opacity: 1;
}

.toast-exit-active {
    opacity: 0;
    transform: translateX(100%);
    transition: opacity 300ms, transform 300ms;
}

/* Effet de shimmer pour le loading */
@keyframes shimmer {
    0% {
        background-position: -468px 0;
    }
    100% {
        background-position: 468px 0;
    }
}

.shimmer {
    animation: shimmer 1.2s ease-in-out infinite;
    background: linear-gradient(
        to right,
        #f6f7f8 0%,
        #edeef1 20%,
        #f6f7f8 40%,
        #f6f7f8 100%
    );
    background-size: 800px 104px;
}

/* Responsive utilities */
@media (max-width: 640px) {
    .animate-float {
        animation-duration: 4s;
    }

    .hide-on-mobile {
        display: none;
    }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    :root {
        --bg-pattern-opacity: 0.03;
    }

    .bg-grid-pattern {
        background-image: linear-gradient(rgba(255, 255, 255, var(--bg-pattern-opacity)) 1px, transparent 1px),
        linear-gradient(90deg, rgba(255, 255, 255, var(--bg-pattern-opacity)) 1px, transparent 1px);
    }
}

/* Accessibility improvements */
@media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* Focus styles */
.focus-primary:focus {
    outline: 2px solid var(--color-primary);
    outline-offset: 2px;
}

.focus-secondary:focus {
    outline: 2px solid var(--color-secondary);
    outline-offset: 2px;
}

/* Custom properties for dynamic theming */
.dynamic-theme {
    --primary: var(--color-primary);
    --secondary: var(--color-secondary);
    --primary-rgb: 255, 140, 0; /* Default, will be updated by JS */
    --secondary-rgb: 27, 38, 59; /* Default, will be updated by JS */
}

/* Utilities for alpha variations */
.bg-primary-10 { background-color: rgba(var(--primary-rgb), 0.1); }
.bg-primary-20 { background-color: rgba(var(--primary-rgb), 0.2); }
.bg-primary-30 { background-color: rgba(var(--primary-rgb), 0.3); }

.bg-secondary-10 { background-color: rgba(var(--secondary-rgb), 0.1); }
.bg-secondary-20 { background-color: rgba(var(--secondary-rgb), 0.2); }
.bg-secondary-30 { background-color: rgba(var(--secondary-rgb), 0.3); }
// END OF FILE: src/styles/globals.css

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/styles/theme.js

export const theme = {
    colors: {
      primary: '#3498db',
      secondary: '#2c3e50',
      // Ajoutez d'autres couleurs si nécessaire
    },
    // Autres configurations de thème
  };// END OF FILE: src/styles/theme.js

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/styles/variables.css

:root {
    --primary-color: #ff8c00; /* Orange */
    --secondary-color: #1b263b; /* Dark Blue */
    --text-light: #ffffff;
    --text-dark: #333333;
    --background-light: #f8f9fa;
    --background-dark: #e9ecef;
    --sidebar-width: 240px;
    --sidebar-collapsed-width: 68px;
    --transition-speed: 0.3s;
  }// END OF FILE: src/styles/variables.css

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/types/auth.ts

import { Timestamp } from 'firebase/firestore';

export type UserStatus = 'etudiant' | 'enseignant';
export type UserLevel = 'level1' | 'level2' | 'level3' | 'level4' | 'level5';
export type EtatValue = 'ras' | 'emprunt' | 'retard' | 'suspendu';

export interface Department {
    id: string;
    name: string;
    code: string;
}

export interface AcademicLevel {
    id: string;
    name: string;
    code: string;
}

export interface BiblioUser {
    id?: string;
    name: string;
    matricule: string;
    email: string;
    niveau: string;
    departement: string;
    tel: string;
    createdAt: Timestamp;
    lastLoginAt: Timestamp;
    level: UserLevel;
    tabEtat1?: string[];
    tabEtat2?: string[];
    tabEtat3?: string[];
    tabEtat4?: string[];
    tabEtat5?: string[];
    etat1: EtatValue;
    etat2: EtatValue;
    etat3: EtatValue;
    etat4?: EtatValue;
    etat5?: EtatValue;
    emailVerified: boolean;
    profilePicture?: string;
    statut: UserStatus;
}

export interface RegisterFormData {
    name: string;
    email: string;
    password: string;
    confirmPassword: string;
    matricule: string;
    tel: string;
    statut: UserStatus;
    departement?: string;
    niveau?: string;
    profilePicture?: string | File; // Accepte string (URL) ou File
}

export interface LoginFormData {
    email: string;
    password: string;
    rememberMe: boolean;
}

export interface AuthContextType {
    user: BiblioUser | null;
    loading: boolean;
    signIn: (data: LoginFormData) => Promise<void>;
    signUp: (data: RegisterFormData) => Promise<void>;
    signOut: () => Promise<void>;
    sendEmailVerification: () => Promise<void>;
    resetPassword: (email: string) => Promise<void>;
    updateProfile: (data: Partial<BiblioUser>) => Promise<void>;
}

export interface FormErrors {
    [key: string]: string;
}

export interface AuthResponse {
    success: boolean;
    message?: string;
    user?: BiblioUser;
}

export interface EmailVerificationProps {
    email: string;
    onResendEmail: () => Promise<void>;
    onBackToLogin: () => void;
}

export interface PasswordResetProps {
    email: string;
    onBackToLogin: () => void;
}

// Constantes pour les niveaux académiques
export const ACADEMIC_LEVELS: AcademicLevel[] = [
    { id: 'licence1', name: 'Licence 1', code: 'L1' },
    { id: 'licence2', name: 'Licence 2', code: 'L2' },
    { id: 'licence3', name: 'Licence 3', code: 'L3' },
    { id: 'master1', name: 'Master 1', code: 'M1' },
    { id: 'master2', name: 'Master 2', code: 'M2' },
    { id: 'doctorat', name: 'Doctorat', code: 'DOC' }
];

// Constantes pour les départements
export const DEPARTMENTS: Department[] = [
    { id: 'informatique', name: 'Informatique', code: 'INFO' },
    { id: 'mathematiques', name: 'Mathématiques', code: 'MATH' },
    { id: 'physique', name: 'Physique', code: 'PHYS' },
    { id: 'chimie', name: 'Chimie', code: 'CHIM' },
    { id: 'biologie', name: 'Biologie', code: 'BIO' },
    { id: 'genie_civil', name: 'Génie Civil', code: 'GC' },
    { id: 'genie_electrique', name: 'Génie Électrique', code: 'GE' },
    { id: 'genie_mecanique', name: 'Génie Mécanique', code: 'GM' }
];
// END OF FILE: src/types/auth.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/types/config.ts

export interface OpeningHours {
    open: string;
    close: string;
}

export interface Contact {
    Email: string;
    Phone: string;
    WhatsApp: string;
    Facebook: string;
    Instagram: string;
}

export interface Theme {
    Primary: string;
    Secondary: string;
}

export interface OrgSettings {
    Address: string;
    Contact: Contact;
    LateReturnPenalties: string[];
    Logo: string;
    MaximumSimultaneousLoans: number;
    Name: string;
    OpeningHours: {
        Monday: string;
        Tuesday: string;
        Wednesday: string;
        Thursday: string;
        Friday: string;
        Saturday: string;
        Sunday: string;
    };
    SpecificBorrowingRules: string[];
    Theme: Theme;
}

export interface AppSettings {
    AppVersion: number;
    DefaultLoanDuration: number;
    GlobalLimits: number;
    MaintenanceMode: boolean;
}
// END OF FILE: src/types/config.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/types/thesis.ts


import { Timestamp } from 'firebase/firestore';

export interface ThesisComment {
    heure: Timestamp;
    nomUser: string;
    note: number;
    texte: string;
}

export interface ThesisCommentWithUserData extends ThesisComment {
    id: string;
    userId: string;
    userName: string;
    userAvatar?: string;
    helpful?: number;
}

export interface BiblioThesis {
    id: string;
    abstract: string;
    annee: number;
    commentaire: ThesisComment[];
    département: string;
    etagere: string;
    image: string;
    keywords: string;
    matricule: string;
    name: string;
    theme?: string;
    superviseur?: string;
    pdfUrl?: string;
}

export interface ThesisSearchFilters {
    query: string;
    author: string;
    department: string;
    year: string;
    keywords: string;
    supervisor: string;
}
// END OF FILE: src/types/thesis.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/utils/theme.ts

/**
 * Convertit une couleur hexadécimale en valeurs RGB
 */
export function hexToRgb(hex: string): { r: number; g: number; b: number } | null {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
    } : null;
}

/**
 * Convertit des valeurs RGB en chaîne CSS
 */
export function rgbToString(r: number, g: number, b: number): string {
    return `${r}, ${g}, ${b}`;
}

/**
 * Calcule la luminance relative d'une couleur
 */
export function getLuminance(hex: string): number {
    const rgb = hexToRgb(hex);
    if (!rgb) return 0;

    const { r, g, b } = rgb;

    // Normaliser les valeurs RGB
    const normalize = (value: number) => {
        const normalized = value / 255;
        return normalized <= 0.03928
            ? normalized / 12.92
            : Math.pow((normalized + 0.055) / 1.055, 2.4);
    };

    return 0.2126 * normalize(r) + 0.7152 * normalize(g) + 0.0722 * normalize(b);
}

/**
 * Détermine si une couleur est claire ou sombre
 */
export function isLightColor(hex: string): boolean {
    return getLuminance(hex) > 0.5;
}

/**
 * Obtient une couleur de contraste appropriée (noir ou blanc)
 */
export function getContrastColor(hex: string): string {
    return isLightColor(hex) ? '#000000' : '#ffffff';
}

/**
 * Assombrit ou éclaircit une couleur
 */
export function adjustBrightness(hex: string, amount: number): string {
    const rgb = hexToRgb(hex);
    if (!rgb) return hex;

    const adjust = (value: number) => {
        const adjusted = value + amount;
        return Math.max(0, Math.min(255, adjusted));
    };

    const r = adjust(rgb.r).toString(16).padStart(2, '0');
    const g = adjust(rgb.g).toString(16).padStart(2, '0');
    const b = adjust(rgb.b).toString(16).padStart(2, '0');

    return `#${r}${g}${b}`;
}

/**
 * Génère une couleur avec une opacité donnée
 */
export function withOpacity(hex: string, opacity: number): string {
    const rgb = hexToRgb(hex);
    if (!rgb) return hex;

    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`;
}

/**
 * Applique un thème à l'élément root du document
 */
export function applyThemeToRoot(primaryColor: string, secondaryColor: string): void {
    const root = document.documentElement;

    // Couleurs principales
    root.style.setProperty('--color-primary', primaryColor);
    root.style.setProperty('--color-secondary', secondaryColor);
    root.style.setProperty('--tw-color-primary', primaryColor);
    root.style.setProperty('--tw-color-secondary', secondaryColor);

    // Valeurs RGB pour les variations avec opacité
    const primaryRgb = hexToRgb(primaryColor);
    const secondaryRgb = hexToRgb(secondaryColor);

    if (primaryRgb) {
        root.style.setProperty('--primary-rgb', rgbToString(primaryRgb.r, primaryRgb.g, primaryRgb.b));
    }

    if (secondaryRgb) {
        root.style.setProperty('--secondary-rgb', rgbToString(secondaryRgb.r, secondaryRgb.g, secondaryRgb.b));
    }

    // Variations de luminosité
    root.style.setProperty('--primary-light', adjustBrightness(primaryColor, 30));
    root.style.setProperty('--primary-dark', adjustBrightness(primaryColor, -30));
    root.style.setProperty('--secondary-light', adjustBrightness(secondaryColor, 30));
    root.style.setProperty('--secondary-dark', adjustBrightness(secondaryColor, -30));

    // Couleurs de contraste
    root.style.setProperty('--primary-contrast', getContrastColor(primaryColor));
    root.style.setProperty('--secondary-contrast', getContrastColor(secondaryColor));
}

/**
 * Génère des couleurs complémentaires basées sur une couleur principale
 */
export function generateColorPalette(baseColor: string) {
    return {
        primary: baseColor,
        primaryLight: adjustBrightness(baseColor, 40),
        primaryDark: adjustBrightness(baseColor, -40),
        primaryContrast: getContrastColor(baseColor),
        primary10: withOpacity(baseColor, 0.1),
        primary20: withOpacity(baseColor, 0.2),
        primary30: withOpacity(baseColor, 0.3),
        primary50: withOpacity(baseColor, 0.5),
        primary80: withOpacity(baseColor, 0.8),
    };
}

/**
 * Valide si une chaîne est une couleur hexadécimale valide
 */
export function isValidHexColor(color: string): boolean {
    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);
}

/**
 * Obtient les couleurs par défaut du thème
 */
export function getDefaultTheme() {
    return {
        primary: '#ff8c00',
        secondary: '#1b263b'
    };
}

/**
 * Mélange deux couleurs selon un ratio
 */
export function blendColors(color1: string, color2: string, ratio: number): string {
    const rgb1 = hexToRgb(color1);
    const rgb2 = hexToRgb(color2);

    if (!rgb1 || !rgb2) return color1;

    const r = Math.round(rgb1.r * (1 - ratio) + rgb2.r * ratio);
    const g = Math.round(rgb1.g * (1 - ratio) + rgb2.g * ratio);
    const b = Math.round(rgb1.b * (1 - ratio) + rgb2.b * ratio);

    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
}
// END OF FILE: src/utils/theme.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/src/vite-env.d.ts

/// <reference types="vite/client" />
// END OF FILE: src/vite-env.d.ts

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/test.sh

chmod +x prompt.sh// END OF FILE: test.sh

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/tsconfig.app.json

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
// END OF FILE: tsconfig.app.json

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/tsconfig.json

{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
// END OF FILE: tsconfig.json

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/tsconfig.node.json

{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
// END OF FILE: tsconfig.node.json

//---> PATH: /c/Users/ELEONOR BJOUNKENG/Desktop/web-biblio-client/vite.config.ts

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    tailwindcss()
  ],
})
// END OF FILE: vite.config.ts

